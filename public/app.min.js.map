{"version":3,"sources":["app.module.js","configs/routes.js","controllers/counseling.js","controllers/home.js","controllers/machine.js","controllers/newSurvey.js","controllers/score.js","controllers/webgl.js","controllers/welcome.js","directives/navadmin.js","filters/friendlyClass.js","filters/parseFilter.js","runs/xedit.js","services/character.js","services/ct.js","services/gwyn.js","services/machine.js","services/score.js","services/scores.js","services/widget.js","TOREFACTOR/machine/tree.js","TOREFACTOR/home/home.controllers.js","TOREFACTOR/shared/shared.controllers.js","TOREFACTOR/counseling/AlternativesToGetYouWhereYouWantToGo.services.js","TOREFACTOR/counseling/GettingWhatYouWant.services.js","TOREFACTOR/counseling/bacTable.directives.js","TOREFACTOR/counseling/counseling.controllers.js","TOREFACTOR/counseling/gamePlan.service.js","TOREFACTOR/counseling/goodThingsAboutDrinking.service.js","TOREFACTOR/counseling/notSoGoodThingsAboutDrinking.service.js","TOREFACTOR/counseling/otherDrugs.js","TOREFACTOR/counseling/resourcesModals.directives.js","services/parse/added.js","services/parse/auth.js","services/parse/element.js","services/parse/error.js","services/parse/form.js","services/parse/intervention.js","services/parse/progress.js","services/parse/response.js","services/parse/user.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnxngBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9qzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrnnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClnlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzjlnfile":"app.min.js","sourcesContent":["'use strict';\n\n/*\r\n *   Authors: Guido Ruiz, Daniel Rivero\r\n *\r\n *   Description: You can add all the dependencies you need here. The process of adding a new\r\n *   angular dependency is to add the .js on the correct folder and importing it through the index.jade, then writing\r\n *   the module name on it (found usually on the site of the dependency) as a new item in the array.\r\n */\n\nParse.initialize(\"83fy28yfh238\");\n//note if running on local host user the following string for the Parse.serverURL:  http://localhost:3013/parse (note: 3013 is the port number that you are using to run eEVA)\n//Parse.serverURL = 'https://virtualhealthcounseling.com/parse';\nParse.serverURL = 'http://localhost:3013/parse';\n\nangular.module('app', ['xeditable', 'ngAnimate', 'ui.bootstrap', 'angularTreeview', 'ngclipboard', 'ui.router', 'ngCookies', 'ngMaterial', 'angular-bind-html-compile', 'chart.js', 'oc.lazyLoad', 'LocalStorageModule', 'ui.sortable', 'ngSanitize']);","'use strict';\n\n/*\r\n *   Authors: Guido Ruiz, Daniel Rivero\r\n *\r\n *   Description: Below are all the routes of eEva, shared across all controllers. A route is a way of telling angular\r\n *   what controller / page to load when a particular URL is found on the web page. For example, localhost:3000/#/ is\r\n *   read by this route, and returned is the home.view.html with the controller homeController. In all the other files\r\n *   we've simply created the description of these controllers and web templates, but this route file is what actually\r\n *   puts them together, instantiates them, and gives to the user. The best way to think about this is the user visiting\r\n *   the home page and seeing a TV, and angular changes the chanel depending on what URL the user types (analogy of\r\n *   pressing buttons on a TV remote). The TV does not change, unlike older web pages, the TV (skeleton) of the site\r\n *   stays the same, but the content within it is swapped 'injected' with something else. This is why the web page never\r\n *   truly 'reloads' unlike older web pages.\r\n *\r\n *   NOTE that some routes have an extra 'htmlModules' and 'mainframeConfig'. These are used by the counseling\r\n *   controller because we have many different demos. We didn't want to create a separate page for each demo, instead,\r\n *   we let the counseling controller use these two files to know what character to load, what intervention to load,\r\n *   and what HTML blocks to load (camera? user button? unity or haptek? etc). You can create a custom key value pair\r\n *   if you need to for another controller based on the route similar to how we did it with the counseling controller.\r\n *\r\n *   You can add new routes by creating a new '.when' parameter. There is a catch '.otherwise' that handles any route\r\n *   in the URL not involving the ones dictated here. The routes should be self explanatory.\r\n */\nangular.module('app').config(states);\n\nstates.$inject = ['$stateProvider', '$urlRouterProvider', 'localStorageServiceProvider'];\n\nfunction states($stateProvider, $urlRouterProvider, localStorageServiceProvider) {\n    //--------------------------------------------------------------------------------------------------------------\n    /* PRODUCTION ROUTES */\n    //--------------------------------------------------------------------------------------------------------------\n    /*  $stateProvider.state('home', {\r\n            url: '/',\r\n            templateUrl: 'views/home.view.html',\r\n            controller: 'homeController'\r\n        });\r\n        */\n    $stateProvider.state('home', {\n        url: '/',\n        templateUrl: 'views/welcome.view.html',\n        controller: 'welcomeController'\n    });\n    /*\r\n    \r\n        $stateProvider.state('home', {\r\n            url: '/admin',\r\n            templateUrl: 'views/home.view.html',\r\n            controller: 'homeController'\r\n        });\r\n    */\n\n    $stateProvider.state('password', {\n        url: '/account/:token',\n        templateUrl: 'views/password.view.html',\n        controller: 'passwordController'\n    });\n\n    $stateProvider.state('machine', {\n        url: '/machine/{edit}',\n        params: { edit: null },\n        templateUrl: \"views/machine.view.html\",\n        controller: \"machineController\"\n    });\n\n    $stateProvider.state('editor', {\n        templateUrl: \"views/editor.view.html\",\n        controller: \"editorController\"\n    });\n\n    $stateProvider.state('welcome', {\n        url: '/counseling',\n        templateUrl: 'views/welcome.view.html',\n        controller: 'welcomeController'\n    });\n\n    $stateProvider.state('counseling', {\n        templateUrl: 'views/counseling.view.html',\n        controller: 'counselingController'\n    });\n\n    //todo:  get rid of the one following state, this is for testing the feedback module\n    $stateProvider.state('testUsrFeedback', {\n        templateUrl: 'views/testFeedback/feedbackTEST.view.html',\n        url: '/feedbackTEST'\n    });\n    //end of todo\n\n\n    $stateProvider.state('feedback', {\n        templateUrl: 'views/testFeedback/feedbackTEST.view.html',\n        controller: 'scoreController'\n    });\n\n    $stateProvider.state('feedback.intervention', {\n        url: '/feedbackTEST',\n        templateUrl: 'views/testFeedback/selectIntervention.feedback.html'\n    });\n\n    $stateProvider.state('feedback.form', {\n        templateUrl: 'views/testFeedback/selectForm.feedback.html'\n    });\n\n    $stateProvider.state('survey', {\n        templateUrl: 'views/survey/newSurvey.html',\n        controller: 'newSurveyController'\n    });\n\n    $stateProvider.state('survey.intervention', {\n        url: '/survey',\n        templateUrl: 'views/survey/selectIntervention.html'\n    });\n\n    $stateProvider.state('survey.form', {\n        templateUrl: 'views/survey/selectForm.html'\n    });\n\n    $stateProvider.state('survey.element', {\n        templateUrl: 'views/survey/selectElement.html'\n    });\n\n    $stateProvider.state('survey.editElement', {\n        templateUrl: 'views/survey/editElement.html'\n    });\n\n    $stateProvider.state('surveyFormTest', {\n        url: '/surveyFormTest',\n        templateUrl: 'views/surveyFormTest.view.html'\n    });\n\n    $stateProvider.state('notYetMapped', {\n        url: '/notYetMapped',\n        templateUrl: 'views/not.yet.mapped.view.html',\n        controller: 'notYetMappedController'\n    });\n\n    $stateProvider.state('webgl', {\n        url: '/robocanes',\n        data: {\n            mainframeConfig: 'mainframe/configs/eEvaConfig.xml',\n            htmlModules: ['userButton', 'userMenu', 'virtualys', 'contentView', 'cameraMenu', 'cameraButton', 'pauseButton', 'resumeButton', 'backButton', 'progressBar', 'micButton', 'micSlash', 'myProgress']\n            //           htmlModules: ['userButton', 'userMenu', 'elementPanel', 'virtualys', 'contentView', 'cameraMenu', 'cameraButton', 'pauseButton', 'resumeButton', 'backButton', 'progressBar' ,'micButton', 'micSlash', 'navBar', 'myProgress']\n        },\n        templateUrl: 'views/webgl.view.html',\n        controller: 'webglController'\n    });\n\n    //--------------------------------------------------------------------------------------------------------------\n    /* TESTING, DEBUGGING ROUTES */\n    //--------------------------------------------------------------------------------------------------------------\n\n    $stateProvider.state('office01', {\n        url: \"/demo/office/01\",\n        data: {\n            mainframeConfig: 'mainframe/configs/dcuConfig.xml',\n            htmlModules: ['userButton', 'userMenu', 'elementPanel', 'virtualys', 'contentView', 'cameraMenu', 'cameraButton', 'navbar', 'myProgress'],\n            character: { // overrides user selected character\n                id: \"OFFICE_DEMO_01\",\n                img: \"\",\n                type: \"virtualys\",\n                name: \"Office Demo 01\",\n                path: \"unity/tests/FIU_WomanBlondHair_WithOffice_2017_02_16/\"\n            }\n        },\n        templateUrl: 'views/webgl.view.html',\n        controller: 'webglController'\n    });\n\n    $urlRouterProvider.otherwise(\"/\");\n\n    localStorageServiceProvider.setPrefix('eEva');\n}","'use strict';\n\nangular.module('app').controller('counselingController', counselingController);\n\ncounselingController.$inject = ['$scope', '$window', '$uibModal', '$state', 'characterService'];\n\nfunction counselingController($scope, $window, $uibModal, $state, characterService) {\n    $scope.counselors = characterService.counselors;\n    $scope.selectedCounselor = $scope.counselors[0];\n    $scope.previewImgSrc = $scope.selectedCounselor.img;\n\n    $scope.setCounselor = function (index) {\n        characterService.setUsersCounselor(index);\n        $scope.selectedCounselor = characterService.getUsersCounselor();\n        // characterService.changeName($scope.selectedCounselor.name);\n\n        $scope.nextHref = $scope.selectedCounselor.url;\n        $scope.previewImgSrc = $scope.selectedCounselor.img;\n    };\n}","'use strict';\n\nangular.module('app').controller('homeController', homeController);\n\nhomeController.$inject = ['$scope', 'AuthService', 'UserService', 'AdminService'];\n\nfunction homeController($scope, AuthService, UserService, AdminService) {\n\n    //following handles the Success and Error messages\n    $scope.Success = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-success\",\n            alertType: \"Success!\",\n            alertText: message\n        };\n    };\n    $scope.Error = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-danger\",\n            alertType: \"Error!\",\n            alertText: message\n        };\n    };\n\n    $scope.currentUser = AuthService.currentUser();\n\n    $scope.mode = 'login';\n\n    $scope.credentials = {\n        username: '',\n        password: ''\n    };\n\n    $scope.changeMode = function (mode) {\n        return $scope.mode = mode;\n    };\n\n    $scope.login = function () {\n        return AuthService.login($scope.credentials).then(function (success) {\n            return $scope.currentUser = AuthService.currentUser();\n        }, function (error) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.Error(error.message);\n        });\n    };\n\n    $scope.registration = function () {\n        return AuthService.registration($scope.credentials).then(function (success) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.mode = 'login';\n        }, function (error) {\n            return $scope.currentUser = AuthService.currentUser();\n        });\n    };\n\n    $scope.logout = function () {\n        return AuthService.logout().then(function (success) {\n            return $scope.currentUser = AuthService.currentUser();\n        }, function (error) {\n            return $scope.currentUser = AuthService.currentUser();\n        });\n    };\n\n    $scope.forgot = function () {};\n\n    $scope.getAvailableUsers = function () {\n        //set mode to addAdminUser\n        $scope.mode = 'addAdminUser';\n        //populate list of all active users\n        //todo: do not add the users that are already administrators\n        UserService.getActiveUsers().then(function (objects) {\n            return $scope.activeUsers = objects;\n        }, function (error) {});\n    };\n\n    $scope.selectUserForAdmin = function (userName) {\n        //set the username of the user to add as administrator\n        $scope.newAdmin = userName;\n    };\n\n    $scope.addUserToAdminGroup = function () {\n\n        //user to be added to administrator role\n        var userID = $scope.newAdmin;\n        //run cloud code to add user to as administrator via AdminService\n        AdminService.addUserToAdminGroup(userID).then(function (success) {\n            return $scope.Success('User added successfully to Administrator group.');\n        }, function (error) {\n            return $scope.Error('Error: user was not added to Administrator group.');\n        });\n    };\n\n    // function validateEmail(email) {\n    //     var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    //     return re.test(email);\n    // }\n    //\n    // $scope.forgot = function() {\n    //     if(validateEmail($scope.requestEmail)) {\n    //         $http.post('/auth/password/request', { email: $scope.requestEmail })\n    //             .then((res) => { console.log(res); })\n    //             .catch((err) => { console.log(err); });\n    //     }\n    // }\n}","'use strict';\n\n/*\r\n *   Authors: Guido Ruiz, Daniel Rivero\r\n *\r\n *   Description: Here lies all the controllers for the state machine page, in charge of creating different route maps\r\n *   for the virtual character (known also as interventions). The state machine page has a <node, edge> interface that\r\n *   makes it easy to create route maps for the virtual character, as well as allows creations of primitive element\r\n *   types that work with Mihai's mainframe. The mainframe is not discussed in this file.\r\n *\r\n *   There are (3) controllers at the time of this writing. The machine controller is in charge of the <node, edge>\r\n *   graph, with functions that add nodes, add edges, and modify the view given data (also communicates with JSPlumb).\r\n *   The start controller is in charge of loading a new state machine or creating a new one. The tree view controller\r\n *   is in charge of a tiny view on the bottom right side of the state machine page that shows a tree view structure of\r\n *   the elements stored in the database to easily get their IDs.\r\n *\r\n *   Good luck!\r\n */\n\nangular.module('app').controller('machineController', machineController);\n\nmachineController.$inject = ['$scope', '$state', '$timeout', '$stateParams', 'StateMachineService', 'AddedService'];\n\nfunction machineController($scope, $state, $timeout, $stateParams, StateMachineService, AddedService) {\n    var Added = Parse.Object.extend('Added');\n\n    $scope.manager = StateMachineService;\n\n    $scope.alert = null; // stores any alerts to show to the user\n    $scope.nameBox = \"\";\n    $scope.expressionBox = \"\";\n    $scope.addLoaded = false;\n    $scope.dynamicPopover = {\n        templateUrl: 'views/templates/confirmbox.view.html',\n        nameToDelete: '',\n        title: 'Warning',\n        placement: 'bottom'\n    };\n\n    $scope.Success = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-success\",\n            alertType: \"Success!\",\n            alertText: message\n        };\n    };\n    $scope.Error = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-danger\",\n            alertType: \"Error!\",\n            alertText: message\n        };\n    };\n\n    $scope.new = function () {\n        var object = AddedService.prototype();\n\n        AddedService.createAdded(object).then(function (success) {\n            return $scope.manager.added.push(success);\n        }, function (error) {\n            return $scope.Error(\"Could not copy the state machine selected.\");\n        });\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // this function is called when you want to load a state graph for editing\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.load = function (added) {\n        $state.go('machine', { edit: added.object.id });\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // save logic for when user clicks save on a state graph\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.save = function () {\n        // delete states and transitions if primitive\n        if ($scope.manager.sm.primitive) {\n            $scope.manager.sm.init.states = [];\n            $scope.manager.sm.init.transitions = [];\n        } else $scope.manager.sm.execute = \"\";\n\n        // upload your new state machine map to the server as a new <node>\n        $scope.manager.sm.save().then(function (success) {\n            $scope.Success(\"State machine was successfully saved into the system.\");\n\n            AddedService.getAllAdded().then(function (success) {\n                return $scope.manager.added = success;\n            }, function (error) {\n                return $scope.Error(\"There was an error contacting the server. Please try again.\");\n            });\n        }, function (error) {\n            return $scope.Error(\"There was an error contacting the server. Please try again.\");\n        });\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // delete a state graph from the server completely\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.delete = function () {\n        if ($scope.manager.sm) {\n            $scope.manager.sm.delete().then(function (success) {\n                return $state.reload();\n            }, function (error) {\n                return $scope.Error('Could not delete the state machine from the server.');\n            });\n        }\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // copy a state graph and make a new one (a copy)\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.copy = function (added) {\n        added.name += \"_Copy\";\n\n        AddedService.createAdded(added).then(function (success) {\n            return $state.go('machine', { edit: success.object.id });\n        }, function (error) {\n            return $scope.Error(\"Could not copy the state machine selected.\");\n        });\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // in charge of updating an <edge> label in the JSPlumb scene as you edit the name of the <edge> on the side panel\n    // -----------------------------------------------------------------------------------------------------------------\n\n    var initializing = true;\n    $scope.$watch('expressionBox', function (newValue, oldValue) {\n        if (initializing) $timeout(function () {\n            return initializing = false;\n        });else $scope.manager.transitionIdToObject[$scope.manager.selected.id].connection.getOverlay(\"label\").setLabel(newValue);\n    });\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // fixes the size of the <edge> when the <node> changes in size due to it being renamed\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.updateConnection = function (node_Id) {\n        return $scope.manager.instance.repaintEverything();\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // deletes a <node> from the state graph\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.removeNode = function (node) {\n        return $scope.manager.removeNode(node);\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // add a <node> to the state graph from the side panel inventory\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.addNode = function (class_id) {\n        // add node to angular first\n        $scope.manager.addNodeAngular(class_id);\n\n        // add node to plumb second (the visual GUI state graph)\n        $scope.$$postDigest(function () {\n            // add state to jsPlumb\n            var el = $scope.manager.instance.getSelector(\"#nodeId_\" + $scope.manager.nodeId)[0];\n            $scope.manager.addNodePlumb(el);\n        });\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // remove an <edge> from the state graph\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.removeTransition = function (transition) {\n        // remove transition from angular first\n        $scope.manager.removeTransition(transition.id);\n        if (transition == $scope.manager.selected) $scope.manager.selected = null;\n\n        // remove transition from plumb second (the visual GUI state graph)\n        $scope.manager.instance.detach($scope.manager.transitionIdToObject[transition.id]);\n        delete $scope.manager.transitionIdToObject[transition.id];\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // this function starts up jsPlumb, the graphical GUI library that shows the state graph\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.jsPlumbInit = function () {\n        console.log(\"Started jsPlumb\");\n\n        // settings\n        $scope.manager.instance = jsPlumb.getInstance({\n            Endpoint: [\"Dot\", {\n                radius: 2\n            }],\n            Connector: \"StateMachine\",\n            HoverPaintStyle: {\n                strokeStyle: \"#1e8151\",\n                lineWidth: 2\n            },\n            ConnectionOverlays: [[\"Arrow\", {\n                location: 1,\n                id: \"arrow\",\n                length: 14,\n                foldback: 0.8\n            }], [\"Label\", {\n                label: \"\",\n                id: \"label\",\n                cssClass: \"aLabel\"\n            }]],\n            Container: \"canvas\"\n        });\n\n        // allow for anchor connections (means the <edge> 'hook' onto the <nodes>)\n        $scope.manager.instance.registerConnectionType(\"basic\", {\n            anchor: \"Continuous\",\n            connector: \"StateMachine\"\n        });\n\n        // event function called when an <edge> is formed within the state graph\n        $scope.manager.instance.bind(\"connection\", function (c) {\n            var source = c.source.id;\n            var target = c.target.id;\n\n            c.connection._jsPlumb.id = \"transId_\" + $scope.manager.transId;\n\n            var label = $scope.manager.lastExpression != \"\" ? $scope.manager.lastExpression : \" \";\n            c.connection.getOverlay(\"label\").setLabel(label);\n            $scope.manager.lastExpression = \"\";\n\n            $scope.manager.transitionIdToObject[\"transId_\" + $scope.manager.transId] = c;\n            $scope.manager.addTransition(source, target);\n            $scope.manager.incrementTID();\n\n            $scope.$apply();\n        });\n\n        // event function called when an <edge> is clicked within the state graph\n        $scope.manager.instance.bind(\"click\", function (c) {\n            var selected = c._jsPlumb.id;\n\n            var trans = $scope.manager.sm.init.transitions.find(function (t) {\n                return t.id == selected;\n            });\n\n            if (trans) $scope.$apply(function () {\n                return $scope.manager.selected = trans;\n            });\n        });\n\n        // the actual init function of jsPlumb\n        $scope.manager.instance.batch(function () {\n            // add state to jsPlumb\n            var els = jsPlumb.getSelector(\".statemachine-demo .w\");\n            var highestId = \"0\";\n\n            els.forEach(function (el, i) {\n                $scope.manager.addNodePlumb(el);\n\n                var currId = parseInt($scope.manager.sm.init.states[i].id.split(\"_\")[1]);\n                highestId = Math.max(currId, highestId);\n            });\n\n            $scope.manager.nodeId = highestId;\n            $scope.manager.incrementNID();\n\n            // prevents infinite loop, as 'connect' jsPlumb calls the bind declared above\n            var copy = angular.copy($scope.manager.sm.init.transitions);\n            $scope.manager.sm.init.transitions = [];\n\n            copy.forEach(function (c, i) {\n                $scope.manager.lastExpression = c.guard.expression;\n\n                $scope.manager.instance.connect({\n                    source: c.from,\n                    target: c.to,\n                    type: \"basic\"\n                });\n\n                $scope.manager.sm.init.transitions[i].guard = c.guard;\n            });\n        });\n    };\n\n    // jsPlumb wait timer\n    $scope.initWait = function () {\n        if (!$scope.addLoaded) $timeout($scope.initWait, 100);else $scope.jsPlumbInit();\n    };\n\n    // starts jsPlumb when angular is ready first, uses wait timer above to do this\n    jsPlumb.ready($scope.initWait);\n\n    function init() {\n        $scope.manager.reset();\n        $scope.manager.editing = $stateParams.edit;\n\n        AddedService.getAllAdded().then(function (objects) {\n            $scope.manager.added = objects;\n\n            // look for current 'editing' state machine if we're editing\n            var existing = $scope.manager.added.find(function (a) {\n                return a.object.id == $scope.manager.editing;\n            });\n\n            console.log(\"Finished loading added states\");\n\n            if (!existing) return;\n\n            // id to param size\n            var idToParamSize = {};\n\n            $scope.manager.added.forEach(function (a) {\n                idToParamSize[a.object.id] = a.init.params.length;\n            });\n\n            $scope.manager.sm = existing;\n\n            // update any parameters changed by a previous edit\n            $scope.manager.sm.init.states.forEach(function (s) {\n                var oldLen = s.params.length;\n                var newLen = idToParamSize[s.class];\n\n                if (newLen > oldLen) for (var i = 0; i < newLen - oldLen; i++) {\n                    s.params.push(\"\");\n                } else if (newLen < oldLen) for (var _i = 0; _i < oldLen - newLen; _i++) {\n                    s.params.pop();\n                } // fix any negative positions\n                s.plumbleft = Math.max(0, parseInt(s.plumbleft.replace(\"px\", \"\"))) + \"px\";\n                s.plumbtop = Math.max(0, parseInt(s.plumbtop.replace(\"px\", \"\"))) + \"px\";\n            });\n\n            $scope.addLoaded = true;\n            $scope.manager.showLoad = false;\n        }, function (error) {\n            return $scope.Error('There was an error contacting the server. Please try again.');\n        });\n    }\n\n    // initial load of empty state machine\n    init();\n}","'use strict';\n\nangular.module('app').controller('newSurveyController', newSurveyController);\n\nnewSurveyController.$inject = ['$scope', '$state', 'InterventionService', 'FormService', 'ElementService'];\n\nfunction newSurveyController($scope, $state, InterventionService, FormService, ElementService) {\n    $scope.interventions = [];\n    $scope.forms = [];\n    $scope.elements = [];\n\n    $scope.totElements = 0;\n\n    //following handles the Success and Error messages\n    $scope.Success = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-success\",\n            alertType: \"Success!\",\n            alertText: message\n        };\n    };\n    $scope.Error = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-danger\",\n            alertType: \"Error!\",\n            alertText: message\n        };\n    };\n\n    // -- helper functions that refresh arrays above\n    function refreshElements() {\n        if (!$scope.formSelected) return;\n\n        // code goes here...\n        ElementService.getElementsByForm($scope.formSelected.object).then(function (objects) {\n            $scope.elements = objects;\n\n            //automatically reorder if deletion of an element has occurred and reordering of elements\n            //have not taken place\n            for (var i = 0; i < $scope.elements.length; i++) {\n                if (i != $scope.elements[i].order) {\n                    $scope.elements[i].order = i;\n                    $scope.elements[i].save();\n                }\n            }\n\n            //update the number of total elements belonging to current form (used for reording elements in\n            //the editor view\n            $scope.totElements = $scope.elements.length - 1;\n        }, function (error) {});\n    }\n    function refreshForms() {\n        if (!$scope.interventionSelected) return;\n\n        FormService.getFormsByIntervention($scope.interventionSelected.object).then(function (objects) {\n            return $scope.forms = objects;\n        }, function (error) {});\n    }\n    function refreshInterventions() {\n        InterventionService.getAllInterventions().then(function (objects) {\n            return $scope.interventions = objects;\n        }, function (error) {});\n    }\n\n    // this function is responsible for updating the order of all elements if the user has decided to change\n    // the order of one of the elements\n    function reorderElements(elem, prevOrder, newOrder) {\n        if (prevOrder < newOrder) {\n            console.log(\"previous is less than new\");\n            for (var i = prevOrder + 1; i <= newOrder; i++) {\n                elem[i].order -= 1;\n                elem[i].save();\n            }\n        } else if (prevOrder > newOrder) {\n            console.log(\"previous is greater than new\");\n            for (var _i = newOrder; _i < prevOrder; _i++) {\n                elem[_i].order += 1;\n                elem[_i].save();\n            }\n        }\n        return elem;\n    }\n\n    // -- select an intervention, form, or element\n\n    $scope.interventionSelected = null;\n    $scope.formSelected = null;\n    $scope.elementSelected = null;\n    $scope.elementPrevOrder = null;\n    //$scope.workingElement = new Object();\n    $scope.workingElement = {\n        phrase: [],\n        content: []\n    };\n\n    $scope.editorMode = {};\n\n    $scope.selectIntervention = function (intervention) {\n        $scope.interventionSelected = intervention;\n        refreshForms();\n        $state.go('survey.form');\n    };\n    $scope.selectForm = function (form) {\n        $scope.formSelected = form;\n        refreshElements();\n        $state.go('survey.element');\n    };\n    $scope.selectElement = function (element) {\n        // code goes here...\n        console.log(\"EditorMode!\");\n        $scope.workingElement = {\n            phrase: [],\n            content: []\n        };\n\n        $scope.elementSelected = element;\n\n        console.log(element);\n\n        $scope.elementSelected.phrase.forEach(function (p, index) {\n            // console.log(index);\n            $scope.workingElement.phrase.push({\n                text: p\n            });\n        });\n        $scope.elementSelected.content.forEach(function (c, index) {\n            $scope.workingElement.content.push({\n                text: c\n            });\n        });\n\n        $scope.elementPrevOrder = element.order;\n\n        var elType = $scope.elementSelected.type;\n        console.log(elType);\n        //the following switch case statement determines the fields that are needed to be displayed\n        //in the element editor view based on the type of element that is currently selected\n        switch (elType) {\n            case \"QuestionAnswer\":\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = false;\n                $scope.editorMode.content = true;\n                $scope.editorMode.html = false;\n                $scope.editorMode.table = false;\n                $scope.editorMode.moreOptions = true;\n                break;\n            case \"QuestionAnswer-Checkbox\":\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = false;\n                $scope.editorMode.content = true;\n                $scope.editorMode.html = false;\n                $scope.editorMode.table = false;\n                $scope.editorMode.moreOptions = true;\n                break;\n            case \"textArea\":\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = false;\n                $scope.editorMode.content = false;\n                $scope.editorMode.html = false;\n                $scope.editorMode.table = false;\n                $scope.editorMode.moreOptions = true;\n                break;\n            case \"feedback\":\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = false;\n                $scope.editorMode.content = false;\n                $scope.editorMode.html = false;\n                $scope.editorMode.table = false;\n                $scope.editorMode.moreOptions = false;\n                break;\n            case \"feedbackList\":\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = true;\n                $scope.editorMode.content = false;\n                $scope.editorMode.html = false;\n                $scope.editorMode.table = false;\n                $scope.editorMode.moreOptions = false;\n                break;\n            case \"Content\":\n                $scope.editorMode.phrase = false;\n                $scope.editorMode.morePhrases = false;\n                $scope.editorMode.content = false;\n                $scope.editorMode.html = true;\n                $scope.editorMode.table = false;\n                $scope.editorMode.moreOptions = false;\n                break;\n            case \"TabularInput\":\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = false;\n                $scope.editorMode.content = false;\n                $scope.editorMode.html = false;\n                $scope.editorMode.table = true;\n                $scope.editorMode.moreOptions = true;\n                break;\n            case \"MenuElement\":\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = false;\n                $scope.editorMode.content = true;\n                $scope.editorMode.html = false;\n                $scope.editorMode.table = false;\n                $scope.editorMode.moreOptions = false;\n                break;\n            case \"RangeSliderElement\":\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = false;\n                $scope.editorMode.content = true;\n                $scope.editorMode.html = false;\n                $scope.editorMode.table = false;\n                $scope.editorMode.moreOptions = true;\n                break;\n            case \"LoginRegisterElement\":\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = false;\n                $scope.editorMode.content = false;\n                $scope.editorMode.html = false;\n                $scope.editorMode.table = false;\n                $scope.editorMode.moreOptions = false;\n                break;\n            case \"MenuWithCompletion\":\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = false;\n                $scope.editorMode.content = true;\n                $scope.editorMode.html = false;\n                $scope.editorMode.table = false;\n                $scope.editorMode.moreOptions = false;\n                break;\n            default:\n                $scope.editorMode.phrase = true;\n                $scope.editorMode.morePhrases = true;\n                $scope.editorMode.content = true;\n                $scope.editorMode.html = true;\n                $scope.editorMode.table = true;\n                $scope.editorMode.moreOptions = true;\n        }\n        $state.go('survey.editElement');\n    };\n\n    // -- create objects in the server\n    $scope.newIntervention = {};\n    $scope.newForm = {};\n    $scope.newElement = {};\n    $scope.numRows = -1;\n    $scope.numCols = -1;\n    $scope.xHeaders = false;\n    $scope.yHeaders = false;\n\n    $scope.createIntervention = function () {\n        if ($scope.newIntervention.name) {\n            InterventionService.createIntervention($scope.newIntervention).then(function (objects) {\n                return refreshInterventions();\n            }, function (error) {});\n            $scope.Success(\"New intervention has been created successfully, and is now at the bottom of the intervention list.\");\n        } else {\n            $scope.Error(\"To create a new intervention you must first provide the name of the intervention to be created.\");\n        }\n    };\n    $scope.createForm = function () {\n        if ($scope.newForm.name) {\n            FormService.createForm($scope.newForm, $scope.interventionSelected.object).then(function (objects) {\n                return refreshForms();\n            }, function (error) {});\n            $scope.Success(\"New form has been created successfully, and is now at the bottom of the form list.\");\n        } else {\n            $scope.Error(\"To create a new form you must first provide the name of the form to be created.\");\n        }\n    };\n    $scope.createElement = function (elementType) {\n        // code goes here...\n        $scope.newElement.type = elementType;\n        $scope.newElement.order = $scope.elements.length;\n\n        ElementService.createElement($scope.newElement, $scope.formSelected.object).then(function (objects) {\n            return refreshElements();\n        }, function (error) {});\n\n        var msg = 'The ' + elementType + ' element has been added to the ' + $scope.formSelected.name + ' form successfully, and can be viewed at the bottom of the list of available elements.';\n        $scope.Success(msg);\n    };\n\n    /* --- following code is specific to creating a table that will allow user to input data ---  */\n    $scope.createTabularInputElement = function (rows, cols, xHead, yHead) {\n\n        //set the type of element and the order in which the element displays\n        $scope.newElement.type = \"TabularInput\";\n        $scope.newElement.order = $scope.elements.length;\n\n        /*following is a temp array that is used to build the structure of the table. The\r\n        //table structure is an an array of objects and is explained below\r\n        //  [\r\n        //    {\r\n        //        row: is an integer that represents index of the row\r\n        //        content: is an array of objects that holds the content of the table\r\n        //    },\r\n        //    {\r\n        //      ...\r\n        //    },\r\n        //    ....\r\n        //  ]\r\n        //The content object defined below:\r\n        //  [\r\n        //      { value: a string that is to be the label of the row or col, if not a label this is blank for user input\r\n        //        isHeader:  a boolean that is true if the value represents a header false if left for user input\r\n        //      },\r\n        //    {\r\n        //      ...\r\n        //    },\r\n        //    ....\r\n        //  ]\r\n        //\r\n        */\n        var structure = new Array();\n        var header = false;\n        //build table based on the number of rows and cols the user has indicated in the prompt in the survey editor\n        //start by traversing the rows\n        for (var i = 0; i < rows; i++) {\n            //build the content array for table structure\n            var content = new Array();\n            //traverse the columns within that row\n            for (var j = 0; j < cols; j++) {\n                //Check if the current position is a header or not, indicated by the user via survey editor\n                if (xHead && i == 0 || yHead && j == 0) {\n                    header = true;\n                }\n                content[j] = {\n                    value: \"empty\",\n                    isHeader: header\n                };\n                header = false;\n            }\n            //push this row to the structure\n            structure.push({\n                row: i,\n                content: content\n            });\n        }\n        //set the content attribute of the element to the newly build table structure\n        $scope.newElement.content = structure;\n\n        //use the element service to add this new element to the dataBase\n        ElementService.createElement($scope.newElement, $scope.formSelected.object).then(function (objects) {\n            return refreshElements();\n        }, function (error) {});\n\n        var msg = 'The ${$scope.newElement.type} element has been added to the ${$scope.formSelected.name} form successfully, and can be viewed at the bottom of the list of available elements.';\n        $scope.Success(msg);\n    };\n\n    //update objects that were edited to reflect in the database\n    $scope.renameIntervention = function (interven) {\n        interven.save().then(function (success) {\n            $scope.Success(\"The intervention has been renamed successfully\");\n        }, function (error) {\n            return $scope.Error(\"There was an error contacting the server. Please try again.\");\n        });\n    };\n    $scope.renameForm = function (form) {\n        form.save().then(function (success) {\n            $scope.Success(\"The form has been renamed successfully\");\n        }, function (error) {\n            return $scope.Error(\"There was an error contacting the server. Please try again.\");\n        });\n    };\n\n    $scope.updateElement = function () {\n\n        if ($scope.editorMode.moreOptions) {\n            $scope.elementSelected.isRecorded = 'true' == $scope.elementSelected.isRecorded;\n            $scope.elementSelected.displayBackBtn = 'true' == $scope.elementSelected.displayBackBtn;\n            $scope.elementSelected.displayProgress = 'true' == $scope.elementSelected.displayProgress;\n        }\n\n        var arr = [];\n\n        $scope.workingElement.phrase.forEach(function (p, index) {\n            arr.push(p.text);\n        });\n\n        $scope.elementSelected.phrase = arr;\n\n        arr = [];\n\n        if (!($scope.elementSelected.type === \"TabularInput\")) {\n            $scope.workingElement.content.forEach(function (c, index) {\n                arr.push(c.text);\n            });\n\n            $scope.elementSelected.content = arr;\n        }\n\n        console.log(\"Saving element: \");\n        console.log($scope.elementSelected);\n\n        if ($scope.elementSelected != $scope.elementPrevOrder) {\n            $scope.elements = reorderElements($scope.elements, $scope.elementPrevOrder, $scope.elementSelected.order);\n        }\n\n        $scope.elementSelected.save().then(function (success) {\n            $scope.Success(\"The element has been saved successfully\");\n            refreshElements();\n        }, function (error) {\n            return $scope.Error(\"There was an error contacting the server. Please try again.\");\n        });\n    };\n\n    //Code for the element editor in the survey editor\n\n    //the following allows multiple inputs for phrase and content sections of element editor\n    //the function addInput() appends a new input element as the child of the div provided\n    //via function arguments\n    $scope.addInput = function (attr) {\n        var defInput = \"\";\n\n        if (attr === \"content\") {\n            $scope.elementSelected.content.push(defInput);\n            $scope.workingElement.content.push({\n                text: \"\"\n            });\n        }\n        if (attr === \"phrase\") {\n            $scope.elementSelected.phrase.push(defInput);\n            $scope.workingElement.phrase.push({\n                text: \"\"\n            });\n        }\n    };\n\n    $scope.deleteInput = function (attr, index) {\n\n        /*if (attr === \"content\") {\r\n         $scope.elementSelected.content.splice(index, 1);\r\n         for(let i = 0; i < $scope.elementSelected.content.length; i++){\r\n         $scope.elementSelected.content[i].order = i;\r\n         }\r\n         }*/\n\n        if (index > -1) {\n            if (attr === \"content\") {\n                $scope.elementSelected.content.splice(index, 1);\n                $scope.workingElement.content.splice(index, 1);\n            }\n            if (attr === \"phrase\") {\n                $scope.elementSelected.phrase.splice(index, 1);\n                $scope.workingElement.phrase.splice(index, 1);\n            }\n        }\n\n        $scope.updateElement();\n    };\n\n    $scope.deleteElement = function (element) {\n        $scope.elementSelected = element;\n\n        ElementService.deleteElement($scope.elementSelected, $scope.formSelected.object).then(function (success) {\n            $scope.Success(\"The element has been deleted successfully\");\n            refreshElements();\n        }, function (error) {\n            return $scope.Error(\"There was an error contacting the server. Please try again.\");\n        });\n    };\n\n    //used to navigate back to state determined by the state attribute\n    $scope.goBack = function (state) {\n        refreshElements();\n        refreshForms();\n        refreshElements();\n        $state.go(state);\n    };\n\n    //the following function is used to determine if the field is of the current element will be displayed via\n    //the element preview, this is determined by the type of element and the current field\n    $scope.displayElementField = function (elementType, field) {\n        if (field === \"phrase\") {\n            if (elementType === 'QuestionAnswer' || elementType === 'MenuWithCompletion' || elementType === 'RangeSliderElement' || elementType === 'MenuElement' || elementType === 'feedback' || elementType === 'feedbackList' || elementType === 'QuestionAnswer-Checkbox' || elementType === 'QuestionAnswer' || elementType === 'textArea' || elementType === 'LoginRegisterElement') {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (field === \"content\") {\n            if (elementType === 'QuestionAnswer' || elementType === 'MenuWithCompletion' || elementType === 'QuestionAnswer-Checkbox' || elementType === 'MenuElement' || elementType === 'RangeSliderElement') {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (field === \"html\") {\n            if (elementType === 'Content') {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    };\n\n    $scope.elReorder = false;\n\n    //the following function updates the order of the elements when there has been a change in the order. it sets\n    //elReorder to true indicating that the order of the elements have changed and needs to be saved\n    $scope.stop = function (e, ui) {\n        for (var i = 0; i < $scope.elements.length; i++) {\n            $scope.elements[i].order = i;\n        }\n        if (!$scope.elReorder) {\n            $scope.elReorder = true;\n        }\n    };\n\n    $scope.updateElementsOrder = function () {\n\n        $scope.elements.forEach(function (element, index) {\n            element.save().then(function (success) {\n                if (index === $scope.elements.length - 1) {\n                    $scope.Success(\"The elements have been successfully reordered.\");\n                    $scope.elReorder = false;\n                }\n            }, function (error) {\n                $scope.Error(\"There was an error contacting the server. Please try again.\");\n                $scope.elReorder = false;\n            });\n        });\n    };\n\n    refreshInterventions();\n}","'use strict';\n\nangular.module('app').controller('scoreController', scoreController);\n\nscoreController.$inject = ['$scope', 'ScoreService', 'AuthService', 'InterventionService', 'FormService', '$state', 'ElementService'];\n\nfunction scoreController($scope, ScoreService, AuthService, InterventionService, FormService, $state, ElementService) {\n\n    $scope.currentUser = AuthService.currentUser();\n\n    $scope.interventionSelected = null;\n    $scope.scoredFormSelected = null;\n\n    $scope.calculateScoreByFormObj = function (form) {\n\n        if (!$scope.currentUser) return;\n\n        $scope.scoredFormSelected = form;\n\n        var formID = $scope.scoredFormSelected.object.id;\n\n        ScoreService.calculateFormScore(formID).then(function (score) {\n            console.log(score);\n            $scope.score = score;\n        }, function (error) {\n            console.log(error.message);\n        });\n    };\n\n    $scope.scoredInterventions = [];\n    $scope.scoredForms = [];\n    $scope.elementsOfScoredForm = [];\n\n    // -- helper functions that refresh arrays above\n    function getScoredForms() {\n        if (!$scope.interventionSelected) return;\n\n        FormService.getFormsByIntervention($scope.interventionSelected.object).then(function (objects) {\n            return $scope.scoredForms = objects;\n        }, function (error) {});\n    }\n    function getScoredInterventions() {\n        InterventionService.getAllInterventions().then(function (objects) {\n            return $scope.scoredInterventions = objects;\n        }, function (error) {});\n    }\n    function getScoredElements() {\n        if (!$scope.scoredFormSelected) return;\n\n        // code goes here...\n        ElementService.getElementsByForm($scope.scoredFormSelected.object).then(function (objects) {\n            $scope.elementsOfScoredForm = objects;\n        }, function (error) {});\n    }\n\n    $scope.selectScoredIntervention = function (intervention) {\n        $scope.interventionSelected = intervention;\n        getScoredForms();\n        $state.go('feedback.form');\n    };\n\n    function init() {\n        getScoredInterventions();\n    }\n\n    init();\n}","\"use strict\";\n\nvar character;\nvar mainframe;\n\nvar AUDIT = [{\n    \"id\": \"480OIkUfRe\",\n    \"survey\": \"audit\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"NTEyjG7JaV\",\n    \"survey\": \"audit\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"3b8HApHIsW\",\n    \"survey\": \"audit\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"9PV3mDHsYj\",\n    \"survey\": \"audit\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"o3Vvd9PuV4\",\n    \"survey\": \"audit\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"7hrQrRkroo\",\n    \"survey\": \"audit\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"fcrMyhewqP\",\n    \"survey\": \"audit\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"XnBeaqJpLP\",\n    \"survey\": \"audit\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"EoNDjbREoC\",\n    \"survey\": \"audit\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"TRbkGxXZij\",\n    \"survey\": \"audit\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\nvar GTNSGT = [{\n    \"id\": \"PBuf3sVCCj\",\n    \"survey\": \"GTNSGT\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"UY59yLDhwG\",\n    \"survey\": \"GTNSGT\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\nvar HOWMUCHHOWOFTEN = [{\n    \"id\": \"pleBxUHgyt\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"mR3X2pZszK\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"rvYjxAukwA\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"YHmKYTz5Y5\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"0OcF0WWPsl\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"uwT5nhssr2\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"qPjT3Q1sXr\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"lfaPYb8211\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"VOKthC7rpT\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"b3OOreWXJ5\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"Ud8heugqCQ\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"r6ZkJCdBEz\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"wPFh7S9lhn\",\n    \"survey\": \"myDrinking\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"f8B0ihkAKr\",\n    \"survey\": \"myDrinking\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"VLutfNbPnB\",\n    \"survey\": \"myDrinking\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"nrFKqQekln\",\n    \"survey\": \"otherDrugs\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"BmqCFA3LpF\",\n    \"survey\": \"otherDrugs\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"XTxMZ7TJ4h\",\n    \"survey\": \"otherDrugs\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\nvar FAMILYHISTORY = [{\n    \"id\": \"pleBxUHgyt\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"mR3X2pZszK\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"rvYjxAukwA\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"YHmKYTz5Y5\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"0OcF0WWPsl\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"uwT5nhssr2\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"qPjT3Q1sXr\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"lfaPYb8211\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"VOKthC7rpT\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"b3OOreWXJ5\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"Ud8heugqCQ\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"r6ZkJCdBEz\",\n    \"survey\": \"familyHistory\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\n/*const MYDRINKING = [\r\n    {\r\n        \"id\": \"wPFh7S9lhn\",\r\n        \"survey\": \"myDrinking\",\r\n        \"isFirst\": true,\r\n        \"isLast\": false\r\n    },\r\n    {\r\n        \"id\": \"f8B0ihkAKr\",\r\n        \"survey\": \"myDrinking\",\r\n        \"isFirst\": false,\r\n        \"isLast\": false\r\n    },\r\n    {\r\n        \"id\": \"VLutfNbPnB\",\r\n        \"survey\": \"myDrinking\",\r\n        \"isFirst\": false,\r\n        \"isLast\": true\r\n    }\r\n];*/\nvar MYDRINKING = [{\n    \"id\": \"2ryq9FqhYi\",\n    \"survey\": \"myDrinking\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"F94yWz8Ail\",\n    \"survey\": \"myDrinking\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"VLutfNbPnB\",\n    \"survey\": \"myDrinking\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\nvar OTHERDRUGS = [{\n    \"id\": \"nrFKqQekln\",\n    \"survey\": \"otherDrugs\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"BmqCFA3LpF\",\n    \"survey\": \"otherDrugs\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"XTxMZ7TJ4h\",\n    \"survey\": \"otherDrugs\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\nvar A_R_P = [{\n    \"id\": \"is6vw6wRnG\",\n    \"survey\": \"ARP\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"tBryo4ALxF\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"GuFCbEhXOV\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"dSQV6eGkSu\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"PzQplrhIWi\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"CSKw4wbij4\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"GggkBmfJ7o\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"XLn7eaEH96\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"AJycKpEegc\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"1wjSdhf2eM\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"9WHQFfzF4J\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"Rf7rQvJfOt\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"udBLvwkRax\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"KQlF0k42wm\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"t5Vll6TJyu\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"jLu5TZtwYU\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"8Qz0T7pwMZ\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"UqgD7PlgW3\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"83FfJ9Zq3M\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"oMop003d7A\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"YHvVH5MqP1\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"jUnJEgy9dm\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"igQMYRzHJa\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"XD5NKWQKhc\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"S9UOlj8XAS\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"QqcaH4ZiJM\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"OmbUxx1Jha\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"Et0gmveEIz\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"rqnLEOB52H\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"2oKhO7mWbO\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"v9frAvBSJq\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"a4QamiGCA3\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"bGlMCixyKA\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"wMWqoTE1gA\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"k2ip8q0K2L\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"xdA8C0leeD\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"Wv4wzrJp0T\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"WPjoWWTdGW\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"7uAQj46Kc9\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"Rvg0whSSHr\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"ySxADohMIJ\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"gCf1E8xcBt\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"VlJABvnKDr\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"6HjTndVKpf\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"Gzv94vSMlK\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"WDYFKBp4Ra\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"o0gfHVKiZo\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"8kksZw0b1i\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"tPbHqZDc4F\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"xX6fmHzV8a\",\n    \"survey\": \"ARP\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\nvar DEPRESSION = [{\n    \"id\": \"wEl6CRXHap\",\n    \"survey\": \"depression\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"7C7lYsNVrG\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"yQhfDjY1Hv\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"ESzTFSxNqP\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"VNpgWGgR4M\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"skEnfaheGA\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"u0M8THtHeu\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"DO85GeUxhE\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"3z52fzxiYn\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"ZEBeQFKqD6\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"HsJFBrsREs\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"AvCFAxuxUF\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"vRMntIjuE2\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"bYjn7kpxgy\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"NB7AzeSBRH\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"rSlFWovcfk\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"cKiSS5MKkf\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"Muxcv4Ua10\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"6cBmIYiTKC\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"tWHgD3sg4A\",\n    \"survey\": \"depression\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\nvar MAST = [{\n    \"id\": \"P8ZORJCP2t\",\n    \"survey\": \"MAST\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"anKnOz2zw9\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"NebDyUe5qg\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"EbJlYYgmON\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"wnj3m1I4fr\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"da57qkCJJx\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"lTBnnPVswQ\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"XPNbG5yWKK\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"FSxb56512e\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"tZqTfnFqFk\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"G4RdTw8AlV\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"lkq0iDzd7Z\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"Ww5xSMi2CC\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"wsCQRHjYkg\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"LW2xfnSTxl\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"3GuR72PJfe\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"P3h1vN21qh\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"2M78gEZsmt\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"sFMai1HlQC\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"DffMpv7KJi\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"yQyMx17bXy\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"GivFm6vAUY\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"AAtW0GCLKn\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"e1yYpKX6jG\",\n    \"survey\": \"MAST\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\nvar DEPENDENCE = [{\n    \"id\": \"IJcTOH7fGb\",\n    \"survey\": \"dependence\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"JrWYjpNoTq\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"entTOZcC7x\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"jSbe0y9yo8\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"UwhNedrfDF\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"brRbraVeTe\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"tpEo1xFKXk\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"pKnT4rw0q0\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"f5poCM6Gwq\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"WfgNctUyc9\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"uLqHs3Cdon\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"VtxPtGv9Vv\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"RnNNlOBTQd\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"ZBV1DmYjhP\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"EvAGJWHkWQ\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"DRMwnfMBq2\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"Z6SYhFUMv7\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"10oWTuZIat\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"APluU5Dc6l\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"IISlXLUAzC\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": false\n}, {\n    \"id\": \"wNj7vCeMXz\",\n    \"survey\": \"dependence\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\nvar TOTAL_NUM_QUESTIONS = {\n    audit: 10,\n    GTNSGT: 2,\n    howMuchHowOften: 0,\n    familyHistory: 10,\n    myDrinking: 3,\n    otherDrugs: 3,\n    ARP: 50,\n    depression: 20,\n    MAST: 24,\n    dependence: 21\n};\nvar NEW_USER_PROGRESS = {\n    user: {},\n    GTNSGT: [{\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }],\n    audit: [{\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }],\n    howMuchHowOften: [{\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }],\n    familyHistory: [{\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }],\n    myDrinking: [{\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }],\n    otherDrugs: [{\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }],\n    ARP: [{\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }],\n    depression: [{\n        \"formId\": \"\",\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }],\n    MAST: [{\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }],\n    dependence: [{\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }],\n    likeDontLike: [{\n        \"timestamp\": \"\",\n        \"responsesPtr\": [],\n        \"percentageComplete\": \"0\",\n        \"currentElement\": \"\"\n    }]\n};\nvar LIKE_DONT_LIKE = [{\n    \"id\": \"jRiKWdVuIw\",\n    \"survey\": \"GTNSGT\",\n    \"isFirst\": true,\n    \"isLast\": false\n}, {\n    \"id\": \"OXRtsBdAK3\",\n    \"survey\": \"GTNSGT\",\n    \"isFirst\": false,\n    \"isLast\": true\n}];\nvar MENU_ELEMENTS = [\"4lHNsBzB0x\", \"RLJpGOTkue\"];\nvar MENU_ELEMENTS_CHECK = [\"aO6qCMcRvH\", \"BxbtJXn8f6\"];\n\nvar ABBREV_ELEMENT_OBJECTS = {\n    audit: AUDIT,\n    GTNSGT: LIKE_DONT_LIKE,\n    howMuchHowOften: HOWMUCHHOWOFTEN,\n    familyHistory: FAMILYHISTORY,\n    myDrinking: MYDRINKING,\n    otherDrugs: OTHERDRUGS,\n    ARP: A_R_P,\n    depression: DEPRESSION,\n    MAST: MAST,\n    dependence: DEPENDENCE\n};\n\nangular.module('app').controller('webglController', webglController);\n\nwebglController.$inject = ['$scope', '$window', '$state', '$rootScope', '$timeout', '$http', '$ocLazyLoad', '$uibModal', 'AuthService', 'widgetService', 'characterService', 'localStorageService', 'ProgressService', 'UserService'];\n\nfunction webglController($scope, $window, $state, $rootScope, $timeout, $http, $ocLazyLoad, $uibModal, AuthService, widgetService, characterService, localStorageService, ProgressService, UserService) {\n    $scope.progressSrv = ProgressService;\n    $scope.usrSrvc = UserService;\n    $scope.currentElement_abbreviated = {};\n    $scope.widget = widgetService;\n    $scope.currentUser = Parse.User.current();\n    $scope.isLoggedIn = AuthService.isLoggedIn;\n    $scope.showLogin = false;\n    $scope.tmpRes = [];\n    $scope.auditIds = [\"480OIkUfRe\", \"NTEyjG7JaV\", \"3b8HApHIsW\", \"9PV3mDHsYj\", \"o3Vvd9PuV4\", \"7hrQrRkroo\", \"fcrMyhewqP\", \"XnBeaqJpLP\", \"EoNDjbREoC\", \"TRbkGxXZij\"];\n    $scope.lastElementInFormIds = [{\n        \"name\": \"audit\",\n        \"elementID\": \"TRbkGxXZij\"\n    }, {\n        \"name\": \"GTNSGT\",\n        \"elementID\": \"UY59yLDhwG\"\n    }, {\n        \"name\": \"howMuchHowOften\",\n        \"elementID\": \"XTxMZ7TJ4h\"\n    }, {\n        \"name\": \"ARP\",\n        \"elementID\": \"xX6fmHzV8a\"\n    }, {\n        \"name\": \"depression\",\n        \"elementID\": \"tWHgD3sg4A\"\n    }, {\n        \"name\": \"MAST\",\n        \"elementID\": \"e1yYpKX6jG\"\n    }, {\n        \"name\": \"dependence\",\n        \"elementID\": \"wNj7vCeMXz\"\n    }];\n    $scope.$root.usrCmd = {\n        \"goBack\": false\n    };\n    $scope.newUserProgress = NEW_USER_PROGRESS;\n    $scope.currentUserProgress = {};\n    $scope.currentQuestionNumber = 0;\n    $scope.currentPercentComplete = 0;\n    $scope.mode = {\n        \"loggingIn\": false,\n        \"register\": false,\n        \"loggingOut\": false,\n        \"isLoggedIn\": false,\n        \"forgotPW\": false,\n        // \"forgotUN\": false,\n        \"loginActivated\": false,\n        \"optionsActivated\": false,\n        \"updatePW\": false,\n        \"isTempUser\": false\n    };\n    $scope.tempUser = {};\n    $scope.tempUserProgress = {};\n    $scope.rangeLabel = 'Not Ready';\n    $scope.readinessLabels = [\"I have no interest at all in changing my drinking and I'm not interested in considering any changes in the \" + \"future even if my situation changes\", \"I'm not interested in changing my drinking right now but am willing to consider experimenting with different \" + \"patterns in the future.\", \"I'm considering how I might want to change my drinking.\", \"I'm consdiering cutting back on my drinking or not drinking at all.\"];\n    $scope.credentials = {\n        firstname: \"\",\n        //lastname: \"\",\n        username: \"\",\n        password: \"\",\n        email: \"\",\n        education: \"\",\n        gender: \"\",\n        dateOfBirth: \"\",\n        age: \"\",\n        weight: \"\",\n        height: {\n            total: 0,\n            feet: \"\",\n            inches: \"\"\n        },\n        ethnicity: \"\",\n        race: [],\n        maritalstatus: \"\",\n        confirmpassword: \"\",\n        confirmemail: \"\",\n        fp_email: \"\",\n        fp_DOB: \"\"\n    };\n\n    //following handles the Success and Error messages\n    $scope.Success = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-success\",\n            alertType: \"Success!\",\n            alertText: message\n        };\n    };\n    $scope.Error = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-danger\",\n            alertType: \"Error!\",\n            alertText: message\n        };\n    };\n    var forcePreviousQuestion = true;\n    var Response = Parse.Object.extend('Response');\n    var Element = Parse.Object.extend('Element');\n    var User = Parse.Object.extend('User');\n\n    function loadUnity(char) {\n        character = char;\n        return $ocLazyLoad.load({\n            serie: true,\n            files: [\n            // load initial setup\n            'unity/facs/engine3d.js', 'unity/facs/facslib.js', 'unity/facs/engineWebGL_u3d.js', char.path + 'UnityLoader.js', 'unity/UnitySettings.js']\n        });\n    }\n\n    $scope.unityLoaded = function () {\n        $ocLazyLoad.load({\n            serie: true,\n            files: ['/mainframe/js/common/three.min.js', '/mainframe/js/common/prototype.js', '/mainframe/js/mainframe.settings.js', '/mainframe/js/mainframe.classes.js']\n        }).then(function () {\n            mainframe = new Mainframe($state.current.data.mainframeConfig); // initialize mainframe\n            mainframe.run(); // starts Mihai's mainframe\n        });\n    };\n\n    //function used to determine if the QA should be treated as a Menu\n    $scope.isMenu = function (elemID) {\n        //console.log(\"in is menu function with for element: \" + elemID);\n        if (MENU_ELEMENTS.includes(elemID)) {\n            //console.log(\"isMenu returning true\");\n            return true;\n        } else {\n            //console.log(\"isMenu returning false\");\n            return false;\n        }\n    };\n    $scope.isMenuCheck = function (elemID) {\n        //console.log(\"in is menu function with for element: \" + elemID);\n        if (MENU_ELEMENTS_CHECK.includes(elemID)) {\n            //console.log(\"isMenuCheck returning true\");\n            return true;\n        } else {\n            //console.log(\"isMenuCheck returning false\");\n            return false;\n        }\n    };\n    $scope.isQA = function (elemID, type) {\n        //console.log(\"in is menu function with for element: \" + elemID);\n        if (!MENU_ELEMENTS_CHECK.includes(elemID) && !MENU_ELEMENTS.includes(elemID) && type == \"QuestionAnswer\") {\n            //console.log(\"isQA returning true\");\n            return true;\n        } else {\n            //console.log(\"isQA returning false\");\n            return false;\n        }\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // init function. called when the counseling controller is loaded\n    // -----------------------------------------------------------------------------------------------------------------\n    var init = function init() {\n\n        $scope.currentUser = AuthService.currentUser();\n        $scope.currentQuestionNumber = 0;\n\n        $scope.widget.fetchAll(); // now we can load all injects\n        loadUnity($state.current.data.character || characterService.getUsersCounselor());\n        $scope.$root.selectedCounselorVoiceIndex = characterService.getUsersCounselor().voiceIndex;\n        $scope.$root.selectedCounselor = characterService.getUsersCounselor();\n\n        if ($scope.currentUser) {\n            $scope.userGivenName = $scope.currentUser.object.attributes.firstName;\n            $scope.mode.isTempUser = $scope.currentUser.object.attributes.tempUser;\n            /*console.log(\"temp user\");\r\n             console.log($scope.currentUser);*/\n            getUserProgress($scope.currentUser.object, false, false);\n        }\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    //  delegates clicking on an HTML inject to it's particular function\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.htmlClick = function (html) {\n        html.click();\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    //  Determines ng-class of div wrapping counseling view for sliding menu. andy\n    // -----------------------------------------------------------------------------------------------------------------\n    $scope.checked = false;\n    $scope.isMenuOpen = true;\n\n    $scope.myCounselor = function () {\n        $scope.checked = !$scope.checked;\n        if ($scope.isMenuOpen) {\n            dynamic();\n            $scope.isMenuOpen = false;\n        }\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // handles the modification of the progress bar in the view (for the audio progress)\n    // -----------------------------------------------------------------------------------------------------------------\n\n    //For the progress circle.\n    //Everytime a new questionnaire is loaded, change current Questionnaire value\n    $scope.progressValue = 0;\n    $scope.currentQuestionnaire = \"Audit\";\n\n    $scope.auditAnswer = -1;\n    $scope.myProgress = function () {\n        var progress = $scope.widget.myProgress;\n        var userProgress = {};\n        var indicies = [];\n\n        var index = 0;\n        progress.hidden = !progress.hidden;\n\n        if (!progress.hidden) {\n            //if current UserProgress is not null use it for percentages, else use newUserProgress to fill progress object\n            /* console.log($scope.currentUserProgress.attributes);*/\n\n            if ($scope.currentUserProgress == null) {\n                // console.log(\"**************newUserProgress************\");\n                // console.log( $scope.currentUserProgress);\n                userProgress = $scope.newUserProgress;\n            } else {\n                // console.log(\"**********currentUserProgress*********\");\n                userProgress = $scope.currentUserProgress.attributes;\n            }\n\n            //get index of each of last complete survey\n            indicies.push(userProgress.audit.length - 1);\n            indicies.push(userProgress.howMuchHowOften.length - 1);\n            indicies.push(userProgress.GTNSGT.length - 1);\n            indicies.push(userProgress.ARP.length - 1);\n            indicies.push(userProgress.depression.length - 1);\n            indicies.push(userProgress.MAST.length - 1);\n            indicies.push(userProgress.dependence.length - 1);\n\n            index = Math.min.apply(Math, indicies);\n            /*console.log(\"min length is: \" + index);\r\n            console.log(indicies);*/\n\n            if (index > 0) {\n                index -= 1;\n            }\n\n            $scope.progressBarValue = [{\n                \"progressBar\": userProgress.audit[index].percentageComplete + \"%\",\n                \"questionnaire\": \"Audit\"\n            }, {\n                \"progressBar\": userProgress.howMuchHowOften[index].percentageComplete + \"%\",\n                \"questionnaire\": \"How Much and How Often\"\n            }, {\n                \"progressBar\": userProgress.GTNSGT[index].percentageComplete + \"%\",\n                \"questionnaire\": \"The Good Things and Not So Good Things\"\n            }, {\n                \"progressBar\": userProgress.ARP[index].percentageComplete + \"%\",\n                \"questionnaire\": \"Alcohol Related Problems\"\n            }, {\n                \"progressBar\": userProgress.depression[index].percentageComplete + \"%\",\n                \"questionnaire\": \"Depression Survey\"\n            }, {\n                \"progressBar\": userProgress.MAST[index].percentageComplete + \"%\",\n                \"questionnaire\": \"MAST\"\n            }, {\n                \"progressBar\": userProgress.dependence[index].percentageComplete + \"%\",\n                \"questionnaire\": \"Dependence\"\n            }];\n        }\n\n        /* if (progress.hidden == false) {\r\n         console.log(\"For AuditScore : \");\r\n         console.log(\"Questions: \" + 10);\r\n         console.log(\"Answered: \" + $scope.auditAnswer);\r\n           if ($scope.auditAnswer >= 0) {\r\n         auditProgress = ($scope.auditAnswer / 10) * 100;\r\n         auditProgress = auditProgress + \"%\";\r\n         $scope.progressBarValue[0].progressBar = auditProgress;\r\n           }\r\n           $http.get('/api/dcu/getDrincScore/577fd4747337e7856c9afe65')\r\n         .then(\r\n         function (res) {\r\n         console.log(\"For DrincScore : \");\r\n         console.log(res.numOfQuestions);\r\n         console.log(res.answered);\r\n         drincProgress = (res.answered / res.numOfQuestions) * 100;\r\n         drincProgress = drincProgress + \"%\";\r\n         $scope.progressBarValue[2].progressBar = drincProgress;\r\n         console.log(drincProgress);\r\n         return res;\r\n         },\r\n         function (err) {\r\n         return err;\r\n         }\r\n         );\r\n           $http.get('/api/dcu/getSADQScore/577feebd7337e7856c9afead/577fef827337e7856c9afeb3/577ff1aa7337e7856c9afec4')\r\n         .then(\r\n         function (res) {\r\n         console.log(\"For SADQScore : \");\r\n         console.log(res.numOfQuestions);\r\n         console.log(res.answered);\r\n         SADQCProgress = (res.answered / res.numOfQuestions) * 100;\r\n         SADQCProgress = SADQCProgress + \"%\";\r\n         $scope.progressBarValue[3].progressBar = SADQCProgress;\r\n         console.log(SADQCProgress);\r\n         return res;\r\n         },\r\n         function (err) {\r\n         return err;\r\n         }\r\n         );\r\n           $http.get('/api/dcu/getSOCRATESScore/577ff2227337e7856c9afec9')\r\n         .then(\r\n         function (res) {\r\n         console.log(\"For Socrates : \");\r\n         console.log(res.numOfQuestions);\r\n         console.log(res.answered);\r\n         socratesProgress = (res.answered / res.numOfQuestions) * 100;\r\n           if (socratesProgress != \"0\") socratesProgress = parseInt(socratesProgress) + \"%\";\r\n         else socratesProgress = socratesProgress + \"%\";\r\n           $scope.progressBarValue[4].progressBar = socratesProgress;\r\n         console.log(socratesProgress);\r\n         return res;\r\n         },\r\n         function (err) {\r\n         return err;\r\n         }\r\n         );\r\n         }*/\n    };\n\n    $scope.fullscreen = true;\n    // changes eEva to minimized or maximized depending on the bool provided\n    $scope.toggleFullscreen = function (bool) {\n        $scope.fullscreen = bool;\n        $scope.widget['virtualys'].classes['ue-full'] = bool;\n        $scope.widget['virtualys'].classes['ue-half'] = !bool;\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // used by the mainframe to know when the user has clicked on an answer\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.$root.directInputTimestamp = 0;\n\n    $scope.next = function () {\n        $scope.$root.directInputTimestamp = Date.now();\n\n        var nod = Math.floor(Math.random() * (3 - 1)) + 1;\n        //console.log(nod);\n\n        switch (nod) {\n            case 1:\n                //SendMessage('FACcontroler', 'SetAnimation', 'nod1');\n\n                break;\n            case 2:\n                //SendMessage('FACcontroler', 'SetAnimation', 'nod2');\n\n                break;\n            case 3:\n                //SendMessage('FACcontroler', 'SetAnimation', 'nod3');\n\n                break;\n        }\n    };\n\n    $scope.goBackButton = function () {\n        $scope.$root.usrCmd.goBack = true;\n        $scope.$root.userResponse = -99;\n        $scope.next();\n    };\n\n    //helper function for getting the abbreviated element object. This is not the same object as in the newSurvey controller,\n    //this object only contains the element id (string), the name of the survey in which in belongs (string), and lastly a (bool)\n    //to indicate if that element is the last element of the survey\n    function getAbbrevElementObj(elemId) {\n        //console.log(elemId);\n\n        //check if element belongs to audit ABBREV_ELEMENT_OBJECTS.audit\n        for (var i = 0; i < ABBREV_ELEMENT_OBJECTS.audit.length; i++) {\n            //console.log(\"audit \" + i);\n            if (elemId == ABBREV_ELEMENT_OBJECTS.audit[i].id) {\n                return ABBREV_ELEMENT_OBJECTS.audit[i];\n            }\n        }\n\n        //check if element belongs to GTNSGT\n        for (var i = 0; i < ABBREV_ELEMENT_OBJECTS.GTNSGT.length; i++) {\n            if (elemId == ABBREV_ELEMENT_OBJECTS.GTNSGT[i].id) {\n                //console.log(\"gtnsgt \" + i);\n                return ABBREV_ELEMENT_OBJECTS.GTNSGT[i];\n            }\n        }\n\n        /*//check if element belongs to howMuchHowOften\r\n        for (var i = 0; i < ABBREV_ELEMENT_OBJECTS.howMuchHowOften.length; i++) {\r\n            if (elemId == ABBREV_ELEMENT_OBJECTS.howMuchHowOften[i].id) {\r\n                console.log(\"howMuchHowOften \" + i);\r\n                return ABBREV_ELEMENT_OBJECTS.howMuchHowOften[i];\r\n            }\r\n        }*/\n\n        //check if element belongs to familyHistory\n        for (var i = 0; i < ABBREV_ELEMENT_OBJECTS.familyHistory.length; i++) {\n            if (elemId == ABBREV_ELEMENT_OBJECTS.familyHistory[i].id) {\n                //console.log(\"familyHistory \" + i);\n                return ABBREV_ELEMENT_OBJECTS.familyHistory[i];\n            }\n        }\n\n        //check if element belongs to myDrinking\n        for (var i = 0; i < ABBREV_ELEMENT_OBJECTS.myDrinking.length; i++) {\n            if (elemId == ABBREV_ELEMENT_OBJECTS.myDrinking[i].id) {\n                //console.log(\"myDrinking \" + i);\n                return ABBREV_ELEMENT_OBJECTS.myDrinking[i];\n            }\n        }\n\n        //check if element belongs to otherDrugs\n        for (var i = 0; i < ABBREV_ELEMENT_OBJECTS.otherDrugs.length; i++) {\n            if (elemId == ABBREV_ELEMENT_OBJECTS.otherDrugs[i].id) {\n                //console.log(\"otherDrugs \" + i);\n                return ABBREV_ELEMENT_OBJECTS.otherDrugs[i];\n            }\n        }\n\n        //check if element belongs to ARP\n        for (var i = 0; i < ABBREV_ELEMENT_OBJECTS.ARP.length; i++) {\n            if (elemId == ABBREV_ELEMENT_OBJECTS.ARP[i].id) {\n                //console.log(\"ARP \" + i);\n                return ABBREV_ELEMENT_OBJECTS.ARP[i];\n            }\n        }\n\n        //check if element belongs to depression\n        for (var i = 0; i < ABBREV_ELEMENT_OBJECTS.depression.length; i++) {\n            if (elemId == ABBREV_ELEMENT_OBJECTS.depression[i].id) {\n                //console.log(\"ARP \" + i);\n                return ABBREV_ELEMENT_OBJECTS.depression[i];\n            }\n        }\n\n        //check if element belongs to MAST\n        for (var i = 0; i < ABBREV_ELEMENT_OBJECTS.MAST.length; i++) {\n            if (elemId == ABBREV_ELEMENT_OBJECTS.MAST[i].id) {\n                //console.log(\"MAST \" + i);\n                return ABBREV_ELEMENT_OBJECTS.MAST[i];\n            }\n        }\n\n        //check if element belongs to dependence\n        for (var i = 0; i < ABBREV_ELEMENT_OBJECTS.dependence.length; i++) {\n            if (elemId == ABBREV_ELEMENT_OBJECTS.dependence[i].id) {\n                //console.log(\"dependence \" + i);\n                return ABBREV_ELEMENT_OBJECTS.dependence[i];\n            }\n        }\n\n        return false;\n    };\n\n    //following helper function is used to update the howMuchHowOften survey since it is dependent on 3 sections to be complete\n\n    function updateHowMuchHowOften(progressIndx) {\n        //check if need to mark howMuchHowOften complete by checking if both myDrinking and otherDrugs is complete\n        //by seeing if that have timestamps within this same index\n        /* console.log(\"in updateHowMuchHowOften\");\r\n         console.log(progressIndx);\r\n         console.log($scope.currentUserProgress.attributes);*/\n        var lenFH = $scope.currentUserProgress.attributes.familyHistory.length;\n        var lenOD = $scope.currentUserProgress.attributes.otherDrugs.length;\n        var lenMY = $scope.currentUserProgress.attributes.myDrinking.length;\n\n        if (progressIndx < lenFH && progressIndx < lenOD && progressIndx < lenMY) {\n            if ($scope.currentUserProgress.attributes.howMuchHowOften[progressIndx].percentageComplete == \"66\") {\n                //mark the howMuchHowOften survey complete\n                //console.log(\"marking howMuchHowOften complete!!!\");\n                markHowMuchSurveyComplete();\n            } else {\n                if ($scope.currentUserProgress.attributes.howMuchHowOften[progressIndx].percentageComplete == \"33\") {\n                    //console.log(\"updating howMuchHowOften 66!!!\");\n                    $scope.currentUserProgress.attributes.howMuchHowOften[progressIndx].percentageComplete = \"66\";\n                } else {\n                    //console.log(\"updating howMuchHowOften 33!!!\");\n                    $scope.currentUserProgress.attributes.howMuchHowOften[progressIndx].percentageComplete = \"33\";\n                }\n            }\n        }\n\n        /*if(($scope.currentUserProgress.attributes.familyHistory[progressIndx].timeStamp) || ($scope.currentUserProgress.attributes.otherDrugs[progressIndx].timeStamp)){\r\n            //set howMuchHowOften to 66%\r\n            $scope.currentUserProgress.attributes.howMuchHowOften[progressIndx].percentageComplete = \"66\";\r\n        }else{\r\n            //set howMuchHowOften to 33%\r\n            $scope.currentUserProgress.attributes.howMuchHowOften[progressIndx].percentageComplete = \"33\";\r\n        }*/\n    }\n\n    function markHowMuchSurveyComplete() {\n        var defaultValue = {\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        };\n        var timeCompleted = Date.now();\n\n        //get the last entry index in the howMuchHowOften array\n        var index = $scope.currentUserProgress.attributes.howMuchHowOften.length - 1;\n\n        //update the howMuchHowOften by updating the percentageComplete and the timestamp and pushing last response\n        $scope.currentUserProgress.attributes.howMuchHowOften[index].percentageComplete = \"100\";\n        $scope.currentUserProgress.attributes.howMuchHowOften[index].timestamp = timeCompleted;\n\n        //add new howMuchHowOften entry\n        $scope.currentUserProgress.attributes.howMuchHowOften[index + 1] = defaultValue;\n\n        //save users progress\n        $scope.currentUserProgress.save().then(function (progress) {\n            return console.log(\"User's progress updated successfully.  The howMuchHowOften was marked complete on:  \" + timeCompleted);\n        }, function (error) {\n            return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n        });\n    }\n\n    //the following function is responsible for marking a survey complete whenever a user has finished the last question\n    //of that survey\n    function markSurveyComplete(surveyName, responseObject) {\n        var defaultValue = {\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        };\n        var timeCompleted = Date.now();\n\n        //if currentUserHasProgress, if not then need to update the audit in the newUserProgress object\n        if ($scope.currentUserProgress) {\n            if (surveyName == \"audit\") {\n\n                //get the last entry index in the audit array\n                var index = $scope.currentUserProgress.attributes.audit.length - 1;\n\n                //check if the audits current percent complete if is zero if so then the audit cannot be complete, it can be completed\n                if ($scope.currentUserProgress.attributes.audit[index].percentageComplete != \"0\") {\n                    //update the audit by updating the percentageComplete and the timestamp and pushing last response object\n                    $scope.currentUserProgress.attributes.audit[index].percentageComplete = \"100\";\n                    $scope.currentUserProgress.attributes.audit[index].timestamp = timeCompleted;\n                    //console.log($scope.currentUserProgress.attributes.audit );\n                    $scope.currentUserProgress.attributes.audit[index].responsesPtr.push(responseObject);\n\n                    //add new audit entry\n                    $scope.currentUserProgress.attributes.audit[index + 1] = defaultValue;\n\n                    //save users progress\n                    $scope.currentUserProgress.save().then(function (progress) {\n                        return console.log(\"User's progress updated successfully.  The Audit was marked complete on:  \" + timeCompleted);\n                    }, function (error) {\n                        return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                    });\n                }\n            } else if (surveyName == \"GTNSGT\") {\n                //get the last entry index in the GTNSGT array\n                var _index = $scope.currentUserProgress.attributes.GTNSGT.length - 1;\n\n                //check if the GTNSGT current percent complete if is zero if so then the GTNSGT cannot be complete, it can be completed\n                if ($scope.currentUserProgress.attributes.GTNSGT[_index].percentageComplete != \"0\") {\n                    //update the GTNSGT by updating the percentageComplete and the timestamp and pushing last response\n                    $scope.currentUserProgress.attributes.GTNSGT[_index].percentageComplete = \"100\";\n                    $scope.currentUserProgress.attributes.GTNSGT[_index].timestamp = timeCompleted;\n                    $scope.currentUserProgress.attributes.GTNSGT[_index].responsesPtr.push(responseObject);\n\n                    //add new GTNSGT entry\n                    $scope.currentUserProgress.attributes.GTNSGT[_index + 1] = defaultValue;\n\n                    //save users progress\n                    $scope.currentUserProgress.save().then(function (progress) {\n                        return console.log(\"User's progress updated successfully.  The GTNSGT was marked complete on:  \" + timeCompleted);\n                    }, function (error) {\n                        return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                    });\n                }\n            } else if (surveyName == \"howMuchHowOften\") {\n                //get the last entry index in the howMuchHowOften array\n                var _index2 = $scope.currentUserProgress.attributes.howMuchHowOften.length - 1;\n\n                //check if the howMuchHowOften current percent complete if is zero if so then the howMuchHowOften cannot be complete, it can be completed\n                if ($scope.currentUserProgress.attributes.howMuchHowOften[_index2].percentageComplete != \"0\") {\n                    //update the howMuchHowOften by updating the percentageComplete and the timestamp and pushing last response\n                    $scope.currentUserProgress.attributes.howMuchHowOften[_index2].percentageComplete = \"100\";\n                    $scope.currentUserProgress.attributes.howMuchHowOften[_index2].timestamp = timeCompleted;\n                    $scope.currentUserProgress.attributes.howMuchHowOften[_index2].responsesPtr.push(responseObject);\n\n                    //add new howMuchHowOften entry\n                    $scope.currentUserProgress.attributes.howMuchHowOften[_index2 + 1] = defaultValue;\n\n                    //save users progress\n                    $scope.currentUserProgress.save().then(function (progress) {\n                        return console.log(\"User's progress updated successfully.  The howMuchHowOften was marked complete on:  \" + timeCompleted);\n                    }, function (error) {\n                        return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                    });\n                }\n            } else if (surveyName == \"familyHistory\") {\n                //get the last entry index in the familyHistory array\n                var _index3 = $scope.currentUserProgress.attributes.familyHistory.length - 1;\n\n                //check if the familyHistory current percent complete if is zero if so then the familyHistory cannot be complete, it can be completed\n                if ($scope.currentUserProgress.attributes.familyHistory[_index3].percentageComplete != \"0\") {\n\n                    //update the familyHistory by updating the percentageComplete and the timestamp and pushing last response\n                    $scope.currentUserProgress.attributes.familyHistory[_index3].percentageComplete = \"100\";\n                    $scope.currentUserProgress.attributes.familyHistory[_index3].timestamp = timeCompleted;\n                    $scope.currentUserProgress.attributes.familyHistory[_index3].responsesPtr.push(responseObject);\n\n                    //add new familyHistory entry\n                    $scope.currentUserProgress.attributes.familyHistory[_index3 + 1] = defaultValue;\n\n                    //update howMuchHowOften\n                    //console.log(\"index sent to howMuchHowOften \" + index);\n                    updateHowMuchHowOften(_index3);\n\n                    //save users progress\n                    $scope.currentUserProgress.save().then(function (progress) {\n                        return console.log(\"User's progress updated successfully.  The familyHistory was marked complete on:  \" + timeCompleted);\n                    }, function (error) {\n                        return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                    });\n                }\n            } else if (surveyName == \"myDrinking\") {\n                //get the last entry index in the myDrinking array\n                var _index4 = $scope.currentUserProgress.attributes.myDrinking.length - 1;\n\n                //check if the myDrinking current percent complete if is zero if so then the myDrinking cannot be complete, it can be completed\n                if ($scope.currentUserProgress.attributes.myDrinking[_index4].percentageComplete != \"0\") {\n\n                    //update the myDrinking by updating the percentageComplete and the timestamp and pushing last response\n                    $scope.currentUserProgress.attributes.myDrinking[_index4].percentageComplete = \"100\";\n                    $scope.currentUserProgress.attributes.myDrinking[_index4].timestamp = timeCompleted;\n                    $scope.currentUserProgress.attributes.myDrinking[_index4].responsesPtr.push(responseObject);\n\n                    //add new myDrinking entry\n                    $scope.currentUserProgress.attributes.myDrinking[_index4 + 1] = defaultValue;;\n\n                    //update howMuchHowOften\n                    updateHowMuchHowOften(_index4);\n\n                    //save users progress\n                    $scope.currentUserProgress.save().then(function (progress) {\n                        return console.log(\"User's progress updated successfully.  The myDrinking was marked complete on:  \" + timeCompleted);\n                    }, function (error) {\n                        return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                    });\n                }\n            } else if (surveyName == \"otherDrugs\") {\n                //get the last entry index in the otherDrugs array\n                var _index5 = $scope.currentUserProgress.attributes.otherDrugs.length - 1;\n\n                //check if the otherDrugs current percent complete if is zero if so then the otherDrugs cannot be complete, it can be completed\n                if ($scope.currentUserProgress.attributes.otherDrugs[_index5].percentageComplete != \"0\") {\n\n                    //update the otherDrugs by updating the percentageComplete and the timestamp and pushing last response\n                    $scope.currentUserProgress.attributes.otherDrugs[_index5].percentageComplete = \"100\";\n                    $scope.currentUserProgress.attributes.otherDrugs[_index5].timestamp = timeCompleted;\n                    $scope.currentUserProgress.attributes.otherDrugs[_index5].responsesPtr.push(responseObject);\n\n                    //add new otherDrugs entry\n                    $scope.currentUserProgress.attributes.otherDrugs[_index5 + 1] = defaultValue;\n\n                    //update howMuchHowOften\n                    updateHowMuchHowOften(_index5);\n\n                    //save users progress\n                    $scope.currentUserProgress.save().then(function (progress) {\n                        return console.log(\"User's progress updated successfully.  The otherDrugs was marked complete on:  \" + timeCompleted);\n                    }, function (error) {\n                        return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                    });\n                }\n            } else if (surveyName == \"ARP\") {\n                //get the last entry index in the ARP array\n                var _index6 = $scope.currentUserProgress.attributes.ARP.length - 1;\n\n                //check if the ARP current percent complete if is zero if so then the ARP cannot be complete, it can be completed\n                if ($scope.currentUserProgress.attributes.ARP[_index6].percentageComplete != \"0\") {\n\n                    //update the ARP by updating the percentageComplete and the timestamp and pushing last response\n                    $scope.currentUserProgress.attributes.ARP[_index6].percentageComplete = \"100\";\n                    $scope.currentUserProgress.attributes.ARP[_index6].timestamp = timeCompleted;\n                    $scope.currentUserProgress.attributes.ARP[_index6].responsesPtr.push(responseObject);\n\n                    //add new ARP entry\n                    $scope.currentUserProgress.attributes.ARP[_index6 + 1] = defaultValue;\n\n                    //save users progress\n                    $scope.currentUserProgress.save().then(function (progress) {\n                        return console.log(\"User's progress updated successfully.  The ARP was marked complete on:  \" + timeCompleted);\n                    }, function (error) {\n                        return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                    });\n                }\n            } else if (surveyName == \"depression\") {\n                //get the last entry index in the depression array\n                var _index7 = $scope.currentUserProgress.attributes.depression.length - 1;\n\n                //check if the depression current percent complete if is zero if so then the depression cannot be complete, it can be completed\n                if ($scope.currentUserProgress.attributes.depression[_index7].percentageComplete != \"0\") {\n\n                    //update the depression by updating the percentageComplete and the timestamp and pushing last response\n                    $scope.currentUserProgress.attributes.depression[_index7].percentageComplete = \"100\";\n                    $scope.currentUserProgress.attributes.depression[_index7].timestamp = timeCompleted;\n                    $scope.currentUserProgress.attributes.depression[_index7].responsesPtr.push(responseObject);\n\n                    //add new depression entry\n                    $scope.currentUserProgress.attributes.depression[_index7 + 1] = defaultValue;\n\n                    //save users progress\n                    $scope.currentUserProgress.save().then(function (progress) {\n                        return console.log(\"User's progress updated successfully.  The depression was marked complete on:  \" + timeCompleted);\n                    }, function (error) {\n                        return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                    });\n                }\n            } else if (surveyName == \"MAST\") {\n                //get the last entry index in the MAST array\n                var _index8 = $scope.currentUserProgress.attributes.MAST.length - 1;\n\n                //check if the MAST current percent complete if is zero if so then the MAST cannot be complete, it can be completed\n                if ($scope.currentUserProgress.attributes.MAST[_index8].percentageComplete != \"0\") {\n                    //update the MAST by updating the percentageComplete and the timestamp and pushing last response\n                    $scope.currentUserProgress.attributes.MAST[_index8].percentageComplete = \"100\";\n                    $scope.currentUserProgress.attributes.MAST[_index8].timestamp = timeCompleted;\n                    $scope.currentUserProgress.attributes.MAST[_index8].responsesPtr.push(responseObject);\n\n                    //add new MAST entry\n                    $scope.currentUserProgress.attributes.MAST[_index8 + 1] = defaultValue;\n\n                    //save users progress\n                    $scope.currentUserProgress.save().then(function (progress) {\n                        return console.log(\"User's progress updated successfully.  The MAST was marked complete on:  \" + timeCompleted);\n                    }, function (error) {\n                        return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                    });\n                }\n            } else if (surveyName == \"dependence\") {\n                //get the last entry index in the dependence array\n                var _index9 = $scope.currentUserProgress.attributes.dependence.length - 1;\n\n                //check if the dependence current percent complete if is zero if so then the dependence cannot be complete, it can be completed\n                if ($scope.currentUserProgress.attributes.dependence[_index9].percentageComplete != \"0\") {\n                    //update the dependence by updating the percentageComplete and the timestamp and pushing last response\n                    $scope.currentUserProgress.attributes.dependence[_index9].percentageComplete = \"100\";\n                    $scope.currentUserProgress.attributes.dependence[_index9].timestamp = timeCompleted;\n                    $scope.currentUserProgress.attributes.dependence[_index9].responsesPtr.push(responseObject);\n\n                    //add new dependence entry\n                    $scope.currentUserProgress.attributes.dependence.push(defaultValue);\n\n                    //save users progress\n                    $scope.currentUserProgress.save().then(function (progress) {\n                        return console.log(\"User's progress updated successfully.  The dependence was marked complete on:  \" + timeCompleted);\n                    }, function (error) {\n                        return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                    });\n                }\n            } else {\n                //console.log(\"Could not mark \"+ surveyName + \" complete!  Please try again!\");\n            }\n        } else {\n            //the users progress needs to be saved to the newUsersProgress object\n            if (surveyName == \"audit\") {\n\n                //get the last entry index in the audit array\n                var _index10 = $scope.newUserProgress.audit.length - 1;\n\n                //update the audit by updating the percentageComplete and the timestamp and pushing last response\n                $scope.newUserProgress.audit.percentageComplete = \"100\";\n                $scope.newUserProgress.audit.timestamp = timeCompleted;\n                $scope.newUserProgress.audit.responsesPtr.push(responseObject);\n            }\n        }\n\n        $scope.currentQuestionNumber = 0;\n        $scope.currentPercentComplete = 0;\n    };\n\n    //utility function to check if objects are empty\n    function isEmpty(obj) {\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) return false;\n        }\n        return true;\n    };\n\n    function updateSurveyPercentComplete(surveyName, elemId, responseObject) {\n        var percentageComplete = 0;\n\n        //if currentUserHasProgress update the currentUserProgress, if not then need to update the audit in the newUserProgress object\n        if ($scope.currentUserProgress != null) {\n            //console.log($scope.currentUserProgress);\n            if (surveyName == \"audit\") {\n\n                //get the last entry index in the audit array\n                var index = $scope.currentUserProgress.attributes.audit.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                //as well as push the current question response into the responsesPtr array of the Progress Object\n                if (!($scope.currentUserProgress.attributes.audit[index].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n\n                    /*console.log(\"index...............\" + index);\r\n                    console.log(\"current User progress in the audit\");\r\n                    console.log($scope.currentUserProgress);*/\n\n                    $scope.currentUserProgress.attributes.audit[index].responsesPtr.push(responseObject);\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.audit * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the audit by updating the percentageComplete and current element id and pushing responseObject in array\n                $scope.currentUserProgress.attributes.audit[index].percentageComplete = percentageComplete;\n                $scope.currentUserProgress.attributes.audit[index].currentElement = elemId;\n\n                //save users progress\n                $scope.currentUserProgress.save().then(function (progress) {\n                    return console.log(\"User's progress updated successfully. The Audit's percentage complete was updated with the value:  \" + percentageComplete + \" The Audit's current element was updated with the value: \" + elemId);\n                }, function (error) {\n                    return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                });\n            } else if (surveyName == \"GTNSGT\") {\n                //get the last entry index in the GTNSGT array\n                var _index11 = $scope.currentUserProgress.attributes.GTNSGT.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                //as well as push the current question response into the responsesPtr array of the Progress Object\n                if (!($scope.currentUserProgress.attributes.GTNSGT[_index11].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n\n                    /*console.log(\"index...............\" + index);\r\n                    console.log(\"current User progress in the audit\");\r\n                    console.log($scope.currentUserProgress);*/\n\n                    $scope.currentUserProgress.attributes.GTNSGT[_index11].responsesPtr.push(responseObject);\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.GTNSGT * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the audit by updating the percentageComplete and current element id and pushing responseObject in array\n                $scope.currentUserProgress.attributes.GTNSGT[_index11].percentageComplete = percentageComplete;\n                $scope.currentUserProgress.attributes.GTNSGT[_index11].currentElement = elemId;\n\n                //save users progress\n                $scope.currentUserProgress.save().then(function (progress) {\n                    return console.log(\"User's progress updated successfully. The GTNSGT's percentage complete was updated with the value:  \" + percentageComplete + \" The GTNSGT's current element was updated with the value: \" + elemId);\n                }, function (error) {\n                    return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                });\n            } else if (surveyName == \"howMuchHowOften\") {\n                //get the last entry index in the howMuchHowOften array\n                var _index12 = $scope.currentUserProgress.attributes.howMuchHowOften.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                //as well as push the current question response into the responsesPtr array of the Progress Object\n                if (!($scope.currentUserProgress.attributes.howMuchHowOften[_index12].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n\n                    /* console.log(\"index...............\" + index);\r\n                     console.log(\"current User progress in the howMuchHowOften\");\r\n                     console.log($scope.currentUserProgress);*/\n\n                    $scope.currentUserProgress.attributes.howMuchHowOften[_index12].responsesPtr.push(responseObject);\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.howMuchHowOften * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the howMuchHowOften by updating the percentageComplete and current element id and pushing responseObject in array\n                $scope.currentUserProgress.attributes.howMuchHowOften[_index12].percentageComplete = percentageComplete;\n                $scope.currentUserProgress.attributes.howMuchHowOften[_index12].currentElement = elemId;\n\n                //save users progress\n                $scope.currentUserProgress.save().then(function (progress) {\n                    return console.log(\"User's progress updated successfully. The howMuchHowOften's percentage complete was updated with the value:  \" + percentageComplete + \" The howMuchHowOften's current element was updated with the value: \" + elemId);\n                }, function (error) {\n                    return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                });\n            } else if (surveyName == \"familyHistory\") {\n                //get the last entry index in the familyHistory array\n                var _index13 = $scope.currentUserProgress.attributes.familyHistory.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                //as well as push the current question response into the responsesPtr array of the Progress Object\n                if (!($scope.currentUserProgress.attributes.familyHistory[_index13].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n\n                    /*console.log(\"index...............\" + index);\r\n                    console.log(\"current User progress in the familyHistory\");\r\n                    console.log($scope.currentUserProgress);*/\n\n                    $scope.currentUserProgress.attributes.familyHistory[_index13].responsesPtr.push(responseObject);\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.familyHistory * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the familyHistory by updating the percentageComplete and current element id and pushing responseObject in array\n                $scope.currentUserProgress.attributes.familyHistory[_index13].percentageComplete = percentageComplete;\n                $scope.currentUserProgress.attributes.familyHistory[_index13].currentElement = elemId;\n\n                //save users progress\n                $scope.currentUserProgress.save().then(function (progress) {\n                    return console.log(\"User's progress updated successfully. The familyHistory's percentage complete was updated with the value:  \" + percentageComplete + \" The familyHistory's current element was updated with the value: \" + elemId);\n                }, function (error) {\n                    return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                });\n            } else if (surveyName == \"myDrinking\") {\n                //get the last entry index in the myDrinking array\n                var _index14 = $scope.currentUserProgress.attributes.myDrinking.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                //as well as push the current question response into the responsesPtr array of the Progress Object\n                if (!($scope.currentUserProgress.attributes.myDrinking[_index14].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n\n                    /*console.log(\"index...............\" + index);\r\n                    console.log(\"current User progress in the myDrinking\");\r\n                    console.log($scope.currentUserProgress);*/\n\n                    $scope.currentUserProgress.attributes.myDrinking[_index14].responsesPtr.push(responseObject);\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.myDrinking * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the myDrinking by updating the percentageComplete and current element id and pushing responseObject in array\n                $scope.currentUserProgress.attributes.myDrinking[_index14].percentageComplete = percentageComplete;\n                $scope.currentUserProgress.attributes.myDrinking[_index14].currentElement = elemId;\n\n                //save users progress\n                $scope.currentUserProgress.save().then(function (progress) {\n                    return console.log(\"User's progress updated successfully. The myDrinking's percentage complete was updated with the value:  \" + percentageComplete + \" The myDrinking's current element was updated with the value: \" + elemId);\n                }, function (error) {\n                    return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                });\n            } else if (surveyName == \"otherDrugs\") {\n                //get the last entry index in the otherDrugs array\n                var _index15 = $scope.currentUserProgress.attributes.otherDrugs.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                //as well as push the current question response into the responsesPtr array of the Progress Object\n                if (!($scope.currentUserProgress.attributes.otherDrugs[_index15].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n\n                    /*console.log(\"index...............\" + index);\r\n                    console.log(\"current User progress in the otherDrugs\");\r\n                    console.log($scope.currentUserProgress);*/\n\n                    $scope.currentUserProgress.attributes.otherDrugs[_index15].responsesPtr.push(responseObject);\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.otherDrugs * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the otherDrugs by updating the percentageComplete and current element id and pushing responseObject in array\n                $scope.currentUserProgress.attributes.otherDrugs[_index15].percentageComplete = percentageComplete;\n                $scope.currentUserProgress.attributes.otherDrugs[_index15].currentElement = elemId;\n\n                //save users progress\n                $scope.currentUserProgress.save().then(function (progress) {\n                    return console.log(\"User's progress updated successfully. The otherDrugs's percentage complete was updated with the value:  \" + percentageComplete + \" The otherDrugs's current element was updated with the value: \" + elemId);\n                }, function (error) {\n                    return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                });\n            } else if (surveyName == \"ARP\") {\n                //get the last entry index in the ARP array\n                var _index16 = $scope.currentUserProgress.attributes.ARP.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                //as well as push the current question response into the responsesPtr array of the Progress Object\n                if (!($scope.currentUserProgress.attributes.ARP[_index16].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n\n                    /* console.log(\"index...............\" + index);\r\n                     console.log(\"current User progress in the ARP\");\r\n                     console.log($scope.currentUserProgress);*/\n\n                    $scope.currentUserProgress.attributes.ARP[_index16].responsesPtr.push(responseObject);\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.ARP * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the ARP by updating the percentageComplete and current element id and pushing responseObject in array\n                $scope.currentUserProgress.attributes.ARP[_index16].percentageComplete = percentageComplete;\n                $scope.currentUserProgress.attributes.ARP[_index16].currentElement = elemId;\n\n                //save users progress\n                $scope.currentUserProgress.save().then(function (progress) {\n                    return console.log(\"User's progress updated successfully. The ARP's percentage complete was updated with the value:  \" + percentageComplete + \" The ARP's current element was updated with the value: \" + elemId);\n                }, function (error) {\n                    return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                });\n            } else if (surveyName == \"depression\") {\n                //get the last entry index in the depression array\n                var _index17 = $scope.currentUserProgress.attributes.depression.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                //as well as push the current question response into the responsesPtr array of the Progress Object\n                if (!($scope.currentUserProgress.attributes.depression[_index17].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n\n                    /*  console.log(\"index...............\" + index);\r\n                      console.log(\"current User progress in the depression\");\r\n                      console.log($scope.currentUserProgress);\r\n                    */\n                    $scope.currentUserProgress.attributes.depression[_index17].responsesPtr.push(responseObject);\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.depression * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the depression by updating the percentageComplete and current element id and pushing responseObject in array\n                $scope.currentUserProgress.attributes.depression[_index17].percentageComplete = percentageComplete;\n                $scope.currentUserProgress.attributes.depression[_index17].currentElement = elemId;\n\n                //save users progress\n                $scope.currentUserProgress.save().then(function (progress) {\n                    return console.log(\"User's progress updated successfully. The depression's percentage complete was updated with the value:  \" + percentageComplete + \" The depression's current element was updated with the value: \" + elemId);\n                }, function (error) {\n                    return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                });\n            } else if (surveyName == \"MAST\") {\n                //get the last entry index in the MAST array\n                var _index18 = $scope.currentUserProgress.attributes.MAST.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                //as well as push the current question response into the responsesPtr array of the Progress Object\n                if (!($scope.currentUserProgress.attributes.MAST[_index18].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n\n                    /*console.log(\"index...............\" + index);\r\n                    console.log(\"current User progress in the MAST\");\r\n                    console.log($scope.currentUserProgress);*/\n\n                    $scope.currentUserProgress.attributes.MAST[_index18].responsesPtr.push(responseObject);\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.MAST * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the depression by updating the percentageComplete and current element id and pushing responseObject in array\n                $scope.currentUserProgress.attributes.MAST[_index18].percentageComplete = percentageComplete;\n                $scope.currentUserProgress.attributes.MAST[_index18].currentElement = elemId;\n\n                //save users progress\n                $scope.currentUserProgress.save().then(function (progress) {\n                    return console.log(\"User's progress updated successfully. The MAST's percentage complete was updated with the value:  \" + percentageComplete + \" The MAST's current element was updated with the value: \" + elemId);\n                }, function (error) {\n                    return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                });\n            } else if (surveyName == \"dependence\") {\n                console.log(\"Attempting to update the dependence survey.\");\n                //get the last entry index in the dependence array\n                var _index19 = $scope.currentUserProgress.attributes.dependence.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                //as well as push the current question response into the responsesPtr array of the Progress Object\n                if (!($scope.currentUserProgress.attributes.dependence[_index19].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n\n                    /*console.log(\"index...............\" + index);\r\n                    console.log(\"current User progress in the dependence\");\r\n                    console.log($scope.currentUserProgress);*/\n\n                    $scope.currentUserProgress.attributes.dependence[_index19].responsesPtr.push(responseObject);\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.dependence * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the dependence by updating the percentageComplete and current element id and pushing responseObject in array\n                $scope.currentUserProgress.attributes.dependence[_index19].percentageComplete = percentageComplete;\n                $scope.currentUserProgress.attributes.dependence[_index19].currentElement = elemId;\n\n                //save users progress\n                $scope.currentUserProgress.save().then(function (progress) {\n                    return console.log(\"User's progress updated successfully. The dependence's percentage complete was updated with the value:  \" + percentageComplete + \" The dependence's current element was updated with the value: \" + elemId);\n                }, function (error) {\n                    return console.log(\"There was an error updating the user's progress.  Error: \" + error);\n                });\n            } else {\n                console.log(\"Could not update \" + surveyName + \"! Please try again!\");\n            }\n        } else {\n            if (surveyName == \"audit\") {\n\n                //get the last entry index in the audit array\n                var _index20 = $scope.newUserProgress.audit.length - 1;\n\n                //check if the user clicks same answer twice by comparing elmId with last processed element, if not its okay to update current question number\n                if (!($scope.newUserProgress.audit[_index20].currentElement == elemId)) {\n                    $scope.currentQuestionNumber += 1;\n                }\n\n                //calculate percentage complete\n                percentageComplete = Math.round($scope.currentQuestionNumber / TOTAL_NUM_QUESTIONS.audit * 100);\n\n                //let scope know the current percentage complete to communicate to the user\n                $scope.currentPercentComplete = percentageComplete;\n\n                //update the audit by updating the percentageComplete and current element id and pushing last response\n                $scope.newUserProgress.audit[_index20].percentageComplete = percentageComplete;\n                $scope.newUserProgress.audit[_index20].currentElement = elemId;\n                $scope.newUserProgress.audit[_index20].responsesPtr.push(responseObject);\n            }\n        }\n    };\n\n    //following function is responsible for saving the users progress object in the database, once after completion of\n    //each survey - ehenl001\n    $scope.updateUserProgress = function (elmId, responseObject) {\n\n        //get abbreviated element object from elements const\n        $scope.currentElement_abbreviated = getAbbrevElementObj(elmId);\n\n        //if getAbbrevElementObj returns a valid object continue updating user progress\n        //if not do nothing\n        if ($scope.currentElement_abbreviated) {\n\n            //check if element is last in current survey\n            if ($scope.currentElement_abbreviated.isLast) {\n                markSurveyComplete($scope.currentElement_abbreviated.survey, responseObject);\n            } else {\n                //if element is not last update percentage completed in the current survey\n                updateSurveyPercentComplete($scope.currentElement_abbreviated.survey, elmId, responseObject);\n            }\n        }\n    };\n\n    //following function gets the users progress object from the database\n    function getUserProgress(usrObject, updateProgressFromNew, updateProgressFromTemp) {\n\n        $scope.progressSrv.getUserProgress(usrObject).then(function (progress) {\n            $scope.currentUserProgress = progress;\n            /*console.log(\"retrieving users progress..............\");\r\n            console.log($scope.currentUserProgress);*/\n            if (updateProgressFromNew) {\n                transferUserProgress(true);\n            } else if (updateProgressFromTemp) {\n                transferUserProgress(false);\n            }\n        }, function (error) {\n            return console.log(error);\n        });\n    }\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // function called when a user answers a question answer element\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.handleQuestionAnswer = function (elemID, answer, numItems) {\n        $scope.next();\n\n        var resObj = { elemID: elemID, answer: [answer] };\n\n        if ($scope.isMenu(elemID) || $scope.isMenuCheck(elemID)) {\n            //ensure the menuChoice is a numeric value and store to be used later\n            var choiceIndex = Number(answer);\n\n            //if the menu has been encountered for the first time\n            if (!$scope.menuIdsVisited.includes(elemID)) {\n\n                //add the current menu to the list of menus visited\n                $scope.menuIdsVisited.push(elemID);\n\n                //prepare the tempArr, used for initializing the menu's flags\n                var tempArr = [];\n\n                //build the initial menuFlag list for the corresponding menu with id: elemID\n                for (var i = 0; i < numItems; i++) {\n                    if (i == choiceIndex) {\n                        tempArr[i] = true;\n                    } else {\n                        tempArr[i] = false;\n                    }\n                }\n\n                //add the newly encountered menu to available menus array\n                $scope.availableMenus.push({\n                    \"menuId\": elemID,\n                    \"menuFlags\": tempArr\n                });\n\n                //set the current menu to the current menu\n                $scope.currentMenu = {\n                    \"menuId\": elemID,\n                    \"menuFlags\": tempArr\n                };\n            } else {\n                //the menu has already been encountered\n                //look for the correct element id and set the flag of that corresponding flag menu to true\n                for (var i = 0; i < $scope.availableMenus.length; i++) {\n                    //set the flag\n                    if ($scope.availableMenus[i].menuId === elemID) {\n                        $scope.availableMenus[i].menuFlags[choiceIndex] = true;\n                    }\n\n                    //if current menu is different from incoming menu set current menu to incoming menu\n                    $scope.currentMenu = $scope.availableMenus[i];\n                }\n            }\n        } else {\n            $scope.updateUserProgress(elemID, resObj);\n        }\n\n        //if there is a currentUser save answer\n        if ($scope.currentUser) {\n            /*console.log(\"currentUser*****************************************************\");\r\n             console.log($scope.currentUser);*/\n            Parse.Cloud.run('addResponse', { elemID: elemID, answer: [answer] });\n            if ($scope.tempUser) {\n                //console.log(\"temp user pushing new answer in tempRes\");\n                if ($scope.tmpRes.length > 0) {\n                    for (var i = 0; i > $scope.tmpRes.length; i++) {\n                        if (!$scope.tmpRes[i].elemID == elemID) {\n                            $scope.tmpRes.push({\n                                elemID: elemID,\n                                answer: answer\n                            });\n                        } else {\n                            $scope.tmpRes[i] = {\n                                elemID: elemID,\n                                answer: [answer]\n                            };\n                        }\n                    }\n                } else {\n                    $scope.tmpRes.push({\n                        elemID: elemID,\n                        answer: answer\n                    });\n                }\n            }\n        } else {\n            //if there is not currentUser store answer in a temporary array\n            $scope.tmpRes.push({\n                elemID: elemID,\n                answer: answer\n            });\n        }\n\n        //todo: add responses upon successful login\n        //todo: add responses upon successful registration\n        //todo: create a parse cloud function addMultipleResponses\n        // var ansElem = $scope.responses.find(function(elem){\n        //     return elem.question == elemId;\n        // });\n\n        // if (ansElem === undefined) {\n        //     $scope.responses.push({\"question\": elemId, \"answer\": answer});\n        // } else {\n        //     ansElem.answer = answer;\n        //     if($scope.auditAnswer < 10) {\n        //         $scope.auditAnswer++;\n        //         console.log(\"Audit Answered: \"+ $scope.auditAnswer);\n        //     }\n        // }\n\n        // $scope.progressValue = Math.max(($scope.auditAnswer / 10) * 100, 0);\n        // console.log($scope.currentQuestionnaire + \" progress : \" + $scope.progressValue);\n\n        $scope.$root.userResponse = \"\";\n    };\n    $scope.handleLRE = function () {\n        $scope.next();\n        $scope.$root.userResponse = \"\";\n    };\n\n    $scope.getRangeLabel = function (num) {\n        $scope.rangeLabel = $scope.readinessLabels[num];\n    };\n    $scope.handleRangeSliderElement = function (elemID) {\n        var res = $scope.$root.userResponse;\n        $scope.next();\n\n        Parse.cloud.run(\"addResponse\", { elemID: elemID, answer: res });\n\n        $scope.$root.userResponse = \"\";\n    };\n\n    $scope.menuIdsVisited = [];\n    $scope.availableMenus = [];\n    $scope.currentMenu = {};\n\n    $scope.handleMenuItemSelection = function (numItems, elemID, menuChoice) {\n\n        //progress to next element in the DCU\n        //$scope.next();\n\n        //ensure the menuChoice is a numeric value and store to be used later\n        var choiceIndex = Number(menuChoice);\n\n        //Parse.Cloud.run('addResponse', { elemID: elemID, answer: [menuChoice] });\n\n\n        //if the menu has been encountered for the first time\n        if (!$scope.menuIdsVisited.includes(elemID)) {\n\n            //add the current menu to the list of menus visited\n            $scope.menuIdsVisited.push(elemID);\n\n            //prepare the tempArr, used for initializing the menu's flags\n            var tempArr = [];\n\n            //build the initial menuFlag list for the corresponding menu with id: elemID\n            for (var i = 0; i < numItems; i++) {\n                if (i == choiceIndex) {\n                    tempArr[i] = true;\n                } else {\n                    tempArr[i] = false;\n                }\n            }\n\n            //add the newly encountered menu to available menus array\n            $scope.availableMenus.push({\n                \"menuId\": elemID,\n                \"menuFlags\": tempArr\n            });\n\n            //set the current menu to the current menu\n            $scope.currentMenu = {\n                \"menuId\": elemID,\n                \"menuFlags\": tempArr\n            };\n        } else {\n            //the menu has already been encountered\n            //look for the correct element id and set the flag of that corresponding flag menu to true\n            for (var i = 0; i < $scope.availableMenus.length; i++) {\n                //set the flag\n                if ($scope.availableMenus[i].menuId === elemID) {\n                    $scope.availableMenus[i].menuFlags[choiceIndex] = true;\n                }\n\n                //if current menu is different from incoming menu set current menu to incoming menu\n                $scope.currentMenu = $scope.availableMenus[i];\n            }\n        }\n\n        /* console.log(\"******************************************************************************************\");\r\n         console.log($scope.availableMenus);*/\n\n        //clear the user's response (the menu item selected)\n        //$scope.$root.userResponse = \"\";\n\n    };\n\n    $scope.checkVisited = function (elemID, menuChoice) {\n\n        var cssClass = '';\n\n        //check to see if we have encountered this menu if not then the items all should have the default class\n        if ($scope.menuIdsVisited.includes(elemID)) {\n            //traverse the available menus and find the appropriate menu flag, assign the class based on the flag\n            for (var i = 0; i < $scope.availableMenus.length; i++) {\n                if ($scope.availableMenus[i].menuId === elemID) {\n                    cssClass = $scope.availableMenus[i].menuFlags[menuChoice] ? 'visitedMenuItem' : 'defaultMenuItem';\n                }\n            }\n        } else {\n            cssClass = 'defaultMenuItem';\n        }\n\n        return cssClass;\n    };\n\n    $scope.getProgressValue = function () {\n        return \"p\" + $scope.progressValue;\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // function called when a user answers a checkbox element\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.checkboxExists = function (item) {\n        if ($scope.$root.userResponse) return $scope.$root.userResponse.indexOf(item) > -1;else return false;\n    };\n    $scope.handleCheckbox = function (elemId, item) {\n        if ($scope.$root.userResponse == null) $scope.$root.userResponse = [];\n\n        var idx = $scope.$root.userResponse.indexOf(item);\n        if (idx > -1) $scope.$root.userResponse.splice(idx, 1);else $scope.$root.userResponse.push(item);\n\n        var ansElem = $scope.responses.find(function (elem) {\n            return elem.question == elemId;\n        });\n\n        if (ansElem === undefined) $scope.responses.push({ \"question\": elemId, \"answer\": $scope.$root.userResponse });else ansElem.answer = $scope.$root.userResponse;\n\n        //console.log($scope.$root.userResponse);\n    };\n    /*$scope.handleTabularInput = function(elemID){\r\n       $scope.next();\r\n       let response = $scope.$root.userResponse;\r\n     let answer = new Array();\r\n     let size = 0, keyA, keyB, i=0;\r\n       for (keyA in response) {\r\n     if (response.hasOwnProperty(keyA)){\r\n     let content = new Array();\r\n     for (keyB in response[keyA]){\r\n     if (response[keyA].hasOwnProperty(keyB)){\r\n     content.push(response[keyA][keyB]);\r\n     }\r\n     }\r\n         answer[i] = content;\r\n     i++;\r\n     }\r\n     }\r\n       /!* Parse.Cloud.run('addResponse', { elemID: elemID, answer: answer });*!/\r\n     };*/\n    // -----------------------------------------------------------------------------------------------------------------\n    // 'defaults' a response when visiting a question already answered\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.$root.updateUserResponseFromLocal = function (elemId) {\n        var ansElem = $scope.responses.find(function (elem) {\n            return elem.question == elemId;\n        });\n\n        if (ansElem === undefined) $scope.$root.userResponse = null;else $scope.$root.userResponse = ansElem.answer;\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // stores error messages and displays them when added\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.alerts = [];\n    $scope.addAlert = function (alert) {\n        $scope.alerts.push(alert);\n        $timeout(function () {\n            $scope.alerts.splice($scope.alerts.indexOf(alert), 1);\n        }, 2500);\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // simple helper function that removes from 'arr' element at 'index'\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.removeElement = function (arr, index) {\n        arr.splice(index, 1);\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // called when the user clicks login\n    // -----------------------------------------------------------------------------------------------------------------\n\n    // $scope.loginButton = function () {\n    //     var panel = $scope.widget.userMenu;\n    //     var cameraMenu = $scope.widget.cameraMenu;\n    //     var cameraButton = $scope.widget.cameraButton;\n    //     var pauseButton = $scope.widget.pauseButton;\n    //\n    //     panel.classes['userMenu-hidden'] = !panel.classes['userMenu-hidden'];\n    //     cameraMenu.classes['cameraMenu-hidden'] = true;\n    //\n    //     if(panel.classes['userMenu-hidden']) {\n    //         if (cameraButton.classes['cameraButton-hidden'])\n    //             cameraMenu.classes['cameraMenu-hidden'] = false;\n    //     }\n    // };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // user related models, profile with answers, credentials, etc.\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.responses = [];\n    $scope.$root.userResponse = \"hello\";\n    //$scope.credentials = { firstname: \"\", username: \"\", password: \"\", email: \"\", education: \"\", gender: \"\", dateOfBirth:\"\", age: \"\", weight: \"\", height: \"\", ethnicity: \"\", race: \"\", maritalstatus: \"\", fp_email: \"\", fp_DOB: \"\" };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // called when the user clicks the register button. registers the user into the server\n    // -----------------------------------------------------------------------------------------------------------------\n\n\n    //A function that will transfer the newUsersProgress to currentUserProgress upon login\n    function transferUserProgress(xfrFromNewUser) {\n\n        var tmpIndex = 0;\n\n        //get last entry in audit array in current UserProgress\n        var auditIndx = $scope.currentUserProgress.attributes.audit.length - 1;\n        //console.log(\"last audit index:  \" + auditIndx);\n\n        //check if we need to transfer from new user progress if not then check if we need to transfer from tempUser Progress\n        if (xfrFromNewUser) {\n            //update the current user Progress from new user progress object\n            $scope.currentUserProgress.attributes.audit[auditIndx] = $scope.newUserProgress.audit;\n            /*console.log(\"pushing via new user progress:  \");\r\n            console.log(typeof $scope.newUserProgress.audit.percentageComplete);*/\n        } else {\n\n            if ($scope.tempUserProgress.attributes.audit.length > 1) {\n                var x = $scope.tempUserProgress.attributes.audit.length - 1;\n                var audit = $scope.tempUserProgress.attributes.audit[x];\n                if (audit.timestamp === \"\" && audit.percentageComplete === \"0\") {\n                    tmpIndex = x - 1;\n                } else {\n                    tmpIndex = x;\n                }\n            }\n\n            /*console.log(\"currentUserProgress: \");\r\n             console.log($scope.currentUserProgress.attributes.audit[auditIndx]);\r\n             console.log(\"audit index: \");\r\n             console.log(auditIndx);\r\n               console.log(\"tempUserProgress: \");\r\n             console.log($scope.tempUserProgress.attributes.audit);\r\n             console.log(\"tmp index: \");\r\n             console.log(tmpIndex);\r\n             */\n\n            //update the current user Progress from new temp user progress object\n            $scope.currentUserProgress.attributes.audit[auditIndx] = $scope.tempUserProgress.attributes.audit;\n\n            //save the current user progress\n            //save users progress\n            //console.log( $scope.currentUserProgress);\n            $scope.currentUserProgress.save().then(function (progress) {\n                return console.log(\"Current users progress updated from temp user complete!\");\n            }, function (error) {\n                return console.log(\"There was an error updating the user's progress from temp user.  Error: \" + error);\n            });\n\n            /*console.log(\"pushing via temp user progress:  \");\r\n            console.log(typeof $scope.newUserProgress.audit.percentageComplete);*/\n\n            //clear temp scope variables\n            $scope.tempUser = {};\n            $scope.tempUserProgress = {};\n        }\n    };\n\n    //helper function to transfer temp users responses to current user in DB\n    function transferResFromTemp() {\n        for (var i = 0; i < $scope.tmpRes.length; i++) {\n            Parse.Cloud.run('addResponse', { elemID: $scope.tmpRes[i].elemID, answer: [$scope.tmpRes[i].answer] });\n        }\n\n        $scope.tmpRes = [];\n    }\n\n    $scope.register = function () {\n        //$scope.credentials.responses = $scope.responses;\n\n        $scope.credentials.tempUser = false;\n\n        AuthService.register($scope.credentials).then(function (success) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.addAlert({\n                style: \"alert-success\",\n                type: \"Success!\",\n                message: \"Your account has been created!\"\n            });\n\n            $scope.mode.loggingIn = false;\n            $scope.mode.register = false;\n            $scope.mode.loggingOut = false;\n            $scope.mode.forgotPW = false;\n            // $scope.mode.forgotUN = false;\n            $scope.mode.loginActivated = false;\n            $scope.mode.updatePW = false;\n            $scope.mode.isLoggedIn = true;\n            $scope.mode.isTempUser = $scope.currentUser.object.attributes.tempUser;\n\n            $scope.userGivenName = success.attributes.firstName;\n\n            if ($scope.tmpRes.length > 0) {\n                transferResFromTemp();\n            }\n\n            //create new progress object for the new user and set it to the currentUserProgress\n            $scope.progressSrv.createProgress($scope.currentUser.object, $scope.currentUserProgress.attributes).then(function (progress) {\n\n                $scope.currentUserProgress = {};\n                $scope.currentUserProgress = progress;\n                /* console.log(\"User Progress Created Successfully\");\r\n                 console.log($scope.currentUserProgress);*/\n            }, function (error) {\n                console.log(\"unsuccessful adding new progress\");\n            });\n        }, function (error) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error\n            });\n        });\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // called when the user clicks the login button. logins the user into the site and creates a JWT\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.login = function () {\n        return AuthService.login($scope.credentials).then(function (success) {\n            //get previous User Object for Progress Obj transfer prep\n            $scope.tempUser = $scope.currentUser;\n            $scope.tempUserProgress = $scope.currentUserProgress;\n            $scope.currentUser = AuthService.currentUser();\n            $scope.mode.loggingIn = false;\n            $scope.mode.register = false;\n            $scope.mode.loggingOut = false;\n            $scope.mode.forgotPW = false;\n            // $scope.mode.forgotUN = false;\n            $scope.updatePW = false;\n            $scope.mode.loginActivated = false;\n            $scope.mode.isLoggedIn = true;\n\n            //todo: replace with addMultipleResponse when completed\n            if ($scope.tmpRes.length > 0) {\n                transferResFromTemp();\n            }\n\n            $scope.userGivenName = $scope.currentUser.object.attributes.firstName;\n            $scope.mode.isTempUser = $scope.currentUser.object.attributes.tempUser;\n\n            //if the current user is not temp and temp user is temp then set\n            //func sign:  getUserProgress(usrObject, updateProgressFromNew - bool, updateProgressFromTemp - bool)\n\n            if (!$scope.currentUser.object.attributes.tempUser && $scope.tempUser.object.attributes.tempUser) {\n                //get the users progress when logged in successfully\n                getUserProgress($scope.currentUser.object, false, true);\n            } else {\n                //get the users progress when logged in successfully\n                getUserProgress($scope.currentUser.object, true, false);\n            }\n\n            //Parse.Cloud.run(\"transferResFromTemp\", {tempUserID: $scope.tempUser.object.id});\n\n\n            $scope.addAlert({\n                style: \"alert-success\",\n                type: \"Success!\",\n                message: \"You have successfully logged in!\"\n            });\n        }, function (error) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error\n            });\n        });\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // function called when the user clicks logout. removes JWT from the browser\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.logout = function () {\n        return AuthService.logout().then(function (success) {\n            $scope.currentUser = AuthService.currentUser();\n\n            $scope.mode.loggingIn = false;\n            $scope.mode.register = false;\n            $scope.mode.loggingOut = false;\n            $scope.mode.forgotPW = false;\n            $scope.mode.forgotUN = false;\n            $scope.mode.loginActivated = false;\n            $scope.mode.isLoggedIn = false;\n            $scope.userGivenName = \"\";\n\n            $scope.addAlert({\n                style: \"alert-success\",\n                type: \"Success!\",\n                message: \"You have successfully logged out.\"\n            });\n            $state.go('home');\n        }, function (error) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error\n            });\n            $scope.isLoggedIn = true;\n        });\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // function called whenever the answers of the user need to be saved onto the server\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.save = function () {\n        if (!$scope.currentUser) return;\n\n        $scope.currentUser.responses = $scope.responses;\n        $scope.currentUser.save();\n    };\n    //new approach to survey list interaction\n    // var selection;\n    // $scope.setSelection = function(string_value) {\n    //     // document.getElementsById(string_value);\n    //     selection = string_value;\n    // }\n    // $scope.getSelection = function() {\n    //     return selection;\n    // }\n\n\n    //Solution to print pages by url. (requires a url of the html file to be printed.\n    function closePrint() {\n        document.body.removeChild(this.__container__);\n    }\n\n    function setPrint() {\n        this.contentWindow.__container__ = this;\n        this.contentWindow.onbeforeunload = closePrint;\n        this.contentWindow.onafterprint = closePrint;\n        this.contentWindow.focus(); // Required for IE\n        this.contentWindow.print();\n    }\n\n    $scope.printPage = function (sURL) {\n        var oHiddFrame = document.createElement(\"iframe\");\n        oHiddFrame.onload = setPrint;\n        oHiddFrame.style.visibility = \"hidden\";\n        oHiddFrame.style.position = \"fixed\";\n        oHiddFrame.style.right = \"0\";\n        oHiddFrame.style.bottom = \"0\";\n        oHiddFrame.src = sURL;\n        document.body.appendChild(oHiddFrame);\n    };\n    // -----------------------------------------------------------------------------------------------------------------\n    // function called to print properly the pages behind the virtual character\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.printContent = function () {\n        var printWindow = window.open(\"\", \"_blank\", \"\");\n        printWindow.document.open();\n        printWindow.document.write($rootScope.contentData.html);\n        printWindow.document.close();\n        printWindow.focus();\n        //The Timeout is ONLY to make Safari work, but it still works with FF, IE & Chrome.\n        setTimeout(function () {\n            printWindow.print();\n            printWindow.close();\n        }, 100);\n    };\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // model containing the bar graph information to be displayed on the content view of the counseling site\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.redirect = function (location) {\n        // store in browser cache the location\n        localStorageService.set(\"redirect-page\", location);\n        $window.location.reload();\n    };\n\n    $scope.redirectNewTab = function (newTabUrl) {\n        $window.open(newTabUrl, '_blank');\n    };\n\n    $scope.privacyOpen = function () {\n        //console.log('opening privacy pop up');\n        var modalInstance = $uibModal.open({\n            templateUrl: 'views/partials/popup/privacy.popup.view.html',\n            windowClass: 'center-privacy-popup',\n            controller: 'privacyPopUpController',\n            scope: $scope\n        });\n    };\n\n    $scope.aboutUsOpen = function () {\n        //console.log('opening aboutUs pop up');\n        var modalInstance = $uibModal.open({\n            templateUrl: 'views/partials/popup/aboutUs.popup.view.html',\n            windowClass: 'center-aboutUs-popup',\n            controller: 'aboutUsPopUpController',\n            scope: $scope\n        });\n    };\n\n    $scope.adPolicyOpen = function () {\n        //console.log('opening adPolicy pop up');\n        var modalInstance = $uibModal.open({\n            templateUrl: 'views/partials/popup/adPolicy.popup.view.html',\n            windowClass: 'center-adPolicy-popup',\n            controller: 'adPolicyPopUpController',\n            scope: $scope\n        });\n    };\n\n    $scope.copyrightOpen = function () {\n        //console.log('opening copyright pop up');\n        var modalInstance = $uibModal.open({\n            templateUrl: 'views/partials/popup/copyright.popup.view.html',\n            windowClass: 'center-copyright-popup',\n            controller: 'copyrightPopUpController',\n            scope: $scope\n        });\n    };\n\n    $scope.limitationsOpen = function () {\n        //console.log('opening limitations pop up');\n        var modalInstance = $uibModal.open({\n            templateUrl: 'views/partials/popup/limitations.popup.view.html',\n            windowClass: 'center-limitations-popup',\n            controller: 'limitationsPopUpController',\n            scope: $scope\n        });\n    };\n\n    $scope.close = function () {\n        $uibModal.close({});\n    };\n\n    $scope.hideLogin = function () {\n        if ($scope.showLogin) {\n            $scope.showLogin = false;\n        } else {\n            $scope.showLogin = true;\n        }\n    };\n\n    $scope.labels = [['2006', '2007', '2008', '2009', '2010', '2011', '2012'], [], []];\n    $scope.series = ['Series A', 'Series B'];\n\n    $scope.data = [[65, 59, 80, 81, 56, 55, 40], [28, 48, 40, 19, 86, 27, 90]];\n\n    $scope.bacTableResponse = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];\n    $scope.handlePersonalBACTable = function () {\n\n        $scope.next();\n\n        /* console.log('handlePersonalBACTable');\r\n         console.log(elemID);\r\n           console.log($scope.bacTableResponse);*/\n\n        Parse.Cloud.run('addResponse', { elemID: elemID, answer: bacTableResponse });\n    };\n\n    $scope.surveyCompleted = function (formName) {\n        switch (formName) {\n            case \"The screening questionnaire you took before registering\":\n                if ($scope.currentUserProgress.attributes.audit[0].timestamp) {\n                    return true;\n                } else return false;\n                break;\n            case \"How much and how often you drink\":\n                if ($scope.currentUserProgress.attributes.howMuchHowOften[0].timestamp) {\n                    return true;\n                } else return false;\n                break;\n            case \"What you like and don't like about drinking\":\n                if ($scope.currentUserProgress.attributes.GTNSGT[0].timestamp) {\n                    return true;\n                } else return false;\n                break;\n            case \"Age you started drinking and family history of problems\":\n                if ($scope.currentUserProgress.attributes.familyHistory[0].timestamp) {\n                    return true;\n                } else return false;\n                break;\n            case \"How much you drink\":\n                if ($scope.currentUserProgress.attributes.myDrinking[0].timestamp) {\n                    return true;\n                } else return false;\n                break;\n            case \"Other drug use\":\n                if ($scope.currentUserProgress.attributes.otherDrugs[0].timestamp) {\n                    return true;\n                } else return false;\n                break;\n            case \"Alcohol-related problems\":\n                if ($scope.currentUserProgress.attributes.ARP[0].timestamp) {\n                    return true;\n                } else return false;\n                break;\n            case \"A screening for depressed mood\":\n                if ($scope.currentUserProgress.attributes.depression[0].timestamp) {\n                    return true;\n                } else return false;\n                break;\n            case \"Chances of success with moderate drinking\":\n                if ($scope.currentUserProgress.attributes.MAST[0].timestamp) {\n                    return true;\n                } else return false;\n                break;\n            case \"How much you've come to depend on drinking\":\n                if ($scope.currentUserProgress.attributes.dependence[0].timestamp) {\n                    return true;\n                } else return false;\n                break;\n            default:\n                return false;\n        }\n    };\n\n    $scope.myDrinks = {\n        beer: [],\n        wine: [],\n        liquor: [],\n        hours: []\n    };\n\n    $scope.saveMDRes = function () {\n        var ans = [];\n        ans[0] = $scope.myDrinks;\n        Parse.Cloud.run('addResponse', { elemID: \"wPFh7S9lhn\", answer: ans }).then(function (success) {\n            $scope.Success(\"Your responses have been saved successfully\");\n        }, function (error) {\n            $scope.Error(\"Your responses were not saved. Error: \" + error);\n        });\n    };\n\n    $scope.peakDrink = {\n        beer: [],\n        wine: [],\n        liquor: [],\n        hours: []\n    };\n\n    $scope.savePeakRes = function () {\n        var ans = [];\n        ans[0] = $scope.peakDrink;\n        Parse.Cloud.run('addResponse', { elemID: \"f8B0ihkAKr\", answer: ans }).then(function (success) {\n            $scope.Success(\"Your responses have been saved successfully\");\n        }, function (error) {\n            $scope.Error(\"Your responses were not saved. Error: \" + error);\n        });\n    };\n\n    $scope.testRegistration = function () {\n\n        for (var i = 0; i < $scope.raceType.length; i++) {\n            if ($scope.raceType[i].checked) {\n                $scope.credentials.race.push($scope.raceType[i].name);\n            }\n        }\n\n        $scope.credentials.maritalstatus = $scope.selectedMaritalStatus;\n        $scope.credentials.education = $scope.selectedEducation;\n\n        //console.log(typeof $scope.selectedEthnicity);\n        $scope.credentials.ethnicity = $scope.selectedEthnicity;\n        //console.log(typeof $scope.credentials.dateOfBirth);\n        //console.log($scope.credentials.dateOfBirth);\n        $scope.credentials.gender = $scope.selectedGender;\n\n        var userAge = parseInt($scope.getAge());\n        var userHeight = Number($scope.getHeight());\n        $scope.credentials.age = userAge;\n        $scope.register();\n    };\n\n    init();\n\n    // $scope.registerOpen = function () {\n    //     console.log('opening register pop up');\n    //     var modalInstance = $uibModal.open({\n    //         templateUrl: 'views/partials/popup/register.popup.view.html',\n    //         controller: 'registerPopUpController',\n    //         windowClass: 'center-register-popup',\n    //         scope: $scope\n    //     });\n    // };\n\n    /*$scope.goBackButton = function(){\r\n     $scope.$root.userResponse = -99;\r\n     $scope.next();\r\n     };*/\n\n    /*$scope.loginActivation = function(){\r\n     var modalInstance = $uibModal.open({\r\n     templateUrl: 'views/parti als/popup/loginNEW.popup.view.html',\r\n     windowClass: 'center-loginNEW-popup',\r\n     scope: $scope\r\n     });\r\n     };*/\n\n    $scope.deactivateLoginPopup = function () {\n        $scope.mode.loggingIn = false;\n        $scope.mode.register = false;\n        $scope.mode.loggingOut = false;\n        $scope.mode.forgotPW = false;\n        // $scope.mode.forgotUN = false;\n        $scope.mode.loginActivated = false;\n        $scope.mode.updatePW = false;\n    };\n\n    $scope.loginActivation = function () {\n        $scope.mode.loggingIn = false;\n        $scope.mode.register = false;\n        $scope.mode.loggingOut = false;\n        $scope.mode.forgotPW = false;\n        // $scope.mode.forgotUN = false;\n        $scope.mode.loginActivated = true;\n        $scope.mode.optionsActivated = true;\n        $scope.mode.updatePW = false;\n    };\n\n    $scope.loginLoad = function () {\n        $scope.mode.loggingIn = true;\n        $scope.mode.register = false;\n        $scope.mode.loggingOut = false;\n        $scope.mode.forgotPW = false;\n        // $scope.mode.forgotUN = false;\n        $scope.mode.optionsActivated = false;\n        $scope.mode.updatePW = false;\n    };\n\n    $scope.registrationLoad = function () {\n        $scope.mode.loggingIn = false;\n        $scope.mode.register = true;\n        $scope.mode.loggingOut = false;\n        $scope.mode.forgotPW = false;\n        // $scope.mode.forgotUN = false;\n        $scope.mode.optionsActivated = false;\n        $scope.mode.updatePW = false;\n    };\n\n    $scope.forgotPWLoad = function () {\n        $scope.mode.loggingIn = false;\n        $scope.mode.register = false;\n        $scope.mode.loggingOut = false;\n        $scope.mode.forgotPW = true;\n        // $scope.mode.forgotUN = false;\n        $scope.mode.updatePW = false;\n    };\n\n    $scope.updatePWLoad = function () {\n        $scope.mode.loggingIn = false;\n        $scope.mode.register = false;\n        $scope.mode.loggingOut = false;\n        $scope.mode.forgotPW = false;\n        // $scope.mode.forgotUN = false;\n        $scope.mode.updatePW = true;\n    };\n\n    // $scope.forgotUNLoad = function(){\n    //     $scope.mode.loggingIn = false;\n    //     $scope.mode.register = false;\n    //     $scope.mode.loggingOut = false;\n    //     $scope.mode.forgotPW = false;\n    //     $scope.mode.forgotUN = true;\n    // };\n\n    $scope.fpUser = {};\n\n    //function that helps validate email\n    function checkEmail(email) {\n        //find user by email\n        var atpos = email.indexOf(\"@\");\n        var dotpos = email.lastIndexOf(\".\");\n\n        if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= email.length) {\n            window.alert(\"Failed in the forgot pw before email\");\n            return false;\n        }\n        return true;\n    }\n\n    //new function reset user's password\n    $scope.forgotPassword = function () {\n        console.log(\"going to see if email in db\");\n        var emailIsValid = checkEmail($scope.credentials.fp_email);\n\n        if (!emailIsValid) {\n            window.alert(\"Not a valid e-mail address\");\n            return false;\n        }\n\n        $scope.usrSrvc.validateUserbyEmail($scope.credentials.fp_email).then(function (success) {\n            Parse.User.requestPasswordReset($scope.credentials.fp_email, {\n                success: function success() {\n                    $scope.mode = {\n                        \"loggingIn\": false,\n                        \"register\": false,\n                        \"loggingOut\": false,\n                        \"isLoggedIn\": false,\n                        \"forgotPW\": false,\n                        // \"forgotUN\": false,\n                        \"loginActivated\": false,\n                        \"optionsActivated\": false,\n                        \"updatePW\": false,\n                        \"isTempUser\": true\n                    };\n                    window.alert(\"Password reset link has been sent to \" + $scope.credentials.fp_email);\n                    return true;\n                },\n                error: function error(_error) {\n                    window.alert(_error.message);\n                    return false;\n                }\n            });\n        }, function (error) {\n            return false;\n        });\n    };\n\n    //function to reset user's PW\n    $scope.resetPW = function () {\n        //console.log(\"Going into reset PW function\");\n        var userEmail = $scope.credentials.fp_email;\n        var userDOB = $scope.credentials.fp_DOB;\n        /*        // if ((userEmail==$scope.credentials.email) && (userDOB==$scope.credentials.dateOfBirth))\r\n                // {\r\n                //     $scope.addAlert({\r\n                //         style: \"alert-success\",\r\n                //         type: \"Success!\",\r\n                //         message: \"Email and Date of Birth match\"\r\n                //     });\r\n                //     console.log(\"Credentials match!!!\");\r\n                //     $scope.mode.loggingIn = false;\r\n                //     $scope.mode.register = false;\r\n                //     $scope.mode.loggingOut = false;\r\n                //     $scope.mode.forgotPW = false;\r\n                //     // $scope.mode.forgotUN = false;\r\n                //     $scope.updatePW = true;\r\n                //     $scope.mode.loginActivated = false;\r\n                //     $scope.mode.isLoggedIn = false;\r\n                //\r\n                // }\r\n                // else\r\n                // {\r\n                //     $scope.addAlert({\r\n                //         style: \"alert-danger\",\r\n                //         type: \"Error:\",\r\n                //         message: error\r\n                //     });\r\n                //     console.log(\"Sorry, credentials do NOT match!\");\r\n                // }*/\n        /*$scope.usrSrvc.updatePW(userEmail, userDOB).then(\r\n            foundUser =>{\r\n                $scope.fpUser = foundUser;\r\n                /!*console.log(\"User was found in usrSrv.updatePW\");\r\n                console.log(foundUser);*!/\r\n                $scope.updatePWLoad();\r\n            },\r\n            error => console.log(\"User not found.  Error: \" + error)\r\n        );*/\n    };\n\n    $scope.changePW = function () {\n        if ($scope.credentials.password === $scope.credentials.confirmpassword) {\n            /* console.log(\"in Change PW webgl................\");\r\n             console.log($scope.fpUser);*/\n            Parse.Cloud.run('updatePW', { updateUsr: $scope.fpUser.id, newPW: $scope.credentials.password }).then(function (success) {\n                return console.log(success);\n            }, function (error) {\n                return console.log(error);\n            });\n\n            /*$scope.usrSrvc.changePW($scope.credentials.password, $scope.fpUser).then(\r\n                success => {\r\n                    console.log(\"Success in changePW\");\r\n                    $scope.loginLoad();\r\n                },\r\n                error =>  {\r\n                    console.log({\r\n                        style: \"alert-danger\",\r\n                        type: \"Error:\",\r\n                        message: \"Problem: \" + error\r\n                    });\r\n                }\r\n            );*/\n        } else {\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: \"Sorry! Passwords do not match! Please try again.\"\n            });\n        }\n    };\n\n    $scope.educationType = ['Some high school', 'High school graduate or equivalent', 'Trade or Vocational degree', 'Some college', 'Associate degree', 'Bachelor\\'s degree', 'Graduate or professional degree'];\n\n    $scope.selectedEducation = \"\";\n\n    $scope.genderType = ['Male', 'Female', 'Other'];\n    $scope.selectedGender = \"\";\n\n    $scope.ethnicityType = ['Hispanic or Latino', 'Not Hispanic or Latino'];\n\n    $scope.selectedEthnicity = \"\";\n\n    /*$scope.raceType = [\r\n     'American Indian or Alaska Native',\r\n     'Asian',\r\n     'Black or African Descent',\r\n     'Native Hawaiian or Other Pacific Islander',\r\n     'White'\r\n     ];*/\n    $scope.raceType = [{\n        \"name\": \"American Indian or Alaska Native\",\n        \"checked\": false\n    }, {\n        \"name\": \"Asian\",\n        \"checked\": false\n    }, {\n        \"name\": \"Black or African Descent\",\n        \"checked\": false\n    }, {\n        \"name\": \"Native Hawaiian or Other Pacific Islander\",\n        \"checked\": false\n    }, {\n        \"name\": \"White\",\n        \"checked\": false\n    }];\n\n    $scope.selectedRace = [];\n\n    $scope.maritalType = ['Single, Not Married', 'Married', 'Living with partner', 'Separated', 'Divorced', 'Widowed', 'Prefer not to answer'];\n    $scope.selectedMaritalStatus = \"\";\n\n    $scope.selectedAnwser = \"\";\n\n    $scope.changeEthnicity = function (val) {\n        $scope.selectedEthnicity = val;\n    };\n\n    $scope.changeGender = function (val) {\n        $scope.selectedGender = val;\n    };\n\n    $scope.changeMaritalStatus = function (val) {\n        $scope.selectedMaritalStatus = val;\n    };\n\n    $scope.changeEducation = function (val) {\n        $scope.selectedEducation = val;\n    };\n\n    //function for generating age from birthday\n    $scope.getAge = function () {\n        var birthday = $scope.credentials.dateOfBirth;\n        var today = new Date();\n        var age = (today - birthday) / 31557600000;\n        age = Math.floor(age);\n        return age;\n    };\n\n    //function for generating height from feet and inches entered\n    $scope.getHeight = function () {\n        var height_ft = $scope.credentials.height.feet;\n        height_ft = Number(height_ft);\n        var height_in = $scope.credentials.height.inches;\n        height_in = Number(height_in);\n        $scope.credentials.height.total = height_ft * 12 + height_in;\n    };\n}","'use strict';\n\nangular.module('app').controller('welcomeController', welcomeController);\n\nwelcomeController.$inject = ['$scope', '$window', '$uibModal', '$state', 'localStorageService', 'AuthService', '$timeout', 'ProgressService', 'UserService'];\n\nfunction welcomeController($scope, $window, $uibModal, $state, localStorageService, AuthService, $timeout, ProgressService, UserService) {\n    $scope.usrSrvc = UserService;\n\n    var NEW_USER_PROGRESS = {\n        user: {},\n        GTNSGT: [{\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        }],\n        audit: [{\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        }],\n        howMuchHowOften: [{\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        }],\n        familyHistory: [{\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        }],\n        myDrinking: [{\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        }],\n        otherDrugs: [{\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        }],\n        ARP: [{\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        }],\n        depression: [{\n            \"formId\": \"\",\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        }],\n        MAST: [{\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        }],\n        dependence: [{\n            \"timestamp\": \"\",\n            \"responsesPtr\": [],\n            \"percentageComplete\": \"0\",\n            \"currentElement\": \"\"\n        }]\n    };\n    $scope.currentUser = Parse.User.current();\n    $scope.tempUser = false;\n    $scope.alerts = [];\n    var DEFAULTCREDENTIALS = {\n        firstname: \"\",\n        //lastname: \"\",\n        username: \"\",\n        password: \"\",\n        email: \"\",\n        education: \"\",\n        gender: \"\",\n        dateOfBirth: \"\",\n        age: \"\",\n        weight: \"\",\n        height: {\n            total: 0,\n            feet: \"\",\n            inches: \"\"\n        },\n        ethnicity: \"\",\n        race: [],\n        maritalstatus: \"\",\n        confirmpassword: \"\",\n        confirmemail: \"\",\n        tempUser: false\n    };\n\n    $scope.credentials = DEFAULTCREDENTIALS;\n    $scope.progressSrv = ProgressService;\n    $scope.newUserProgress = NEW_USER_PROGRESS;\n    $scope.currentUserProgress = {};\n\n    //helper function for generating random strings\n    function genString() {\n        var text = \"\";\n        var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n        for (var i = 0; i < 5; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }return text;\n    };\n\n    //helper function for generating age from birthday\n    $scope.getTempAge = function () {\n        var birthday = $scope.credentials.dateOfBirth;\n        var today = new Date();\n        var age = (today - birthday) / 31557600000;\n        var age = Math.floor(age);\n        return age;\n    };\n\n    $scope.tempUserStatus = function () {\n        //allow user to log in if logged in as temp or not logged in at all\n\n        if (!$scope.currentUser.object.attributes.tempUser && $scope.currentUser != null) {\n            //the user logged in is not a temp  User => let user log out\n            return false;\n        } else {\n            return true;\n        }\n    };\n\n    $scope.createTempAccount = function () {\n\n        //ehenl001 16 July 2018\n        //flag this account is temp user account\n        $scope.credentials.tempUser = true;\n        $scope.tempUser = $scope.credentials.tempUser;\n\n        //create temp string as id\n        $scope.credentials.username = genString();\n\n        //create temp string as password\n        $scope.credentials.password = genString();\n\n        //give the temp user the fName guest\n        $scope.credentials.firstname = \"Guest\";\n\n        //give bogus email for temp user\n        $scope.credentials.email = $scope.credentials.username + \"@g.c\";\n\n        //create temp education\n        $scope.credentials.education = \"Some college\";\n\n        //create temp gender\n        $scope.credentials.gender = \"Male\";\n\n        //create temp DOB using angular ng date format (yyyy-MM-dd)\n        $scope.credentials.dateOfBirth = new Date();\n\n        //generate age function for temp user\n        $scope.credentials.age = 25;\n\n        //create weight for temp user\n        $scope.credentials.weight = \"120\";\n\n        //create height for temp user\n        $scope.credentials.height.total = 22;\n\n        //create ethnicity for temp user\n        $scope.credentials.ethnicity = \"Hispanic or Latino\";\n\n        //create race for temp user\n        $scope.credentials.race = [\"Asian\"];\n\n        //create marital status for temp user\n        $scope.credentials.maritalstatus = \"Divorced\";\n\n        //create temp user in the database via Auth srvc registration function\n        AuthService.register($scope.credentials).then(function (success) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.userGivenName = $scope.currentUser.object.attributes.firstName;\n            $scope.credentials.username = \"\";\n            $scope.credentials.password = \"\";\n\n            //create new progress object for the new user and set it to the currentUserProgress\n            $scope.createNewProgressObject($scope.currentUser.object);\n        }, function (error) {\n            $scope.currentUser = AuthService.currentUser();\n            console.log(error);\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error\n            });\n        });\n    };\n\n    $scope.createNewProgressObject = function (userObj) {\n\n        /*console.log(\"the user object___________:\");\r\n        console.log(userObj);*/\n        $scope.progressSrv.createProgress(userObj, $scope.newUserProgress).then(function (progress) {\n            $scope.currentUserProgress = progress;\n            //console.log($scope.currentUserProgress);\n        }, function (error) {\n            console.log(\"unsuccessful adding new progress\");\n        });\n    };\n\n    function init() {\n\n        AuthService.logout().then(function (success) {\n            $scope.currentUser = AuthService.currentUser();\n\n            // get from cache the variable\n            var variable = localStorageService.get(\"redirect-page\");\n            localStorageService.remove(\"redirect-page\");\n\n            switch (variable) {\n                case \"home\":\n                    $state.go('home');\n                    break;\n                default:\n                    break; //do nothing\n            }\n\n            //$scope.tempUser = AuthService.getTempUserStatus();\n\n            //check if current user logged in\n            if (AuthService.currentUser()) {\n                $scope.currentUser = AuthService.currentUser();\n                $scope.userGivenName = $scope.currentUser.object.attributes.firstName;\n                if (AuthService.currentUser().object.attributes.tempUser) {\n\n                    /* console.log(\"user is a temp!\");\r\n                     console.log($scope.currentUser.object.attributes.username);\r\n                     console.log($scope.currentUser.object.attributes.tempUser);\r\n                    */\n                    $scope.createTempAccount();\n                }\n            } else {\n                $scope.createTempAccount();\n            }\n        }, function (error) {\n            return $scope.currentUser = AuthService.currentUser();\n        });\n    }\n\n    init();\n\n    $scope.addAlert = function (alert) {\n        $scope.alerts.push(alert);\n        $timeout(function () {\n            $scope.alerts.splice($scope.alerts.indexOf(alert), 1);\n        }, 2500);\n    };\n\n    //for logging in\n    $scope.login = function () {\n        return AuthService.login($scope.credentials).then(function (success) {\n            $scope.currentUser = AuthService.currentUser();\n\n            $scope.userGivenName = success.attributes.firstname;\n            $scope.tempUser = success.attributes.tempUser;\n            /*  console.log(\"logging in from welcome.js\");\r\n              console.log($scope.tempUser);*/\n\n            $scope.addAlert({\n                style: \"alert-success\",\n                type: \"Success!\",\n                message: \"You have successfully logged in!\"\n            });\n\n            $('#loginModal').modal('hide');\n\n            //$state.go('counseling');\n        }, function (error) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error\n            });\n        });\n    };\n\n    //for logging out\n    $scope.logout = function () {\n        return AuthService.logout().then(function (success) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.userGivenName = \"\";\n            $scope.tempUser = false;\n\n            $scope.addAlert({\n                style: \"alert-success\",\n                type: \"Success!\",\n                message: \"You have successfully logged out.\"\n            });\n            //$state.go('/');\n        }, function (error) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error\n            });\n            $scope.isLoggedIn = true;\n        });\n    };\n\n    //function that helps validate email\n    function checkEmail(email) {\n        //find user by email\n        var atpos = email.indexOf(\"@\");\n        var dotpos = email.lastIndexOf(\".\");\n\n        if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= email.length) {\n            window.alert(\"Failed in the forgot pw before email\");\n            return false;\n        }\n        return true;\n    }\n\n    //new function reset user's password\n    $scope.forgotPassword = function () {\n        //console.log(\"going to see if email in db\");\n        var emailIsValid = checkEmail($scope.credentials.fp_email);\n\n        if (!emailIsValid) {\n            window.alert(\"Not a valid e-mail address\");\n            return false;\n        }\n\n        $scope.usrSrvc.validateUserbyEmail($scope.credentials.fp_email).then(function (success) {\n            Parse.User.requestPasswordReset($scope.credentials.fp_email, {\n                success: function success() {\n                    window.alert(\"Password reset link has been sent to \" + $scope.credentials.fp_email);\n                    return true;\n                },\n                error: function error(_error) {\n                    window.alert(_error.message);\n                    return false;\n                }\n            });\n        }, function (error) {\n            return false;\n        });\n    };\n\n    $scope.openLogin = function () {\n        //console.log('opening log in pop up');\n        var modalInstance = $uibModal.open({\n            templateUrl: 'views/partials/popup/login.popup.view.html',\n            controller: 'loginPopUpController',\n            windowClass: 'center-login-popup',\n            scope: $scope\n        });\n    };\n\n    $scope.openAbout = function () {\n        //console.log('opening About pop up');\n        var modalInstance = $uibModal.open({\n            templateUrl: 'views/partials/popup/aboutUs.popup.view.html',\n            windowClass: 'center-aboutUs-popup',\n            controller: 'aboutUsPopUpController',\n            scope: $scope\n        });\n    };\n\n    $scope.redirect = function (location) {\n        // store in browser cache the location\n        localStorageService.set(\"redirect-page\", location);\n        $window.location.reload();\n    };\n}","'use strict';\n\n/*\r\n *   Authors: Guido Ruiz, Daniel Rivero\r\n *\r\n *   Description: A directive is a custom HTML tag, similar to <html>, <body>, <a>, etc, with angular, you can create\r\n *   your own custom HTML tag that when read puts within a controller, actual HTML, the works. For example, instead of\r\n *   copying the controller for the navigation bar across all pages, we simply use the tag <navadmin></navadmin>, which\r\n *   in turn will inject within it the template and the adminNavController, in charge of that particular section. In\r\n *   other words, a directive is a packaged controller and html template that can be written as a tag anywhere.\r\n */\n\nangular.module('app').directive('navadmin', adminNavDirective);\n\nfunction adminNavDirective() {\n    return {\n        restrict: 'EA',\n        templateUrl: 'views/templates/navadmin.view.html',\n        controller: 'adminNavController'\n    };\n}\n\nangular.module('app').controller('adminNavController', adminNavController);\n\nadminNavController.$inject = ['$scope', '$window'];\n\nfunction adminNavController($scope, $window) {\n    $scope.auth = AuthService;\n\n    console.log($scope.auth.currentUser);\n\n    $scope.logout = function () {\n        Parse.User.logOut().then(function (success) {\n            console.log(success);\n            $scope.currentUser = null;\n            $scope.$apply();\n        }, function (error) {\n            ErrorService.handleParseError(error);\n            $scope.$apply();\n        });\n    };\n}","'use strict';\n\n/*\r\n *   State Machine Filters\r\n *\r\n *   Authors: Guido Ruiz\r\n *\r\n *   Description: Think of filters as helper functions that format data. Imagine you store a timestamp on the server,\r\n *   say 201507081456, which is really hard to read. A formatter can convert that into many different formats, say,\r\n *   07/08/2015 14:56. In the state machine we only use one filter that converts an id of a class to its respective\r\n *   name. For example, id of 0 to State_Empty to use for the start and end states. Below is the function that does this\r\n */\n\nangular.module('app').filter('friendlyClass', friendlyClass);\n\nfriendlyClass.$inject = ['StateMachineService'];\n\nfunction friendlyClass(StateMachineService) {\n    var manager = StateMachineService;\n\n    return function (x) {\n        var res = manager.getClassById(x);\n\n        if (res) return res.name;else return null;\n    };\n}","'use strict';\n\nangular.module('app').filter('parseFilter', parseFilter);\n\nparseFilter.$inject = [];\n\nfunction parseFilter() {\n    return function (x) {\n        var y = angular.copy(x);\n        delete y.object;\n        return y;\n    };\n}","'use strict';\n\n/*\r\n *   State Machine Runs\r\n *\r\n *   Authors: Guido Ruiz\r\n *\r\n *   Description: Runs are configurations that are taken in by module dependencies. We have x-editable, which is an\r\n *   angular addon module that allows to edit text on the spot. We use this for the state graph details section where\r\n *   you can add a name, description, code to run before, after, etc. This x-editable module can take settings before\r\n *   it loads, which happens in the 'editableOptions' inject as seen below.\r\n */\n\nangular.module('app').run(xeditSettings);\n\nxeditSettings.$inject = ['editableOptions'];\n\nfunction xeditSettings(editableOptions) {\n  editableOptions.theme = 'bs3';\n}","'use strict';\n\nangular.module('app').service('characterService', characterService);\n\ncharacterService.$inject = [];\n\nfunction characterService() {\n    var counselors = [{\n        id: \"001_FEMALE_CAU\",\n        name: \"Amy\",\n        //description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque felis ex, cursus a \" + \"turpis ac, laoreet sollicitudin ipsum. Cras hendrerit eget elit ut pretium. Proin vel diam consectetur, \" + \"pharetra magna et, placerat tellus. Donec dignissim tempus dolor, ac interdum dui sagittis in. In maximus \" + \"diam sed lacus mollis maximus. Nunc gravida varius lorem vitae bibendum. Nunc sit amet mattis ipsum, eu \" + \"pellentesque ex. Cras porta condimentum neque, nec mattis eros suscipit eu. Curabitur ac elementum sem. \",\n        img: \"unity/img/001_FEMALE_CAU.PNG\",\n        type: \"virtualys\",\n        // path: \"unity/sources/001_FEMALE_CAU_2017_11_22/\",\n        path: \"unity/sources/001_FEMALE_CAU_2019_05_06/\",\n        scene: \"scene_001_FEMALE_CAU\",\n        voiceIndex: 5\n    }];\n\n    var selectedCounselor = counselors[0];\n    var foundCounselor = false;\n\n    var setUsersCounselor = function setUsersCounselor(index) {\n        /*for(var i = 0; i < counselors.length; i++){\r\n            if(charID == counselors[i].id){\r\n                selectedCounselor = counselors[i];\r\n                foundCounselor = true;\r\n                // changeName(counselors[i].name);\r\n                return 0;\r\n            }\r\n        }\r\n        if(!foundCounselor){\r\n            selectedCounselor = counselors[0];\r\n            return 1;\r\n        }*/\n\n        selectedCounselor = counselors[index];\n        return 0;\n    };\n\n    var getUsersCounselor = function getUsersCounselor() {\n        if (selectedCounselor != null) {\n            return selectedCounselor;\n        } else {\n            return counselors[0];\n        }\n    };\n\n    return {\n        counselors: counselors,\n        setUsersCounselor: setUsersCounselor,\n        getUsersCounselor: getUsersCounselor\n    };\n}","'use strict';\n\nangular.module('app').service('ctService', ctService);\n\nctService.$inject = [];\n\nfunction ctService() {\n    var obj = {\n        editor: null,\n        elementID: null,\n\n        stopEditing: function stopEditing() {\n            console.log(\"Stopped editing\");\n            if (this.editor.isEditing()) this.editor.stop(this.save);\n        },\n        startEditing: function startEditing() {\n            console.log(\"Started editing\");\n            //this.init('*[data-editable]', 'data-name', null, false);\n            if (!this.editor.isEditing()) this.editor.start();\n        },\n        save: function save() {\n            this.showAlert(true);\n            return angular.element(this.elementID)[0].innerHTML;\n        },\n        initHTML: function initHTML(defaultHTML) {\n            angular.element(this.elementID)[0].innerHTML = defaultHTML;\n        },\n        showAlert: function showAlert(success) {\n            if (success) {\n                console.log(\"Saved\");\n                new ContentTools.FlashUI('ok');\n            } else {\n                console.log(\"Not Saved\");\n                new ContentTools.FlashUI('no');\n            }\n        },\n        init: function init(query, naming, fixture, ignition, elementID) {\n            ContentTools.StylePalette.add([new ContentTools.Style('Author', 'author', ['p'])]);\n\n            this.editor = ContentTools.EditorApp.get();\n            this.editor.init(query, naming, fixture, ignition);\n            this.elementID = elementID;\n        }\n    };\n\n    return obj;\n}","'use strict';\n\nangular.module('app').service('GWYWService', GWYWService);\n\nGWYWService.$inject = [];\n\nfunction GWYWService() {\n\n    //stores the users answers to The Good Things About Drinking Questionnaire\n    var defaultAnswers = [{\n        response: \"To reduce my stress levels\",\n        dragID: \"drag1\"\n    }, {\n        response: \"To adjust my attitude\",\n        dragID: \"drag2\"\n    }, {\n        response: \"To be more sociable\",\n        dragID: \"drag3\"\n    }, {\n        response: \"To enjoy sex more\",\n        dragID: \"drag4\"\n    }, {\n        response: \"To be more assertive\",\n        dragID: \"drag5\"\n    }, {\n        response: \"To get high\",\n        dragID: \"drag6\"\n    }, {\n        response: \"To be more creative\",\n        dragID: \"drag7\"\n    }, {\n        response: \"To be a better lover\",\n        dragID: \"drag8\"\n    }, {\n        response: \"To be braver or more daring\",\n        dragID: \"drag9\"\n    }, {\n        response: \"To sleep\",\n        dragID: \"drag10\"\n    }, {\n        response: \"To forget\",\n        dragID: \"drag11\"\n    }, {\n        response: \"To feel better\",\n        dragID: \"drag12\"\n    }, {\n        response: \"To fight boredom\",\n        dragID: \"drag13\"\n    }, {\n        response: \"To escape\",\n        dragID: \"drag14\"\n    }, {\n        response: \"To be more relaxed in social situations\",\n        dragID: \"drag15\"\n    }, {\n        response: \"To feel accepted\",\n        dragID: \"drag16\"\n    }, {\n        response: \"To have fun\",\n        dragID: \"drag17\"\n    }, {\n        response: \"To fit in\",\n        dragID: \"drag18\"\n    }];\n\n    //stores the users answers to What I Like About Drinking in The Good Things Revisited Survey\n    //need to grab these responses from the database\n    var usersAnswers = [];\n\n    return {\n        defaultAnswers: defaultAnswers,\n        addUsersAnswer: function addUsersAnswer(answer) {\n            var addIndex = usersAnswers.length;\n            usersAnswers[addIndex] = answer;\n        },\n        removeUsersAnswer: function removeUsersAnswer(elemIndex) {\n            usersAnswers.splice(elemIndex, 1);\n        },\n        getUsersAnswers: function getUsersAnswers() {\n            return usersAnswers;\n        }\n\n    };\n}","'use strict';\n\n/*\r\n *  State Machine Services\r\n *\r\n *  Authors: Guido Ruiz\r\n *\r\n *  Description: This service is a self contained resource that has the actual <nodes> and <edges>, their names, ids,\r\n *  and logic as well as code and comments. This service has a series of classes that are called by the machine\r\n *  controller to add a new node, remove a node, add a transition, remove transition, reset a node, change the x,y\r\n *  position of a node, keeps what node is selected, etc. All this logic is self sustained here as a service, which\r\n *  means the machine controller is essentially a Facade to the complex logic of this service. The name of each function\r\n *  should be self explanatory.\r\n *\r\n *  I highly suggest you keep each block minimized in the editor and only open the one you're interested in\r\n */\n\nangular.module('app').service('StateMachineService', StateMachineService);\n\nStateMachineService.$inject = [];\n\nfunction StateMachineService() {\n    var _this = this;\n\n    this.showLoad = true;\n    this.showAdded = false;\n    this.showSettings = false;\n    this.selected = null;\n    this.instance = null;\n    this.nodeId = \"1\";\n    this.transId = \"1\";\n    this.left = 50;\n    this.top = 50;\n    this.lastExpression = \"\";\n    this.transitionIdToObject = {};\n    this.added = [];\n    this.sm = {};\n\n    this.guardTypes = [\"Conditional Guard\", \"Event Guard\"];\n\n    this.incrementNID = function () {\n        return _this.nodeId++;\n    };\n    this.incrementTID = function () {\n        return _this.transId++;\n    };\n\n    this.addNodeAngular = function (class_id) {\n        // add state to angular array\n        var state = {};\n\n        state.name = \"nodeId_\" + _this.nodeId;\n        state.id = \"nodeId_\" + _this.nodeId;\n        state.plumbleft = _this.left + \"px\";\n        state.plumbtop = _this.top + \"px\";\n        state.class = class_id;\n        state.params = [];\n\n        var c = _this.getClassById(class_id);\n        c.init.params.forEach(function (p) {\n            return state.params.push(\"\");\n        });\n\n        _this.sm.init.states.push(state);\n\n        _this.left += 10;\n        _this.top += 10;\n    };\n    this.addNodePlumb = function (el) {\n        _this.instance.draggable(el, {\n            drag: function drag(e) {\n                var state = _this.sm.init.states.find(function (s) {\n                    return s.id == e.el.id;\n                });\n\n                if (state) {\n                    state.plumbleft = e.pos[0] + \"px\";\n                    state.plumbtop = e.pos[1] + \"px\";\n                }\n            }\n        });\n\n        _this.instance.makeSource(el, {\n            filter: \".ep\",\n            anchor: \"Continuous\",\n            connectorStyle: {\n                strokeStyle: \"#5c96bc\",\n                lineWidth: 2,\n                outlineColor: \"transparent\",\n                outlineWidth: 4\n            },\n            connectionType: \"basic\",\n            extract: {\n                \"action\": \"the-action\"\n            },\n            maxConnections: -1,\n            onMaxConnections: function onMaxConnections(info, e) {\n                return alert(\"Maximum connections (\" + info.maxConnections + \") reached\");\n            }\n        });\n\n        _this.instance.makeTarget(el, {\n            dropOptions: {\n                hoverClass: \"dragHover\"\n            },\n            anchor: \"Continuous\",\n            allowLoopback: true\n        });\n\n        _this.incrementNID();\n    };\n    this.removeNode = function (name) {\n        _this.sm.init.states.splice(_this.sm.init.states.indexOf(name), 1);\n    };\n\n    this.addTransition = function (source, target) {\n        var transition = {};\n\n        transition.id = \"transId_\" + _this.transId;\n        transition.from = source;\n        transition.to = target;\n        transition.guard = {\n            \"type\": \"\",\n            \"expression\": \"\",\n            \"onTransition\": \"\"\n        };\n\n        _this.sm.init.transitions.push(transition);\n    };\n    this.removeTransition = function (id) {\n        var transIndex = _this.sm.init.transitions.findIndex(function (t) {\n            return t.id == id;\n        });\n\n        if (transIndex > -1) _this.sm.init.transitions.splice(transIndex, 1);\n    };\n\n    this.getParameterById = function (x, y) {\n        return _this.added.find(function (a) {\n            return a.object.id == x;\n        }).init.params[y] || null;\n    };\n    this.getClassById = function (x) {\n        return _this.added.find(function (a) {\n            return a.object.id == x;\n        }) || null;\n    };\n\n    this.reset = function () {\n        _this.showLoad = true;\n        _this.showAdded = false;\n        _this.showSettings = false;\n        _this.selected = null;\n        _this.instance = null;\n        _this.nodeId = \"1\";\n        _this.transId = \"1\";\n        _this.left = 50;\n        _this.top = 50;\n        _this.lastExpression = \"\";\n        _this.transitionIdToObject = {};\n        _this.added = [];\n        _this.sm = {};\n    };\n}","'use strict';\n\nangular.module('app').service('ScoreService', ScoreService);\n\nScoreService.$inject = ['$q'];\n\nfunction ScoreService($q) {\n    this.formscore = function (user, form) {\n        var deferred = $q.defer();\n\n        Parse.Cloud.run('calculateFormScore', { user: user, form: form }).then(function (score) {\n            return deferred.resolve(score);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n        return deferred.promise;\n    };\n}","'use strict';\n\nangular.module('app').service('ScoreService', ScoreService);\n\nScoreService.$inject = ['$q'];\n\nfunction ScoreService($q) {\n    this.calculateFormScore = function (formID) {\n        var deferred = $q.defer();\n\n        Parse.Cloud.run('calculateFormScore', { formID: formID }).then(function (score) {\n            return deferred.resolve(score);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n}","'use strict';\n\n/*\r\n *  Counseling Services\r\n *\r\n *  Authors: Guido Ruiz, Daniel Rivero\r\n *\r\n *  Description: Pretty much code that has been split away from the counseling controller, as it is tightly coupled with\r\n *  just getting HTML injects on the page and modifying them as such. Think of the HTML injects as building blocks that\r\n *  can be changed (their size, color, shape, what they do when they are clicked, etc) and these properties are\r\n *  maintained and modified in here. Therefore, the counseling controller, given a series of HTML modules to show,\r\n *  loads them from the client and stores them here, modifying the values whenever needed. For example, the eEva WebGL\r\n *  Unity scene is an HTML inject module, and the size is modified from fullscreen to halfscreen with the change of\r\n *  a parameter within this service.\r\n *\r\n *  Format: The format is as follows:\r\n *      <HTML block>:\r\n *          <id>: uniquely identifies the block\r\n *          <hidden>: dictates if the element is visible or not\r\n *          <content>: Actual HTML for the element, a.k.a <http><a href=\"\"></a> .....\r\n *          <classes>: The classes that modify the block found on the main css file\r\n *          <fetch>: When called, replaces <content> with HTML fetched from the .html file\r\n *          <click>: When the 'block' is clicked, handle the click.\r\n *\r\n *  I highly suggest you keep each block minimized in the editor and only open the one you're interested in\r\n */\n\nangular.module('app').service('widgetService', widgetService);\n\nwidgetService.$inject = ['$sce', '$templateRequest', '$state', '$window'];\n\nfunction widgetService($sce, $templateRequest, $state) {\n    var obj = {\n        // ----- MENU ITEMS ----- //\n        userButton: {\n            id: 'userButton',\n            hidden: false,\n            content: \"\",\n            classes: { 'userButton-hidden': false },\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/menu/user.image.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                    console.log(\"Content has been replaced!\");\n                });\n            },\n            click: function click() {\n                var self = this;\n                var userMenu = obj.userMenu;\n                var cameraMenu = obj.cameraMenu;\n                var cameraButton = obj.cameraButton;\n\n                //css manipulation for displaying the widgets\n                userMenu.classes['userMenu-hidden'] = !userMenu.classes['userMenu-hidden'];\n                self.classes['userButton-hidden'] = !self.classes['userButton-hidden'];\n\n                if (self.classes['userButton-hidden']) {\n                    cameraMenu.classes['cameraMenu-hidden'] = true;\n                } else if (!self.classes['userButton-hidden']) {\n                    if (cameraButton.classes['cameraButton-hidden']) cameraMenu.classes['cameraMenu-hidden'] = false;\n                }\n\n                if (!self.classes['userButton-hidden']) userMenu.classes['userMenu-hidden'] = true;\n            }\n        },\n        cameraButton: {\n            id: 'cameraButton',\n            hidden: false,\n            content: \"\",\n            classes: { 'cameraButton-hidden': false },\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/menu/camera.image.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                    console.log(\"Content has been replaced!\");\n                });\n            },\n            click: function click() {\n                var self = this;\n                var cameraMenu = obj.cameraMenu;\n                var userMenu = obj.userMenu;\n                var userButton = obj.userButton;\n\n                //css manipulation for displaying the widgets\n                cameraMenu.classes['cameraMenu-hidden'] = !cameraMenu.classes['cameraMenu-hidden'];\n                self.classes['cameraButton-hidden'] = !self.classes['cameraButton-hidden'];\n\n                if (self.classes['cameraButton-hidden']) userMenu.classes['userMenu-hidden'] = true;else if (!self.classes['cameraButton-hidden']) if (userButton.classes['userButton-hidden']) userMenu.classes['userMenu-hidden'] = false;\n\n                if (!this.classes['cameraButton-hidden']) cameraMenu.classes['cameraMenu-hidden'] = true;\n            }\n        },\n        userMenu: {\n            id: 'userMenu',\n            hidden: false,\n            content: '',\n            classes: { 'userMenu-hidden': true },\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/menu/user.menu.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                });\n            },\n            click: function click() {}\n        },\n        cameraMenu: {\n            id: 'cameraMenu',\n            hidden: false,\n            content: '',\n            classes: { 'cameraMenu-hidden': true },\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/menu/user.camera.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                });\n            },\n            click: function click() {}\n        },\n        //removing pause since doesn't work slunn002 04/23/2018\n\n        // pauseButton: {\n        //     id: 'pauseButton',\n        //     hidden: false,\n        //     content: '',\n        //     classes: { 'pauseButton-hidden' :false },\n        //     fetch: function(){\n        //         var self =this;\n        //         $templateRequest('/views/partials/menu/pause.button.html')\n        //             .then(function(template){\n        //                     self.content = $sce.trustAsHtml(template);\n        //                     console.log(\"Pause button has been replaced!\");\n        //                 }\n        //             );\n        //     },\n        //     click: function() {\n        //         var self = this;\n        //         var resumeButton = obj.resumeButton;\n        //         //window.confirm(\"Voice paused!\");\n        //         resumeButton.classes['resumeButton-hidden'] = !resumeButton.classes['resumeButton-hidden'];\n        //         self.classes['pauseButton-hidden'] = !self.classes['pauseButton-hidden'];\n        //     }\n        // },\n        // resumeButton: {\n        //     id: 'resumeButton',\n        //     hidden: false,\n        //     content: '',\n        //     classes: { 'resumeButton-hidden': true},\n        //     fetch: function() {\n        //         var self = this;\n        //         $templateRequest('/views/partials/menu/resume.button.html')\n        //             .then(function(template){\n        //                     self.content = $sce.trustAsHtml(template);\n        //                 }\n        //             );\n        //     },\n        //     click: function() {\n        //         var self = this;\n        //         var pauseButton = obj.pauseButton;\n        //         //window.confirm(\"Voice paused!\");\n        //\n        //\n        //         //css manipulation for displaying the widgets\n        //         pauseButton.classes['pauseButton-hidden'] = !pauseButton.classes['pauseButton-hidden'];\n        //         self.classes['resumeButton-hidden'] = !self.classes['resumeButton-hidden'];\n        //     }\n        // },\n        micButton: {\n            id: 'micButton',\n            hidden: false,\n            content: '',\n            classes: { 'micButton-hidden': false },\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/menu/mic.button.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                    console.log(\"Microphone button has been replaced!\");\n                });\n            },\n            click: function click() {\n                if (!this.classes['micButton-hidden']) {\n                    this.classes['micButton-hidden'] = true;\n                    console.log(\"Microphone switch on\");\n                } else if (this.classes['micButton-hidden']) {\n                    this.classes['micButton-hidden'] = false;\n                    console.log(\"Microphone switch off\");\n                }\n            }\n        },\n        micSlash: {\n            id: 'micSlash',\n            hidden: false,\n            content: '',\n            classes: { 'micSlash-hidden': false },\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/menu/micSlash.button.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                    console.log(\"Microphone Slash button has been replaced!\");\n                });\n            },\n            click: function click() {}\n        },\n        backButton: {\n            id: 'backButton',\n            hidden: false,\n            content: '',\n            classes: '',\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/menu/back.button.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                });\n            },\n            click: function click() {}\n        },\n        progressBar: {\n            id: 'progressBar',\n            hidden: false,\n            content: '',\n            classes: '',\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/menu/progress.bar.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                });\n            },\n            click: function click() {}\n        },\n        // ----- MISC ITEMS ----- //\n        elementPanel: {\n            id: 'elementPanel',\n            hidden: true,\n            content: '',\n            classes: {},\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('views/partials/misc/element.panel.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                });\n            },\n            click: function click() {}\n        },\n        contentView: {\n            id: 'contentView',\n            hidden: false,\n            content: '',\n            classes: { 'contentView': true },\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('views/partials/misc/content.panel.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                });\n            },\n            click: function click() {}\n        },\n        navBar: {\n            id: 'navBar',\n            hidden: false,\n            content: '',\n            classes: {},\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/misc/navbar.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                });\n            },\n            click: function click() {}\n        },\n        myProgress: {\n            id: 'myProgress',\n            hidden: true,\n            content: '',\n            classes: {},\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/misc/myprogress.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                });\n            },\n            click: function click() {}\n        },\n\n        // ----- VIRTUALYS ----- //\n        virtualys: {\n            id: 'virtualys',\n            hidden: false,\n            content: '',\n            classes: { 'unityEva': true, 'ue-full': true, 'ue-half': false },\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/chars/virtualys.webgl.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                });\n            },\n            click: function click() {}\n        },\n\n        // ----- HAPTEK ----- //\n        webglEva: {\n            id: 'webgl-app',\n            hidden: false,\n            content: '',\n            classes: { 'webglEva': true },\n            fetch: function fetch() {\n                var self = this;\n                $templateRequest('/views/partials/chars/eva.webgl.html').then(function (template) {\n                    self.content = $sce.trustAsHtml(template);\n                });\n            },\n            click: function click() {}\n        },\n\n        // ----- HELPER FUNCTIONS ----- //\n        htmls: [],\n        htmlUsed: function htmlUsed(id) {\n            return $state.current.data.htmlModules.indexOf(id) >= 0;\n        },\n        fetchAll: function fetchAll() {\n            for (var widget in obj) {\n                if (obj[widget].id != undefined && obj.htmlUsed(obj[widget].id)) {\n                    obj[widget].fetch();\n                    obj.htmls.push(obj[widget]);\n                }\n            }\n        }\n    };\n\n    return obj;\n}","'use strict';\n\nangular.module('app').controller('treeViewController', treeViewController);\n\ntreeViewController.$inject = ['$scope', '$http', 'InterventionService', 'FormService', 'ElementService'];\n\nfunction treeViewController($scope, $http, InterventionService, FormService, ElementService) {\n    $scope.showTree = false;\n    $scope.roleList = [];\n    $scope.buttonText = \"\";\n    $scope.interventionSrv = InterventionService;\n    $scope.formSrv = FormService;\n    $scope.elSrv = ElementService;\n\n    /*console.log(\"starting the tree view controller\");\r\n    let interventions = $scope.interventionSrv.getAllInterventions();\r\n      for(var i = 0; i < interventions.length; i++){\r\n          $scope.roleList.push({\r\n            roleName: interventions[i].name,\r\n            roleId: interventions[i].id,\r\n            collapsed: true,\r\n            children: []\r\n        });\r\n          var tmpChildren = $scope.formSrv.getFormsByIntervention(interventions[i]);\r\n          for(var j = 0; j < tmpChildren.length; j++){\r\n            $scope.roleList[i].children.push({\r\n                roleName:tmpChildren[j].name,\r\n                roleId: tmpChildren[j].id,\r\n                collapsed: true,\r\n                children: []\r\n            });\r\n        }\r\n          for(var k = 0; $scope.roleList[i].children.length; k++){\r\n            var elTmpChildren = $scope.elSrv.getElementsByForm($scope.roleList[i].children[k]);\r\n              for(var l = 0; elTmpChildren.length; l++){\r\n                $scope.roleList[i].children[k].push({\r\n                    roleName: $scope.getElementDescription(elTmpChildren[l]),\r\n                    roleId: elTmpChildren[l].id,\r\n                    roleType: elTmpChildren[l].type,\r\n                    roleOrder: elTmpChildren[l].order,\r\n                    collapsed: true,\r\n                    children: []\r\n                });\r\n            }\r\n          }\r\n        }*/\n\n    console.log($scope.roleList);\n\n    /*$http.get('/api/interventions').then(\r\n        function(success) {\r\n            for(var i = 0; i < success.data.length; ++i){\r\n                $scope.roleList.push({\r\n                    roleName: success.data[i].name,\r\n                    roleId: success.data[i]._id,\r\n                    collapsed: true,\r\n                    children: []\r\n                });\r\n            }\r\n        },\r\n        function (err) {\r\n          }\r\n    );*/\n\n    /* $http.get('/api/forms').then(\r\n         function(success){\r\n             //TODO Design faster algorithm\r\n             for(var i = 0; i < $scope.roleList.length; ++i) {\r\n                 for(var j = 0; j < success.data.length; ++j) {\r\n                     if( $scope.roleList[i].roleId == success.data[j].intervention_id){\r\n                         $scope.roleList[i].children.push({\r\n                             roleName:success.data[j].name,\r\n                             roleId: success.data[j]._id,\r\n                             collapsed: true,\r\n                             children: []\r\n                         });\r\n                     }\r\n                 }\r\n             }\r\n         },\r\n         function(err){}\r\n     );*/\n    /*\r\n        $http.get('/api/elements').then(\r\n         function(success){\r\n             //TODO Design faster algorithm\r\n             for(var i = 0; i < $scope.roleList.length; ++i) {\r\n                 for(var j = 0; j < $scope.roleList[i].children.length; ++j) {\r\n                     for(var k = 0; k < success.data.length; ++k) {\r\n                         if( $scope.roleList[i].children[j].roleId == success.data[k].form_id){\r\n                             $scope.roleList[i].children[j].children.push({\r\n                                 roleName: $scope.getElementDescription(success.data[k]),\r\n                                 roleId: success.data[k]._id,\r\n                                 roleType: success.data[k].type,\r\n                                 roleOrder: success.data[k].order,\r\n                                 collapsed: true,\r\n                                 children: []\r\n                             });\r\n                         }\r\n                     }\r\n                 }\r\n             }\r\n         },\r\n         function (err) {\r\n           }\r\n     );\r\n    */\n\n    $scope.getElementDescription = function (dataElement) {\n        if (dataElement.type == \"QuestionAnswer\") return dataElement.order + \": \" + dataElement.phrase;else if (dataElement.type == \"QuestionAnswer-Checkbox\") return dataElement.order + \": \" + dataElement.phrase;else if (dataElement.type == \"textArea\") return dataElement.order + \": \" + dataElement.phrase;else if (dataElement.type == \"feedback\") return dataElement.order + \": \" + dataElement.phrase;else if (dataElement.type == \"feedbackList\") return dataElement.order + \": \" + dataElement.phrase[0].feedback_text;\n\n        return \"Unknown data element\";\n    };\n}","'use strict';\n\n/*\r\n *   Home Controllers\r\n *\r\n *   Authors: Guido Ruiz\r\n *\r\n *   Description: This angular controller controls the main index page. At the time of writing this description, it only\r\n *   has a simple login interface and links to other pages once logged in.\r\n */\nangular.module('app').controller('passwordController', passwordController);\n\npasswordController.$inject = ['$scope', '$http', '$stateParams', '$state'];\n\nfunction passwordController($scope, $http, $stateParams, $state) {\n    $scope.newPassword = \"\";\n    $scope.confirmPassword = \"\";\n\n    /*$scope.resetPassword = function(){\r\n        var obj = {\r\n            token: $stateParams.token,\r\n            password: $scope.newPassword,\r\n            confirm: $scope.confirmPassword\r\n        };\r\n          $http.post('/auth/password/complete', obj)\r\n            .then(function(res){\r\n                console.log(res);\r\n                $state.go('login');\r\n            })\r\n            .catch(function(err){\r\n                console.log(err);\r\n                $state.go('login');\r\n            })\r\n    }*/\n}","'use strict';\n\n/*\r\n *   Shared Controllers\r\n *\r\n *   Authors: Guido Ruiz, Daniel Rivero\r\n *\r\n *   Description: Here lies all the controllers that manage all pages. Essentially, functionality that needs to be\r\n *   accessed by all other controllers are here (think of it like the dad of controllers, or an abstract class, etc.)\r\n *   At the time of writing this, the only thing that is shared between all controllers is the admin navigation bar\r\n *   in which the adminNavController handles the logout feature (button) on the right side.\r\n */\n\nangular.module('app').controller('loginPopUpController', loginPopUpController);\nangular.module('app').controller('registerPopUpController', registerPopUpController);\nangular.module('app').controller('aboutUsPopUpController', aboutUsPopUpController);\nangular.module('app').controller('adPolicyPopUpController', adPolicyPopUpController);\nangular.module('app').controller('privacyPopUpController', privacyPopUpController);\nangular.module('app').controller('copyrightPopUpController', copyrightPopUpController);\nangular.module('app').controller('limitationsPopUpController', limitationsPopUpController);\nangular.module('app').controller('notYetMappedController', notYetMappedController);\n\nloginPopUpController.$inject = ['$scope', '$window', 'AuthService', '$uibModalInstance', '$timeout'];\nregisterPopUpController.$inject = ['$scope', '$window', 'AuthService', '$uibModalInstance'];\naboutUsPopUpController.$inject = ['$scope', '$window', '$uibModalInstance'];\nadPolicyPopUpController.$inject = ['$scope', '$window', '$uibModalInstance'];\nprivacyPopUpController.$inject = ['$scope', '$window', '$uibModalInstance'];\ncopyrightPopUpController.$inject = ['$scope', '$window', '$uibModalInstance'];\nlimitationsPopUpController.$inject = ['$scope', '$window', '$uibModalInstance'];\nnotYetMappedController.$inject = ['$scope', '$window'];\n\nfunction loginPopUpController($scope, $window, AuthService, $uibModalInstance, $timeout) {\n    $scope.auth = AuthService;\n    $scope.isLoggedIn = false;\n\n    $scope.alerts = [];\n    $scope.addAlert = function (alert) {\n        $scope.alerts.push(alert);\n        $timeout(function () {\n            $scope.alerts.splice($scope.alerts.indexOf(alert), 1);\n        }, 2500);\n    };\n\n    $scope.credentials = {\n        username: \"\",\n        password: \"\"\n    };\n\n    /* $scope.login = function()\r\n     {\r\n         console.log(\"*******************************************************\");\r\n         console.log(\"Attempting to login\");\r\n         $scope.auth.login($scope.credentials).then(\r\n             success => {\r\n                 $scope.currentUser = $scope.auth.currentUser();\r\n                 $window.location.href = '/';\r\n             },\r\n             error => $scope.currentUser = $scope.auth.currentUser()\r\n         );\r\n       };*/\n\n    $scope.login = function () {\n        return AuthService.login($scope.credentials).then(function (success) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.userFname = AuthService.userFname;\n\n            //console.log($scope.currentUser.get('firstName'));\n            $scope.isLoggedIn = true;\n            $scope.addAlert({\n                style: \"alert-success\",\n                type: \"Success!\",\n                message: \"You have successfully logged in!\"\n            });\n\n            /*Parse.Cloud.run(\"getUserName\", {}).then(function (e){\r\n               $scope.userFName = e.userGivenName;\r\n                console.log(\"userFname: \" +  $scope.userFName);\r\n            });*/\n            //$scope.cancel();\n        }, function (error) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error\n            });\n            $scope.isLoggedIn = false;\n        });\n    };\n\n    $scope.logout = function () {\n        return AuthService.logout($scope.credentials).then(function (success) {\n            $scope.currentUser = {};\n            $scope.userFname = \"\";\n\n            $scope.isLoggedIn = false;\n            $scope.addAlert({\n                style: \"alert-success\",\n                type: \"Success!\",\n                message: \"You have successfully logged out!\"\n            });\n        }, function (error) {\n            //$scope.currentUser = AuthService.currentUser();\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error\n            });\n        });\n    };\n\n    $scope.logout = function () {\n        $scope.auth.logout().then(function (success) {\n            $scope.currentUser = $scope.auth.currentUser();\n            $window.location.href = '/';\n            $scope.addAlert({\n                style: \"alert-success\",\n                type: \"Success!\",\n                message: \"You have successfully logged out!\"\n            });\n        }, function (error) {\n            $scope.currentUser = $scope.auth.currentUser();\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error\n            });\n        });\n    };\n\n    $scope.ok = function () {\n        $uibModalInstance.close();\n    };\n    $scope.cancel = function () {\n        $uibModalInstance.dismiss('cancel');\n    };\n}\n\nfunction registerPopUpController($scope, $window, AuthService, $uibModalInstance) {\n    $scope.auth = AuthService;\n\n    $scope.profile = { \"answers\": [] };\n    $scope.$root.userResponse = \"hello\";\n    $scope.credentials = {\n        firstname: \"\",\n        //lastname: \"\",\n        username: \"\",\n        password: \"\",\n        email: \"\",\n        education: \"\",\n        gender: \"\",\n        dateOfBirth: \"\",\n        age: \"\",\n        weight: \"\",\n        height: {\n            total: 0,\n            feet: \"\",\n            inches: \"\"\n        },\n        ethnicity: \"\",\n        race: \"\",\n        maritalstatus: \"\"\n    };\n\n    $scope.educationType = ['Some high school', 'High school graduate or equivalent', 'Trade or Vocational degree', 'Some college', 'Associate degree', 'Bachelor\\'s degree', 'Graduate or professional degree'];\n    $scope.selectedEducation = \"\";\n\n    $scope.genderType = ['Male', 'Female', 'Other'];\n    $scope.selectedGender = \"\";\n\n    $scope.ethnicityType = ['Hispanic or Latino', 'Not Hispanic or Latino'];\n    $scope.selectedEthnicity = \"\";\n\n    $scope.raceType = ['American Indian or Alaska Native', 'Asian', 'Black or African Descent', 'Native Hawaiian or Other Pacific Islander', 'White'];\n    $scope.selectedRace = [];\n\n    $scope.maritalType = ['Single, Not Married', 'Married', 'Living with partner', 'Separated', 'Divorced', 'Widowed', 'Prefer not to answer'];\n    $scope.selectedMaritalStatus = \"\";\n\n    $scope.selectedAnwser = \"\";\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // called when the user clicks the register button. registers the user into the server\n    // -----------------------------------------------------------------------------------------------------------------\n\n    $scope.register = function () {\n\n        $scope.hasRegistered = false;\n        $scope.credentials.answers = $scope.profile.answers;\n        $scope.credentials.education = $scope.selectedEducation;\n        $scope.credentials.gender = $scope.selectedGender;\n        $scope.credentials.ethnicity = $scope.selectedEthnicity;\n        $scope.credentials.race = $scope.selectedRace;\n        $scope.credentials.maritalstatus = $scope.selectedMaritalStatus;\n        $scope.credentials.programRequired = $scope.selectedAnwser;\n        //console.log($scope.credentials);\n\n\n        AuthService.register($scope.credentials).then(function (success) {\n\n            $scope.hasRegistered = true;\n            $scope.addAlert({\n                style: \"alert-success\",\n                type: \"Success!\",\n                message: success.message\n            });\n\n            //$scope.login();\n\n        }, function (error) {\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error.message\n            });\n        });\n        //uncommented slunn002 04/23/2018\n        /*$scope.auth.register($scope.credentials)\r\n            // .then(\r\n            //     function(res) {\r\n            //         var data = res.data;\r\n            //\r\n            //         if(data.success) {\r\n            //             $scope.addAlert({\r\n            //                 style: \"alert-success\",\r\n            //                 type: \"Success!\",\r\n            //                 message: data.message\r\n            //             });\r\n            //         } else {\r\n            //             $scope.addAlert({\r\n            //                 style: \"alert-danger\",\r\n            //                 type: \"Error:\",\r\n            //                 message: data.message\r\n            //             });\r\n            //         }\r\n            //\r\n            //         return res;\r\n            //     },\r\n            //     function(err) {\r\n            //         $scope.addAlert({\r\n            //             style: \"alert-danger\",\r\n            //             type: \"Error:\",\r\n            //             message: \"The servers are currently down.\"\r\n            //         });\r\n            //\r\n            //         return err;\r\n            //     }\r\n            // );*/\n    };\n    //uncommented slunn002 04/23/2018\n    $scope.credentials = {\n        username: \"\",\n        password: \"\"\n    };\n\n    $scope.login = function () {\n        console.log(\"Attempting to login\");\n        $scope.auth.login($scope.credentials).then(function (success) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.isLoggedIn = true;\n            $scope.addAlert({\n                style: \"alert-success\",\n                type: \"Success!\",\n                message: \"You have successfully logged in!\"\n            });\n        }, function (error) {\n            $scope.currentUser = AuthService.currentUser();\n            $scope.addAlert({\n                style: \"alert-danger\",\n                type: \"Error:\",\n                message: error\n            });\n            $scope.isLoggedIn = false;\n        });\n        //$window.location.href = '/';\n    };\n\n    $scope.logout = function () {\n        $scope.auth.logout();\n        $window.location.href = '/';\n    };\n\n    $scope.close = function () {\n        $modalInstance.close();\n    };\n\n    $scope.ok = function () {\n        $uibModalInstance.close();\n    };\n    $scope.cancel = function () {\n        $uibModalInstance.dismiss('cancel');\n    };\n}\n\nfunction aboutUsPopUpController($scope, $window, $uibModalInstance) {\n\n    $scope.close = function () {\n        $modalInstance.close();\n    };\n\n    $scope.ok = function () {\n        $uibModalInstance.close();\n    };\n    $scope.cancel = function () {\n        $uibModalInstance.dismiss('cancel');\n    };\n}\n\nfunction adPolicyPopUpController($scope, $window, $uibModalInstance) {\n\n    $scope.close = function () {\n        $modalInstance.close();\n    };\n\n    $scope.ok = function () {\n        $uibModalInstance.close();\n    };\n    $scope.cancel = function () {\n        $uibModalInstance.dismiss('cancel');\n    };\n}\n\nfunction privacyPopUpController($scope, $window, $uibModalInstance) {\n\n    $scope.close = function () {\n        $modalInstance.close();\n    };\n\n    $scope.ok = function () {\n        $uibModalInstance.close();\n    };\n    $scope.cancel = function () {\n        $uibModalInstance.dismiss('cancel');\n    };\n}\n\nfunction copyrightPopUpController($scope, $window, $uibModalInstance) {\n\n    $scope.close = function () {\n        $modalInstance.close();\n    };\n\n    $scope.ok = function () {\n        $uibModalInstance.close();\n    };\n    $scope.cancel = function () {\n        $uibModalInstance.dismiss('cancel');\n    };\n}\n\nfunction limitationsPopUpController($scope, $window, $uibModalInstance) {\n\n    $scope.close = function () {\n        $modalInstance.close();\n    };\n\n    $scope.ok = function () {\n        $uibModalInstance.close();\n    };\n    $scope.cancel = function () {\n        $uibModalInstance.dismiss('cancel');\n    };\n}\n\nfunction notYetMappedController($scope, $window) {\n\n    $scope.redirect = function (location) {\n        // store in browser cache the location\n        localStorageService.set(\"redirect-page\", location);\n        $window.location.reload();\n    };\n}","'use strict';\n\n/**\r\n * Created by SpeedProxy on 3/27/2017.\r\n */\nangular.module('app').service('AlternativesToGetYouWhereYouWantToGoService', AlternativesToGetYouWhereYouWantToGoService);\n//All these data should be fetched from data base. and not be hardcoded on service. TO DO/CHANGE\nfunction AlternativesToGetYouWhereYouWantToGoService() {\n\n    //stores the users answers to The Good Things About Drinking Questionnaire\n    var defaultAnswers = [{\n        response: \"Meditate\",\n        dragID: \"drag1\"\n    }, {\n        response: \"Call a friend\",\n        dragID: \"drag2\"\n    }, {\n        response: \"Go work out\",\n        dragID: \"drag3\"\n    }, {\n        response: \"Go dancing\",\n        dragID: \"drag4\"\n    }, {\n        response: \"Catch a movie\",\n        dragID: \"drag5\"\n    }, {\n        response: \"Go out to eat\",\n        dragID: \"drag6\"\n    }, {\n        response: \"Play video games\",\n        dragID: \"drag7\"\n    }, {\n        response: \"Go to the mall/shopping\",\n        dragID: \"drag8\"\n    }, {\n        response: \"Listen to/play music\",\n        dragID: \"drag9\"\n    }, {\n        response: \"Play sports\",\n        dragID: \"drag10\"\n    }, {\n        response: \"Attend a sporting event\",\n        dragID: \"drag11\"\n    }, {\n        response: \"Spend time with friends\",\n        dragID: \"drag12\"\n    }, {\n        response: \"Go on AIM/chat\",\n        dragID: \"drag13\"\n    }, {\n        response: \"Facebook\",\n        dragID: \"drag14\"\n    }, {\n        response: \"Act like I've been drinking\",\n        dragID: \"drag15\"\n    }, {\n        response: \"Go for a bike ride\",\n        dragID: \"drag16\"\n    }];\n\n    //stores the users answers to What I Like About Drinking in The Good Things Revisited Survey\n    //need to grab these responses from the database\n    var usersAnswers = [];\n\n    return {\n        defaultAnswers: defaultAnswers,\n        userAnswers: usersAnswers,\n        addUsersAnswer: function addUsersAnswer(answer) {\n            var addIndex = usersAnswers.length;\n            usersAnswers[addIndex] = answer;\n        },\n        removeUsersAnswer: function removeUsersAnswer(elemIndex) {\n            usersAnswers.splice(elemIndex, 1);\n        },\n        getUsersAnswers: function getUsersAnswers() {\n            return usersAnswers;\n        }\n\n    };\n}","'use strict';\n\nangular.module('app').service('GettingWhatYouWantService', GettingWhatYouWantService);\nfunction GettingWhatYouWantService() {\n\n    //stores the users answers to The Good Things About Drinking Questionnaire\n    var defaultAnswers = [{\n        response: \"To reduce my stress levels\",\n        dragID: \"drag1\"\n    }, {\n        response: \"To adjust my attitude\",\n        dragID: \"drag2\"\n    }, {\n        response: \"To be more sociable\",\n        dragID: \"drag3\"\n    }, {\n        response: \"To enjoy sex more\",\n        dragID: \"drag4\"\n    }, {\n        response: \"To be more assertive\",\n        dragID: \"drag5\"\n    }, {\n        response: \"To get high\",\n        dragID: \"drag6\"\n    }, {\n        response: \"To be more creative\",\n        dragID: \"drag7\"\n    }, {\n        response: \"To be a better lover\",\n        dragID: \"drag8\"\n    }, {\n        response: \"To be braver or more daring\",\n        dragID: \"drag9\"\n    }, {\n        response: \"To sleep\",\n        dragID: \"drag10\"\n    }, {\n        response: \"To forget\",\n        dragID: \"drag11\"\n    }, {\n        response: \"To feel better\",\n        dragID: \"drag12\"\n    }, {\n        response: \"To fight boredom\",\n        dragID: \"drag13\"\n    }, {\n        response: \"To escape\",\n        dragID: \"drag14\"\n    }, {\n        response: \"To be more relaxed in social situations\",\n        dragID: \"drag15\"\n    }, {\n        response: \"To feel accepted\",\n        dragID: \"drag16\"\n    }, {\n        response: \"To have fun\",\n        dragID: \"drag17\"\n    }, {\n        response: \"To fit in\",\n        dragID: \"drag18\"\n    }];\n\n    //stores the users answers to What I Like About Drinking in The Good Things Revisited Survey\n    //need to grab these responses from the database\n    var usersAnswers = [{\n        response: \"To be more relaxed in social situations.\",\n        dragID: \"drag1\"\n    }, {\n        response: \"To feel accepted.\",\n        dragID: \"drag2\"\n    }, {\n        response: \"To have fun.\",\n        dragID: \"drag3\"\n    }, {\n        response: \"To fit in.\",\n        dragID: \"drag4\"\n    }];\n\n    return {\n        defaultAnswers: defaultAnswers,\n        userAnswers: usersAnswers,\n        addUsersAnswer: function addUsersAnswer(answer) {\n            var addIndex = usersAnswers.length;\n            usersAnswers[addIndex] = answer;\n        },\n        removeUsersAnswer: function removeUsersAnswer(elemIndex) {\n            usersAnswers.splice(elemIndex, 1);\n        },\n        getUsersAnswers: function getUsersAnswers() {\n            return usersAnswers;\n        }\n\n    };\n}","'use strict';\n\nangular.module('app').directive('personalBACTable', personalBACTable);\n\nfunction personalBACTable() {\n    return {\n        template: '<div class=\"table-container\"><table class=\"table\"> <tr><th class=\"center title-header\" colspan=\"12\">Numbers of Hours You Drink</th></tr>' + '<tr><th rowspan=\"11\" class=\"box-rotate vertical-title-header\"><div><span>Number of Drinks You Might Have</span></div></th><th class=\"EMPTY\"></th> <th class=\"1\">1</th> <th class=\"2\">2' + '</th> <th class=\"3\">3</th> <th class=\"4\">4</th> <th class=\"5\">5</th> <th class=\"6\">6</th> <th class=\"7\">7</th> ' + '<th class=\"8\">8</th> <th class=\"9\">9</th> <th class=\"10\">10</th> </tr><tr> <th >1</th><td>0.013</td>' + '<td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>' + '<tr> <th>2</th><td>0.043</td><td>0.026</td><td>0.009</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0' + '</td></tr><tr> <th >3</th><td>0.073</td><td>0.056</td><td>0.039</td><td>0.022</td><td>0.005</td>' + '<td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr> <th>4</th><td>0.103</td><td>0.086</td>' + '<td>0.069</td><td>0.052</td><td>0.035</td><td>0.018</td><td>0.001</td><td>0</td><td>0</td><td>0</td></tr><tr>' + ' <th >5</th><td>0.133</td><td>0.116</td><td>0.099</td><td>0.082</td><td>0.065</td><td>0.048</td><td>' + '0.031</td><td>0.014</td><td>0</td><td>0</td></tr><tr> <th >6</th><td>0.163</td><td>0.146</td>' + '<td>0.129</td><td>0.112</td><td>0.095</td><td>0.078</td><td>0.061</td><td>0.044</td><td>0.027</td><td>0.01' + '</td></tr><tr> <th >7</th><td>0.193</td><td>0.176</td><td>0.159</td><td>0.142</td><td>0.125</td>' + '<td>0.108</td><td>0.091</td><td>0.074</td><td>0.057</td><td>0.04</td></tr><tr> <th >8</th><td>' + '0.233</td><td>0.206</td><td>0.189</td><td>0.172</td><td>0.155</td><td>0.138</td><td>0.121</td><td>0.104' + '</td><td>0.087</td><td>0.007</td></tr><tr> <th >9</th><td>0.253</td><td>0.236</td><td>0.219' + '</td><td>0.202</td><td>0.185</td><td>0.168</td><td>0.151</td><td>0.134</td><td>0.117</td><td>0.1</td>' + '</tr><tr> <th >10</th><td>0.283</td><td>0.266</td><td>0.249</td><td>0.232</td><td>0.215</td>' + '<td>0.198</td><td>0.181</td><td>0.164</td><td>0.147</td><td>0.13</td></tr></table></div>'\n    };\n}","'use strict';\n\n/*\r\n *   Counseling Controllers\r\n *\r\n *   Authors: Guido Ruiz, Daniel Rivero, Vishal Chattwani\r\n *\r\n *   Description: This is an angular controller, designed to handle all the logic related with the counseling view. The\r\n *   counseling view is the view where the virtual counselor lies, and where the user takes his/her interventions.\r\n *   Among the many functions are some that communicate with the mainframe, which is Mihai's statemachine runner, or\r\n *   functions that login the user into the system, retrieve their answers, save their answers, and more. There are also\r\n *   helper functions as well, like print and progress bar, that modify content on the page dynamically or assist in\r\n *   tasks such as printing.\r\n */\n\nangular.module('app').controller('ratingProsConsController', ratingProsConsController);\nangular.module('app').controller('TGTRevisitedController', TGTRevisitedController);\nangular.module('app').controller('TNSGTRevisitedController', TNSGTRevisitedController);\nangular.module('app').controller('GWYWController', GWYWController);\nangular.module('app').controller('ImportanceController', ImportanceController);\nangular.module('app').controller('AlternativesController', AlternativesController);\nangular.module('app').controller('gamePlanController', gamePlanController);\nangular.module('app').controller('bacController', bacController);\n//angular.module('app').controller('otherDrugsController', otherDrugsController);\n\n// -----------------------------------------------------------------------------------------------------------------\n// injects, or dependencies, used by each controller. must follow function signature\n// -----------------------------------------------------------------------------------------------------------------\n\nTGTRevisitedController.$inject = ['$scope', 'goodThingsAboutDrinkingService'];\nTNSGTRevisitedController.$inject = ['$scope', 'notSoGoodThingsAboutDrinkingService'];\nratingProsConsController.$inject = ['$scope', 'notSoGoodThingsAboutDrinkingService', 'goodThingsAboutDrinkingService'];\nGWYWController.$inject = ['$scope', 'GettingWhatYouWantService'];\nImportanceController.$inject = ['$scope', 'goodThingsAboutDrinkingService', 'notSoGoodThingsAboutDrinkingService'];\nAlternativesController.$inject = ['$scope', 'AlternativesToGetYouWhereYouWantToGoService', 'GettingWhatYouWantService'];\ngamePlanController.$inject = ['$scope', 'notSoGoodThingsAboutDrinkingService', 'gamePlanService'];\nbacController.$inject = ['$scope', 'ScoreService'];\n//otherDrugsController.$inject = ['$scope', 'otherDrugsService'];\n// -----------------------------------------------------------------------------------------------------------------\n// CounselingController: view description above\n// -----------------------------------------------------------------------------------------------------------------\n\n//for code reusability and handling of certain surveys that contain list functionality.\nfunction surveyHandler(scp, srv) {\n    var selection;\n    scp.defaultResponses = srv.defaultAnswers;\n    scp.userResponses = srv.getUsersAnswers();\n    scp.addItem = function () {\n        var obj = {\n            response: scp.newResponse\n        };\n        srv.addUsersAnswer(obj);\n        scp.newResponse = ''; //clears input field when done.\n    };\n    scp.moveItemToLeftList = function () {\n        var elementIndex = selection;\n        if (elementIndex == null) return;\n        scp.defaultResponses.push(scp.userResponses[elementIndex]);\n        scp.userResponses.splice(elementIndex, 1);\n        selection = null;\n    };\n\n    scp.moveItemToRightList = function () {\n        var elementIndex = selection;\n        if (elementIndex == null) return;\n        scp.userResponses.push(scp.defaultResponses[elementIndex]);\n        scp.defaultResponses.splice(elementIndex, 1);\n        selection = null;\n    };\n\n    scp.setSelection = function (elementIndex) {\n        selection = elementIndex;\n    };\n\n    scp.allowDrop = function (ev) {\n        ev.preventDefault();\n    };\n\n    scp.drag = function (ev) {\n        ev.dataTransfer.setData(\"text\", ev.target.id);\n    };\n\n    scp.drop = function (ev) {\n        ev.preventDefault();\n        var data = ev.dataTransfer.getData(\"text\");\n        ev.target.appendChild(document.getElementById(data));\n    };\n}\n\nfunction TGTRevisitedController($scope, goodThingsAboutDrinkingService) {\n    surveyHandler($scope, goodThingsAboutDrinkingService);\n\n    //following handles the Success and Error messages\n    $scope.Success = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-success\",\n            alertType: \"Success!\",\n            alertText: message\n        };\n    };\n    $scope.Error = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-danger\",\n            alertType: \"Error!\",\n            alertText: message\n        };\n    };\n\n    $scope.saveTGTR = function () {\n\n        var tmp = [];\n\n        $scope.userResponses.forEach(function (e) {\n            tmp.push(e.response);\n        });\n\n        var userAnswer = tmp;\n        var elementId = \"PBuf3sVCCj\";\n\n        Parse.Cloud.run('addResponse', { elemID: elementId, answer: userAnswer }).then(function (success) {\n            $scope.Success(\"Your responses have been saved successfully\");\n        }, function (error) {\n            $scope.Error(\"Your responses were not saved. Error: \" + error);\n        });\n    };\n}\nfunction TNSGTRevisitedController($scope, notSoGoodThingsAboutDrinkingService) {\n    surveyHandler($scope, notSoGoodThingsAboutDrinkingService);\n    //following handles the Success and Error messages\n    $scope.Success = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-success\",\n            alertType: \"Success!\",\n            alertText: message\n        };\n    };\n    $scope.Error = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-danger\",\n            alertType: \"Error!\",\n            alertText: message\n        };\n    };\n\n    $scope.saveTNSGTR = function () {\n\n        var tmp = [];\n\n        $scope.userResponses.forEach(function (e) {\n            tmp.push(e.response);\n        });\n\n        var userAnswer = tmp;\n        var elementId = \"UY59yLDhwG\";\n\n        Parse.Cloud.run('addResponse', { elemID: elementId, answer: userAnswer }).then(function (success) {\n            $scope.Success(\"Your responses have been saved successfully\");\n        }, function (error) {\n            $scope.Error(\"Your responses were not saved. Error: \" + error);\n        });\n    };\n}\n//\n// function otherDrugsController ($scope, otherDrugsService){\n//     surveyHandler($scope, otherDrugsService);\n//\n//     $scope.saveOtherDrugs = function(){\n//\n//         var tmp = [];\n//\n//         $scope.userResponses.forEach(function (e) {\n//             tmp.push(e.response);\n//         });\n//\n//         var userAnswer = tmp;\n//         var elementId = \"UY59yLDhwG\";\n//\n//         Parse.Cloud.run('addResponse', { elemID: elementId, answer: userAnswer });\n//     }\n// }\n\n\nfunction GWYWController($scope, GettingWhatYouWantService) {\n    surveyHandler($scope, GettingWhatYouWantService);\n}\nfunction AlternativesController($scope, AlternativesToGetYouWhereYouWantToGoService, GettingWhatYouWantService) {\n    $scope.myDesiredEffects = GettingWhatYouWantService.getUsersAnswers(); //this line fetches the data from the GWYWService array of user answers\n    surveyHandler($scope, AlternativesToGetYouWhereYouWantToGoService);\n\n    $scope.saveAlternatives = function () {\n\n        var tmp = [];\n\n        $scope.userResponses.forEach(function (e) {\n            tmp.push(e.response);\n        });\n\n        var userAnswer = tmp;\n        var elementId = \"PEOFZ3qPHR\";\n\n        Parse.Cloud.run('addResponse', { elemID: elementId, answer: userAnswer });\n    };\n}\nfunction ImportanceController($scope, goodThingsAboutDrinkingService, notSoGoodThingsAboutDrinkingService, otherDrugsService) {\n    $scope.goodThings = goodThingsAboutDrinkingService.getUsersAnswers();\n    $scope.notGoodThings = notSoGoodThingsAboutDrinkingService.getUsersAnswers();\n    $scope.otherDrugs = otherDrugsService.getUsersAnswers();\n}\n\nfunction ratingProsConsController($scope, notSoGoodThingsAboutDrinkingService, goodThingsAboutDrinkingService) {\n    var listName;\n    var elementIndex;\n    $scope.userResponsesLikeAboutDrinking = goodThingsAboutDrinkingService.getUsersAnswers();\n    $scope.userResponsesDontLikeAboutDrinking = notSoGoodThingsAboutDrinkingService.getUsersAnswers();\n    $scope.setSelection = function (index, list) {\n        listName = list;\n        elementIndex = index;\n    };\n    $scope.shiftDown = function () {\n\n        if (listName === 'WILAD') {\n            var len = $scope.userResponsesLikeAboutDrinking.length;\n            if (elementIndex < len - 1) {\n                var temp = $scope.userResponsesLikeAboutDrinking[elementIndex + 1];\n                $scope.userResponsesLikeAboutDrinking[elementIndex + 1] = $scope.userResponsesLikeAboutDrinking[elementIndex];\n                $scope.userResponsesLikeAboutDrinking[elementIndex] = temp;\n                goodThingsAboutDrinkingService.updateUsersAnswersOrder($scope.userResponsesLikeAboutDrinking);\n            }\n        } else if (listName === 'WIDLAD') {\n            var len = $scope.userResponsesDontLikeAboutDrinking.length;\n            if (elementIndex < len - 1) {\n                var temp = $scope.userResponsesDontLikeAboutDrinking[elementIndex + 1];\n                $scope.userResponsesDontLikeAboutDrinking[elementIndex + 1] = $scope.userResponsesDontLikeAboutDrinking[elementIndex];\n                $scope.userResponsesDontLikeAboutDrinking[elementIndex] = temp;\n                goodThingsAboutDrinkingService.updateUsersAnswersOrder($scope.userResponsesLikeAboutDrinking);\n            }\n        }\n    };\n    $scope.shiftUp = function () {\n        if (listName === 'WILAD') {\n            var len = $scope.userResponsesLikeAboutDrinking.length;\n            if (elementIndex != 0) {\n                var temp = $scope.userResponsesLikeAboutDrinking[elementIndex - 1];\n                $scope.userResponsesLikeAboutDrinking[elementIndex - 1] = $scope.userResponsesLikeAboutDrinking[elementIndex];\n                $scope.userResponsesLikeAboutDrinking[elementIndex] = temp;\n                notSoGoodThingsAboutDrinkingService.updateUsersAnswersOrder($scope.userResponsesDontLikeAboutDrinking);\n            }\n        } else if (listName === 'WIDLAD') {\n            var len = $scope.userResponsesDontLikeAboutDrinking.length;\n            if (elementIndex != 0) {\n                var temp = $scope.userResponsesDontLikeAboutDrinking[elementIndex - 1];\n                $scope.userResponsesDontLikeAboutDrinking[elementIndex - 1] = $scope.userResponsesDontLikeAboutDrinking[elementIndex];\n                $scope.userResponsesDontLikeAboutDrinking[elementIndex] = temp;\n                notSoGoodThingsAboutDrinkingService.updateUsersAnswersOrder($scope.userResponsesDontLikeAboutDrinking);\n            }\n        }\n    };\n}\n\nfunction gamePlanController($scope, notSoGoodThingsAboutDrinkingService, gamePlanService) {\n    $scope.userResponses = gamePlanService.usersAnswers;\n    $scope.notSoGoodList = notSoGoodThingsAboutDrinkingService.getUsersAnswers();\n\n    //following handles the Success and Error messages\n    $scope.Success = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-success\",\n            alertType: \"Success!\",\n            alertText: message\n        };\n    };\n    $scope.Error = function (message) {\n        $scope.alert = {\n            alertClass: \"alert-danger\",\n            alertType: \"Error!\",\n            alertText: message\n        };\n    };\n\n    $scope.elementID_GP = [\"QGPgGLjWyA\", \"B4r2DavPKN\", \"EFwmDRi9mP\", \"Q9AJDNzBvp\", \"rWxrQmpzuQ\", \"jo4cPjzut6\"];\n    $scope.saveAnswer = function (index, usrRes) {\n        Parse.Cloud.run('addResponse', { elemID: $scope.elementID_GP[index], answer: [usrRes] }).then(function (success) {\n            $scope.Success(\"Your responses have been saved successfully\");\n        }, function (error) {\n            $scope.Error(\"Your responses were not saved. Error: \" + error);\n        });\n    };\n\n    $scope.insertList = function () {\n        var len = $scope.notSoGoodList.length;\n        var str = \"\";\n        //console.log(len);\n        for (i = 0; i < len; i++) {\n            str += $scope.notSoGoodList[i].response;\n            if (len > 1 && i < len - 1) {\n                str += \"\\n\";\n            }\n        }\n        $scope.usrResponse = str;\n    };\n}\n\nfunction bacController($scope, ScoreService, Constants) {\n    /* $scope.calculateBAC = function () {\r\n       var TD = $scope.x;\r\n       var TH = $scope.totalHours;\r\n         var allTableCells = document.getElementsByTagName(\"td\");\r\n       for (var i = 0, max = allTableCells.length; i < max; i++) {\r\n           var node = allTableCells[i];\r\n           var currentText = node.childNodes[0].nodeValue;\r\n           if (TD == 1 && TH == 1) {\r\n               if (currentText === \"0.013\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 2 && TH == 1) {\r\n               if (currentText === \"0.043\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 3 && TH == 1) {\r\n               if (currentText === \"0.073\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 4 && TH == 1) {\r\n               if (currentText === \"0.103\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 5 && TH == 1) {\r\n               if (currentText === \"0.133\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 6 && TH == 1) {\r\n               if (currentText === \"0.163\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 7 && TH == 1) {\r\n               if (currentText === \"0.193\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 8 && TH == 1) {\r\n               if (currentText === \"0.233\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 9 && TH == 1) {\r\n               if (currentText === \"0.253\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 10 && TH == 1) {\r\n               if (currentText === \"0.283\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 1 && TH == 2) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 2 && TH == 2) {\r\n               if (currentText === \"0.026\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 3 && TH == 2) {\r\n               if (currentText === \"0.056\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 4 && TH == 2) {\r\n               if (currentText === \"0.086\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 5 && TH == 2) {\r\n               if (currentText === \"0.116\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 6 && TH == 2) {\r\n               if (currentText === \"0.146\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 7 && TH == 2) {\r\n               if (currentText === \"0.176\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 8 && TH == 2) {\r\n               if (currentText === \"0.206\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 9 && TH == 2) {\r\n               if (currentText === \"0.236\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 10 && TH == 2) {\r\n               if (currentText === \"0.266\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 1 && TH == 3) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 2 && TH == 3) {\r\n               if (currentText === \"0.009\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 3 && TH == 3) {\r\n               if (currentText === \"0.039\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 4 && TH == 3) {\r\n               if (currentText === \"0.069\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 5 && TH == 3) {\r\n               if (currentText === \"0.099\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 6 && TH == 3) {\r\n               if (currentText === \"0.129\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 7 && TH == 3) {\r\n               if (currentText === \"0.159\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 8 && TH == 3) {\r\n               if (currentText === \"0.189\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 9 && TH == 3) {\r\n               if (currentText === \"0.219\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 10 && TH == 3) {\r\n               if (currentText === \"0.249\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 1 && TH == 4) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 2 && TH == 4) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 3 && TH == 4) {\r\n               if (currentText === \"0.022\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 4 && TH == 4) {\r\n               if (currentText === \"0.052\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 5 && TH == 4) {\r\n               if (currentText === \"0.082\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 6 && TH == 4) {\r\n               if (currentText === \"0.112\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 7 && TH == 4) {\r\n               if (currentText === \"0.142\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 8 && TH == 4) {\r\n               if (currentText === \"0.172\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 9 && TH == 4) {\r\n               if (currentText === \"0.202\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 10 && TH == 4) {\r\n               if (currentText === \"0.232\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 1 && TH == 5) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 2 && TH == 5) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 3 && TH == 5) {\r\n               if (currentText === \"0.005\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 4 && TH == 5) {\r\n               if (currentText === \"0.035\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 5 && TH == 5) {\r\n               if (currentText === \"0.065\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 6 && TH == 5) {\r\n               if (currentText === \"0.095\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 7 && TH == 5) {\r\n               if (currentText === \"0.125\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 8 && TH == 5) {\r\n               if (currentText === \"0.155\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 9 && TH == 5) {\r\n               if (currentText === \"0.185\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 10 && TH == 5) {\r\n               if (currentText === \"0.215\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 1 && TH == 6) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 2 && TH == 6) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 3 && TH == 6) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 4 && TH == 6) {\r\n               if (currentText === \"0.018\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 5 && TH == 6) {\r\n               if (currentText === \"0.048\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 6 && TH == 6) {\r\n               if (currentText === \"0.078\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 7 && TH == 6) {\r\n               if (currentText === \"0.108\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 8 && TH == 6) {\r\n               if (currentText === \"0.138\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 9 && TH == 6) {\r\n               if (currentText === \"0.168\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 10 && TH == 6) {\r\n               if (currentText === \"0.198\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 1 && TH == 7) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 2 && TH == 7) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 3 && TH == 7) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 4 && TH == 7) {\r\n               if (currentText === \"0.001\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 5 && TH == 7) {\r\n               if (currentText === \"0.031\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 6 && TH == 7) {\r\n               if (currentText === \"0.061\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 7 && TH == 7) {\r\n               if (currentText === \"0.091\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 8 && TH == 7) {\r\n               if (currentText === \"0.121\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 9 && TH == 7) {\r\n               if (currentText === \"0.151\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 10 && TH == 7) {\r\n               if (currentText === \"0.181\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 1 && TH == 8) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 2 && TH == 8) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 3 && TH == 8) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 4 && TH == 8) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 5 && TH == 8) {\r\n               if (currentText === \"0.014\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 6 && TH == 8) {\r\n               if (currentText === \"0.044\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 7 && TH == 8) {\r\n               if (currentText === \"0.074\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 8 && TH == 8) {\r\n               if (currentText === \"0.104\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 9 && TH == 8) {\r\n               if (currentText === \"0.134\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 10 && TH == 8) {\r\n               if (currentText === \"0.164\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 1 && TH == 9) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 2 && TH == 9) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 3 && TH == 9) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 4 && TH == 9) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 5 && TH == 9) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 6 && TH == 9) {\r\n               if (currentText === \"0.027\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 7 && TH == 9) {\r\n               if (currentText === \"0.057\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 8 && TH == 9) {\r\n               if (currentText === \"0.087\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 9 && TH == 9) {\r\n               if (currentText === \"0.117\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 10 && TH == 9) {\r\n               if (currentText === \"0.147\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 1 && TH == 10) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 2 && TH == 10) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 3 && TH == 10) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 4 && TH == 10) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 5 && TH == 10) {\r\n               if (currentText === \"0\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 6 && TH == 10) {\r\n               if (currentText === \"0.01\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 7 && TH == 10) {\r\n               if (currentText === \"0.04\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 8 && TH == 10) {\r\n               if (currentText === \"0.007\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 9 && TH == 10) {\r\n               if (currentText === \"0.1\") node.style.backgroundColor = \"yellow\";\r\n           } else if (TD == 10 && TH == 10) {\r\n               if (currentText === \"0.13\") node.style.backgroundColor = \"yellow\";\r\n           } else {\r\n               alert(\"Invalid Entry!\");\r\n               break;\r\n           }\r\n       }\r\n    };\r\n    $scope.resetValues = function (){\r\n         $scope.totalDrinks = 0;\r\n       $scope.totalHours = 0;\r\n         var isOdd = function (value) {\r\n           var num = value/10;\r\n           num = Math.floor(num);\r\n           return (num%2);\r\n       };\r\n         var allTableCells = document.getElementsByTagName(\"td\");\r\n         for (var i = 0, max = allTableCells.length; i < max; i++) {\r\n             var node = allTableCells[i];\r\n             if (node.style.backgroundColor == \"yellow\") {\r\n                 if(!isOdd(i)){\r\n                   node.style.backgroundColor = \"white\";\r\n               }\r\n               else\r\n                   node.style.backgroundColor = \"#a9dba9\";\r\n           }\r\n       }\r\n    };*/\n\n    var bacTableTemplate_male = [[0, 100, 120, 140, 160, 180, 200, 220, 240], [1, .021, .015, .010, .007, .004, .002, .001, .000], [2, .058, .046, .036, .030, .024, .020, .018, .014], [3, .095, .077, .062, .053, .044, .038, .035, .029], [4, .132, .108, .088, .076, .064, .056, .052, .044], [5, .169, .139, .114, .099, .084, .074, .069, .059], [6, .206, .170, .140, .122, .104, .092, .086, .074], [7, .243, .201, .166, .145, .124, .110, .103, .089], [8, .280, .232, .192, .168, .144, .128, .120, .104], [9, .317, .263, .218, .191, .164, .146, .137, .119], [10, .354, .294, .244, .214, .184, .164, .154, .134], [11, .391, .325, .270, .237, .204, .182, .171, .149], [12, .428, .356, .296, .260, .224, .200, .188, .164]];\n    var bacTableTemplate_female = [[0, 100, 120, 140, 160, 180, 200, 220, 240], [1, .029, .021, .016, .012, .009, .006, .004, .002], [2, .074, .058, .048, .040, .034, .028, .024, .020], [3, .119, .095, .080, .068, .059, .050, .044, .038], [4, .164, .132, .112, .096, .084, .072, .064, .056], [5, .209, .169, .144, .124, .109, .094, .084, .074], [6, .253, .206, .176, .152, .134, .116, .104, .092], [7, .299, .243, .208, .180, .159, .138, .124, .110], [8, .344, .280, .240, .208, .184, .160, .144, .128], [9, .389, .317, .272, .236, .209, .182, .164, .146], [10, .434, .354, .304, .264, .234, .204, .184, .164], [11, .479, .391, .336, .292, .259, .226, .204, .182], [12, .524, .428, .368, .320, .284, .248, .224, .200]];\n    var bacTableTemplate = void 0;\n    var genBacTable = \"\";\n    $scope.genBacTable;\n\n    $scope.init = function () {\n\n        Parse.Cloud.run(\"calculateAllScores\", {}).then(function (e) {\n            var yAxisHeaderCreated = false;\n\n            $scope.avgBAC = e.bac.score.avgBAC;\n            if (e.bac.score.userStats.gender == \"Male\") {\n                bacTableTemplate = bacTableTemplate_male;\n            } else bacTableTemplate = bacTableTemplate_female;\n\n            angular.forEach(bacTableTemplate, function (row, index) {\n\n                row.forEach(function (value, key) {\n\n                    if (index == 0 && key == 0) {\n                        //first cell need to set up table structure\n                        genBacTable += \"<table>\";\n\n                        //need to add the x-axis label\n                        genBacTable += \"<tr ><th colspan='10' class='center'>Weight (in lbs)</th></tr>\";\n                    }\n                    if (key == 0) {\n                        //first cell in the table row need to add tr tag to indicate this\n                        genBacTable += \"<tr>\";\n                        if (!yAxisHeaderCreated) {\n                            genBacTable += \"<th rowspan='13'class='box-rotate vertical-title-header'><div><span>Number of Drinks You Might Have</span></div></th>\";\n                            yAxisHeaderCreated = true;\n                        }\n                    }\n                    if (index == 0 || key == 0) {\n                        //the row cell belongs to the heading\n                        genBacTable += \"<th>\";\n                        genBacTable += value;\n                        genBacTable += \"</th>\";\n                    } else {\n\n                        //console.log(\"avgBAC: \" + $scope.avgBAC);\n                        //console.log(\"value: \" + value);\n                        //the row cell is not a header and is data\n                        if ($scope.avgBAC == value && key == e.bac.score.bac_y && index == e.bac.score.bac_x) {\n                            //if usr avg bac is equal to current value hightlight and border\n                            genBacTable += \"<td class='usrBAC'>\";\n                        } else {\n                            //if usr avg bac is not greater than or equal to current value do nothing just print value\n                            genBacTable += \"<td>\";\n                        }\n                        genBacTable += value;\n                        genBacTable += \"</td>\";\n                    }\n                }, $scope.avgBAC);\n                //out of the row need to close tr tag\n                genBacTable += \"</tr>\";\n            }, $scope.avgBAC);\n\n            //out of for loop close table tag\n            genBacTable += \"</table>\";\n\n            $scope.genBacTable = genBacTable;\n        });\n    };\n    $scope.init();\n}","'use strict';\n\n/**\r\n * Created by ejhen on 3/23/2017.\r\n */\n\nangular.module('app').service('gamePlanService', gamePlanService);\n\nfunction gamePlanService() {\n\n    //stores the users answers to What I Do Like About Drinking in What I Do Like About Drinking Survey\n    //need to grab these responses from the database\n    var usersAnswers = [{\n        question: \"What changes are you going to make?  Be specific.  Include positive goals (beginning, increase,\" + \" improve, do more of something) as well as negative goals (stopping, decreasing, avoiding)\",\n        response: \"Become more aware of my drinking\"\n\n    }, {\n        question: \"Reasons for changing--What are your most important reasons for changing?\",\n        response: \"It's ruining my life\"\n\n    }, {\n        question: \"The steps in changing--How do you plan to achieve your goals?  What are the specific steps \" + \"involved?  When, where, and how will you take them?\",\n        response: \"Taking one day at a time\"\n\n    }, {\n        question: \"How can others help?  How can you get them to help you?\",\n        response: \"By letting me know when I am not on track with my drinking plan.  Explaining the importance for\" + \" me to change my drinking habits.\"\n    }, {\n        question: \"What could go wrong or undermine your plan?  How can you stick with your plan despite these \" + \"setbacks or problems?\",\n        response: \"Continuing to hang out with the 'bad crowd'.  Choose my friends wisely.\"\n    }, {\n        question: \"What good things will happen as a result of changing?\",\n        response: \"I will save money and hopefully improve my relationships.\"\n    }];\n\n    return {\n        usersAnswers: usersAnswers\n\n    };\n}","'use strict';\n\nangular.module('app').service('goodThingsAboutDrinkingService', goodThingsAboutDrinkingService);\n\nfunction goodThingsAboutDrinkingService() {\n\n    //stores the users answers to The Good Things About Drinking Questionnaire\n    var defaultAnswers = [{\n        response: \"It helps me sleep\",\n        dragID: \"drag1\"\n    }, {\n        response: \"It helps me be more open socially\",\n        dragID: \"drag2\"\n    }, {\n        response: \"It helps me forget my problems\",\n        dragID: \"drag3\"\n    }, {\n        response: \"It helps me adjust my attitude\",\n        dragID: \"drag4\"\n    }, {\n        response: \"It helps me feel sexier or have better sex\",\n        dragID: \"drag5\"\n    }, {\n        response: \"I feel more creative when I drink\",\n        dragID: \"drag6\"\n    }, {\n        response: \"I like the high\",\n        dragID: \"drag7\"\n    }];\n\n    var usersAnswers = [];\n\n    var dragIndex = 1;\n\n    return {\n        defaultAnswers: defaultAnswers,\n        addUsersAnswer: function addUsersAnswer(answer) {\n            var addIndex = usersAnswers.length;\n            usersAnswers[addIndex] = answer;\n        },\n        removeUsersAnswer: function removeUsersAnswer(elemIndex) {\n            usersAnswers.splice(elemIndex, 1);\n        },\n        getUsersAnswers: function getUsersAnswers() {\n\n            Parse.Cloud.run(\"calculateAllScores\", {}).then(function (e) {\n                e.goodThings.score.goodThingsResponses.forEach(function (answer) {\n\n                    var tmp = {\n                        response: answer,\n                        dragID: \"drag\" + dragIndex\n                    };\n                    dragIndex++;\n                    usersAnswers.push(tmp);\n                });\n            });\n            return usersAnswers;\n        },\n        updateUsersAnswersOrder: function updateUsersAnswersOrder(newOrderedAnswers) {\n            usersAnswers = newOrderedAnswers;\n        }\n    };\n}","'use strict';\n\n/**\r\n * Created by ejhen on 3/2/2017.\r\n */\n\nangular.module('app').service('notSoGoodThingsAboutDrinkingService', notSoGoodThingsAboutDrinkingService);\n\nfunction notSoGoodThingsAboutDrinkingService() {\n\n    //stores the users answers to The Good Things About Drinking Questionnaire\n    var defaultAnswers = [{\n        response: \"It affects my relationships with others\",\n        dragID: \"drag1\"\n    }, {\n        response: \"Health-related problems\",\n        dragID: \"drag2\"\n    }, {\n        response: \"Money Problems\",\n        dragID: \"drag3\"\n    }, {\n        response: \"Memory blackouts\",\n        dragID: \"drag4\"\n    }, {\n        response: \"Make poor decisions\",\n        dragID: \"drag5\"\n    }, {\n        response: \"Feel guilty or ashamed\",\n        dragID: \"drag6\"\n    }, {\n        response: \"Miss class or work the next day\",\n        dragID: \"drag7\"\n    }, {\n        response: \"Affecting my school or work performance\",\n        dragID: \"drag8\"\n    }, {\n        response: \"Shamed or embarrassed someone\",\n        dragID: \"drag9\"\n    }, {\n        response: \"Neglecting responsibilities\",\n        dragID: \"drag10\"\n    }, {\n        response: \"Need to drink more for the same effect\",\n        dragID: \"drag11\"\n    }, {\n        response: \"Passing out or fainting suddenly\",\n        dragID: \"drag12\"\n    }, {\n        response: \"Feeling dependent on alcohol\",\n        dragID: \"drag13\"\n    }, {\n        response: \"Being a poor role model for my kids when I drink\",\n        dragID: \"drag14\"\n    }, {\n        response: \"DWI/DUIs\",\n        dragID: \"drag15\"\n    }, {\n        response: \"Other legal problems\",\n        dragID: \"drag16\"\n    }];\n\n    //stores the users answers to What I Don't Like About Drinking in What I Don't Like About Drinking Survey\n    //need to grab these responses from the database\n    // var usersAnswers = [\n    // {\n    //         response: \"It doesn't last forever.\",\n    //         dragID: \"drag1\",\n    //     },\n    //     {\n    //         response: \"Can't afford to drink as much as I would like to.\",\n    //         dragID: \"drag2\"\n    //     }\n    // ];\n\n    var usersAnswers = [];\n\n    var dragIndex = 1;\n\n    return {\n        defaultAnswers: defaultAnswers,\n        addUsersAnswer: function addUsersAnswer(answer) {\n            var addIndex = usersAnswers.length;\n            usersAnswers[addIndex] = answer;\n        },\n        removeUsersAnswer: function removeUsersAnswer(elemIndex) {\n            usersAnswers.splice(elemIndex, 1);\n        },\n        getUsersAnswers: function getUsersAnswers() {\n            Parse.Cloud.run(\"calculateAllScores\", {}).then(function (e) {\n                e.notGoodThings.score.notGoodThingsResponses.forEach(function (answer) {\n\n                    var tmp = {\n                        response: answer,\n                        dragID: \"drag\" + dragIndex\n                    };\n                    dragIndex++;\n                    usersAnswers.push(tmp);\n                });\n            });\n            return usersAnswers;\n        },\n        updateUsersAnswersOrder: function updateUsersAnswersOrder(newOrderedAnswers) {\n            usersAnswers = newOrderedAnswers;\n        }\n    };\n}","/*\r\n\r\n\r\nangular.module('app').service('otherDrugsService',otherDrugsService);\r\n\r\n\r\nfunction otherDrugsService (){\r\n\r\n    //stores the users answers to The Good Things About Drinking Questionnaire\r\n    var defaultAnswers = [\r\n        {\r\n            response: \"Marijuana, Hash, THC\",\r\n            dragID: \"drag1\",\r\n        },\r\n        {\r\n            response: \"Stimulants, meth, speed, ritalin\",\r\n            dragID: \"drag2\"\r\n        },\r\n        {\r\n            response: \"Cocaine or crack\",\r\n            dragID: \"drag3\"\r\n        },\r\n        {\r\n            response: \"Opioids (Oxycontin, Oxycodone, heroin)\",\r\n            dragID: \"drag4\"\r\n        },\r\n        {\r\n            response: \"Hallucinogens (LSD, peyote, mushrooms)\",\r\n            dragID: \"drag5\"\r\n        },\r\n        {\r\n            response: \"Inhalants\",\r\n            dragID: \"drag6\"\r\n        },\r\n        {\r\n            response: \"Ecstasy or club drugs\",\r\n            dragID: \"drag7\"\r\n        },\r\n        {\r\n            response: \"Tranquilizers (Valium, Xanax)\",\r\n            dragID: \"drag8\"\r\n        },\r\n        {\r\n            response: \"PCP, Phencyclidine\",\r\n            dragID: \"drag9\"\r\n        },\r\n        {\r\n            response: \"Sedatives (Barbiturates)\",\r\n            dragID: \"drag10\"\r\n        },\r\n        {\r\n            response: \"Have not taken any of the above\",\r\n            dragID: \"drag11\"\r\n        }\r\n    ];\r\n\r\n\r\n\r\n    var usersAnswers = [];\r\n\r\n    var dragIndex = 1;\r\n\r\n\r\n    return{\r\n        defaultAnswers: defaultAnswers,\r\n        addUsersAnswer: function (answer) {\r\n            var addIndex = usersAnswers.length;\r\n            usersAnswers[addIndex] = answer;\r\n\r\n        },\r\n        removeUsersAnswer: function (elemIndex){\r\n            usersAnswers.splice(elemIndex, 1);\r\n        },\r\n        getUsersAnswers: function (){\r\n\r\n            Parse.Cloud.run(\"calculateAllScores\", {}).then(function(e){\r\n                e.otherDrugs.score.otherDrugsResponses.forEach(function(answer){\r\n\r\n                    var tmp = {\r\n                        response: answer,\r\n                        dragID: \"drag\" + dragIndex\r\n                    };\r\n                    dragIndex++;\r\n                    usersAnswers.push(tmp);\r\n                });\r\n            });\r\n            return usersAnswers;\r\n        },\r\n        updateUsersAnswersOrder: function (newOrderedAnswers){\r\n            usersAnswers = newOrderedAnswers;\r\n        }\r\n    };\r\n}*/\n\"use strict\";","'use strict';\n\nangular.module('app').directive('selfHelpContent', selfHelpContent);\nangular.module('app').directive('professionalHelp', professionalHelp);\nangular.module('app').directive('selfDirectedBooks', selfDirectedBooks);\nangular.module('app').directive('feelingsMoodDisorders', feelingsMoodDisorders);\nangular.module('app').directive('medicalIssues', medicalIssues);\nangular.module('app').directive('medicatiguidescohol', medicationsAlcohol);\nangular.module('app').directive('medicationsMarijuana', medicationsMarijuana);\nangular.module('app').directive('medicationsOpiates', medicationsOpiates);\nangular.module('app').directive('medicationsStimulants', medicationsStimulants);\nangular.module('app').directive('medicationsGambling', medicationsGambling);\nangular.module('app').directive('medications', medications);\nangular.module('app').directive('relationships', relationships);\nangular.module('app').directive('tobacco', tobacco);\nangular.module('app').directive('socialAssertivenessSkills', socialAssertivenessSkills);\nangular.module('app').directive('urgesCravings', urgesCravings);\nangular.module('app').directive('readingList', readingList);\n\nfunction selfHelpContent() {\n    return {\n        template: \"<p><a href='http://smartrecovery.org' target='_blank'>SMART Recovery</a> is the self-help \" + \"program upon which this web course is based. It is a tremendous resource for getting support from others for \" + \"your efforts. There also is a lot of collective wisdom there on practical strategies for achieving and \" + \"maintaining abstinence from all addictions.</p>\"\n    };\n}\n\nfunction professionalHelp() {\n    return {\n        template: \"<p>If you've been struggling to achieve or maintain abstinence, consider getting some professional \" + \"help. <a href='http://www.abct.org' target='_blank'>The Association for Behavioral and Cognitive Therapies \" + \"(ABCT)</a> is an organization of cognitive-behavioral therapist and researchers with an emphasis on \" + \"evidence-based approaches to helping people. Their “<a href='https://aabt.org/members/Directory/Find_A_Therapist.cfm' target='_blank'>find a therapist</a>” feature may help you to find someone in your area. Another resource is \" + \"a list of evidence-based cognitive behavioral treatment programs that is available <a href='http://www.smartrecovery.org/Misc/provider_programs.php' target='_blank'>here</a>.</p>\"\n    };\n}\nfunction selfDirectedBooks() {\n    return {\n        template: \"<ul><li><a href='http://smartrecovery.org/SMARTStore/index.php?main_page=product_info&cPath=1&products_id=21' \" + \"target='_blank'>Sex, Drugs, Gambling, and Chocolate</a> by Dr. Tom Horvath is an excellent manual. He is the \" + \"president of <a href='http://www.smartrecovery.org' target='_blank'>SMART Recovery</a> and past president of \" + \"the Addictions Division of the American Psychological Association.</li><li>\" + \"<a href='http://smartrecovery.org/SMARTStore/index.php?main_page=product_info&cPath=1&products_id=23' target='_blank'>\" + \"Sober for Good</a> is for people who have decided to stop drinking and or interested in how others have his \" + \"succeeded. It's also helpful for people who are thinking about abstaining.  \" + \"<a href='http://www.behaviortherapy.com/soberforgoodreview.htm' target='_blank'>Click here</a> for a detailed \" + \"review.</li><li>SMART Recovery also has a good list of \" + \"<a href='http://www.smartrecovery.org/resources/readlist.html' target='_blank'>recommended readings</a>. \" + \"An edited list is below.</li></ul>\"\n    };\n}\nfunction feelingsMoodDisorders() {\n    return {\n        template: \"<p>If you know or wonder whether you have a mood disorder (e.g., clinical depression, bipolar \" + \"disorder), we encourage you to seek professional help. If you're not under the care of a professional, consult\" + \" your family physician. Another resource is the \" + \"<a href='http://mentalhealth.samhsa.gov/databases' target='_blank'>mental health services</a> locator site for\" + \" the Federal Government.  </p><ul><li>\" + \"<a href='http://www.health.harvard.edu/special_health_reports/Coping_with_Anxiety_and_Phobias.htm' target='_blank'>\" + \"Mastering anxiety and phobias</a>. This is a health report published by the Harvard Medical School.</li><li>\" + \"<a href='http://www.amazon.com/gp/product/0380810336?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0380810336' target='_blank'>\" + \"Feeling Good: The New Mood Therapy</a> and \" + \"<a href='http://www.amazon.com/gp/product/0452281326?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0452281326' target='_blank'>\" + \"The Feeling Good Handbook</a> These self-help manuals are based on cognitive behavioral therapy (CBT) \" + \"principles and focus on depression and anxiety. There is a lot of scientific evidence supporting the \" + \"effectiveness of CBT for depression and anxiety.</li><li>\" + \"<a href='http://www.amazon.com/gp/product/0898621283?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0898621283' target='_blank'>\" + \"Mind Over Mood: Change How You Feel by Changing the Way You Think</a></li></ul><p>The following are client \" + \"manuals used in evidence-based treatments for anxiety disorders. If you think you have anxiety disorder, \" + \"consider seeing a therapist with expertise in these areas. The programs can be challenging to complete by \" + \"yourself.</p><ul><li>\" + \"<a href='http://www.amazon.com/gp/product/0195189183/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399369&creativeASIN=0195189183' target='_blank'>\" + \"Mastering Your Fears and Phobias</a></li><li>\" + \"<a href='http://www.amazon.com/gp/product/0195336690/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399369&creativeASIN=0195336690' target='_blank'>\" + \"Managing Social Anxiety, Workbook, 2nd Edition: A Cognitive-Behavioral Therapy Approach</a></li><li>\" + \"<a href='http://www.amazon.com/gp/product/0195186850/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399373&creativeASIN=0195186850' target='_blank'>\" + \"Mastery of Obsessive-Compulsive Disorder: A Cognitive Behavioral Approach</a></li><li>\" + \"<a href='http://www.amazon.com/gp/product/0195338553/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399373&creativeASIN=0195338553' target='_blank'>\" + \"Stopping Anxiety Medication Workbook</a></li><li>\" + \"<a href='http://www.amazon.com/gp/product/0195183762/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399373&creativeASIN=0195183762' target='_blank'>\" + \"Reclaiming Your Life After Rape: Cognitive-Behavioral Therapy for Posttraumatic Stress Disorder</a></li></ul>\"\n    };\n}\nfunction medicalIssues() {\n    return {\n        template: \"<ul><li><a href='http://www.mayoclinic.com' target='_blank'>The Mayo Clinic</a></li><li>\" + \"<a href='http://www.webmd.com' target='_blank'>WebMD</a></li></ul><p>If you're searching for health-related \" + \"issues on the Internet we recommend sites that subscribe to the <a href='http://www.hon.ch' target='_blank'>\" + \"Health on the Net Foundation</a> (HON). Sites that subscribe to the HON and agreed to respect and honor the \" + \"eight principles of the <a href='http://www.hon.ch/HONcode/Conduct.html' target='_blank'>HON code of conduct\" + \"</a>.</p>\"\n    };\n}\nfunction medicationsAlcohol() {\n    return {\n        template: \"<h5 class='bold italic'>Medications--Alcohol</h5><p>There are three medications approved by the FDA \" + \"for use with people who are trying to abstain from drinking: acamprosate, naltrexone, disulfiram.  There is \" + \"evidence of effectiveness of all three medications.</p><ul><li>Acamprosate reduces withdrawal symptoms.</li>\" + \"<li>Naltrexone is available in tablet form (generic) and as a once-a-month injection (Vivitrol).  It reduces \" + \"urges and cravings to drink (discussed below).</li><li>Disulfiram acts as a deterrent to drinking.  It causes \" + \"serious psychological reactions if a person does drink. It can be effective in preventing drinking but only \" + \"when it is taking as part of a daily ritual between the drinker and a concern significant other who is \" + \"supportive of the drinker’s effort to remain sober. If you’re interested in this, consider seeing a therapist\" + \" who has been trained in the CRA (Community Reinforcement Approach) protocol. See the ABCT linked above in the\" + \" Professional help section to help you \" + \"<a href='https://aabt.org/members/Directory/Find_A_Therapist.cfm' target='_blank'>find a therapist</a>.</li></ul>\" };\n}\nfunction medicationsMarijuana() {\n    return {\n        template: \"<h5 class='bold italic'>Medications—Marijuana</h5><p>Currently there is are no medications for the\" + \" treatment of marijuana dependence.</p>\"\n    };\n}\nfunction medicationsOpiates() {\n    return {\n        template: \"<h5 class='bold italic'>Medications—Opiates</h5><p>There are two medications that help people get \" + \"clean from using opioids, buprenorphine and methadone.</p>\" };\n}\nfunction medicationsStimulants() {\n    return {\n        template: \"<h5 class='bold italic'>Medication—Stimulants</h5><p>Detoxification from stimulants can be lengthy \" + \"and challenging. Currently there are no medications for the treatment of stimulant abuse or dependence.</p>\"\n    };\n}\nfunction medicationsGambling() {\n    return {\n        template: \"<h5 class='bold italic'>Medications--Compulsive Gambling</h5><p>Currently there are no medications \" + \"for the treatment of compulsive gambling.</p>\"\n    };\n}\nfunction medications() {\n    return {\n        template: \"<medications-alcohol></medications-alcohol><medications-marijuana>\" + \"</medications-marijuana><medications-opiates></medications-opiates><medications-stimulants>\" + \"</medications-stimulants><medications-gambling></medications-gambling>\"\n    };\n}\nfunction relationships() {\n    return {\n        template: \"<p>Spouse or significant others. Would you like to have a better relationship? Here two resources you\" + \" may find useful.</p><ul><li>\" + \"<a href='http://www.amazon.com/gp/product/0965981800?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0965981800' target='_blank'>\" + \"Making it as a Couple: Prescription for a Quality Relationship</a> We consider this one of the best self-help \" + \"guides for couples who want to improve their relationships.</li><li>\" + \"<a href='http://smartrecovery.org/SMARTStore/index.php?main_page=product_info&cPath=1&products_id=17' target='_blank'>\" + \"Get Your Loved One Sober: Alternatives to Nagging, Pleading, and Threatening.</a> This self-help manual helps \" + \"spouses and others who are concerned about a person's drinking learn how to positively reinforce sobriety. \" + \"It also shows them how to help keep you motivated in your efforts. </li></ul>\"\n    };\n}\nfunction tobacco() {\n    return {\n        template: \"<p>The <a href='https://www.quitnow.net/programlookup' target='_blank'>Quit for Life</a> program is a \" + \"free (for many in the U.S.) smoking cessation program that's endorsed by the American Cancer Society. The \" + \"company that runs his program handles most State-run smoking quit lines.</p>\"\n    };\n}\nfunction socialAssertivenessSkills() {\n    return {\n        template: \"<ul><li><a href='http://www.amazon.com/gp/product/1572242094?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=1572242094' target='_blank'>\" + \"The Assertiveness Workbook: How to Express Your Ideas and Stand Up for Yourself at Work and in Relationships\" + \"</a></li></ul>\"\n    };\n}\nfunction urgesCravings() {\n    return {\n        template: \"<ul><li><a href='https://www.smartrecovery.org/shop/?main_page=product_info&cPath=1&products_id=21' target='_blank'>\" + \"Sex, Drugs, Gambling, and Chocolate</a> by dr. Tom Horvath. This help self-help manual written by the \" + \"President of <a href='http://www.smartrecovery.org' target='_blank'>SMART Recovery</a> has several excellent \" + \"chapters on identifying and managing urges and cravings.</li><li>Dr. Robert Westenneyer also has a good \" + \"<a href='http://www.doctordeluca.com/Library/DetoxEngage/CopingUrges.htm' target='_blank'>write-up</a> on \" + \"coping with urges.</li><li> <a href='http://www.campral.com' target='_blank'>Campral</a> (Acamprosate) is \" + \"prescription medication. It is clinically proven to reduce urges, cravings, and the arousal that precedes \" + \"drinking for many people. Why the typical dose, 2 pills 3 times per day can be inconvenient, taking them can \" + \"serve as an ongoing reminder of your priorities.</li><li>Naltrexone is a prescription medication that is \" + \"clinically shown to reduce urges and Cravings to drink. It's available as a pill (generic) and as a once \" + \"monthly injection (<a href='http://www.vivitrol.com' target='_blank'>Vivitrol</a>).  The genetic pills are \" + \"relatively inexpensive. Vivitrol is expensive but does not require daily decision and is covered by many \" + \"insurance plans.</li><li>Antabuse (disulfiram) is also prescription medication. It can be an effective \" + \"deterrent to drinking. Drinking while taking disulfiram is a medical emergency.  Because of this many people \" + \"want take it regularly unless it is taken as part of a supportive ritual with a loved one.  Then it can \" + \"reassure and rebuild trust with loved ones. Learning this supportive ritual is best done with the help of a \" + \"behavioral marital therapist with expertise in substance abuse. Consider the “\" + \"<a href='https://aabt.org/members/Directory/Find_A_Therapist.cfm' target='_blank'>find a therapist</a>” \" + \"feature on the ABCT website to find someone to help you with this.</li></ul>\"\n    };\n}\nfunction readingList() {\n    return {\n        template: \"<ul><li><a href='http://smartrecovery.org/SMARTStore/index.php?main_page=product_info&cPath=1&products_id=31' target='_blank'>\" + \"SMART Recovery Handbook.</a>  A compilation of practical information designed to assist the reader in \" + \"attaining the ultimate goal of recovery.</li><li>\" + \"<a href='http://www.amazon.com/gp/product/1884365108/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399369&creativeASIN=1884365108' target='_blank'>\" + \"Alcohol: how to Give It Up and Be Glad You Did</a></li><li>\" + \"<a href='http://www.amazon.com/gp/redirect.html?ie=UTF8&location=http%3A%2F%2Fwww.amazon.com%2FWhen-AA-Doesnt-Work-You%2Fdp%2F0942637534&tag=behaviorthera-20&linkCode=ur2&camp=1789&creative=9325' target='_blank'>\" + \"When AAA Doesn't Work for You: Rational Steps to Quitting Alcohol</a></li><li>\" + \"<a href='http://www.amazon.com/exec/obidos/tg/detail/-/047134575X/qid=1122566810/sr=8-1/ref=sr_8_xs_ap_i1_xgl14/103-3041215-3097453?v=glance&amp;s=books&amp;n=507846' target='_blank'>\" + \"Recovery Options: The Complete Guide</a></li><li>\" + \"<a href='http://www.amazon.com/gp/product/1884365175/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399369&creativeASIN=1884365175' target='_blank'>\" + \"Resisting 12-step Coercion</a></li><li>\" + \"<a href='http://www.amazon.com/gp/product/0671755307/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399369&creativeASIN=0671755307' target='_blank'>\" + \"Truth About Addiction and Recovery</a></li><li><a href='http://www.amazon.com/gp/product/0932838057/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399369&creativeASIN=0932838057' target='_blank'>\" + \"Coping Better… Anytime, Anywhere: The Handbook of Rational Self-Counseling</a></li><li>\" + \"<a href='http://www.amazon.com/exec/obidos/tg/detail/-/0380810336/qid=1122567373/sr=8-1/ref=pd_bbs_sbs_1/103-3041215-3097453?v=glance&amp;s=books&amp;n=507846' target='_blank'>\" + \"Feeling Good</a> David Burns (Signet, 1980)</li><li>\" + \"<a href='http://www.amazon.com/exec/obidos/tg/detail/-/B000736CP2/qid=1122567420/sr=8-1/ref=sr_8_xs_ap_i1_xgl14/103-3041215-3097453?v=glance&amp;s=books&amp;n=507846' target='_blank'>\" + \"How to Stubbornly Refuse to Make Yourself Miserable about Anything, Yes anything!</a></li><li>\" + \"<a href='http://www.amazon.com/gp/product/0944435424/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399369&creativeASIN=0944435424' target='_blank'>\" + \"Three Minute Therapy: Change Your Thinking, Change Your Life</a></li><li>\" + \"<a href='http://www.amazon.com/gp/product/0553263900/ref=as_li_ss_tl?ie=UTF8&tag=behaviorthera-20&linkCode=as2&camp=217145&creative=399369&creativeASIN=0553263900' target='_blank'>\" + \"When I Say No, I Feel Guilty</a></li><li>\" + \"<a href='http://www.amazon.com/exec/obidos/tg/detail/-/038072572X/qid=1122567814/sr=8-1/ref=pd_bbs_sbs_1/103-3041215-3097453?v=glance&amp;s=books&amp;n=507846' target='_blank'>\" + \"Changing for Good</a></li></ul>\"\n    };\n}","'use strict';\n\nangular.module('app').factory('Added', Added);\nangular.module('app').service('AddedService', AddedService);\n\nAdded.$inject = ['$q'];\nAddedService.$inject = ['$q', 'Added'];\n\nfunction Added($q) {\n    Added = function Added(object) {\n        var _this = this;\n\n        this.object = object;\n\n        this.name = object.get('name');\n        this.desc = object.get('desc');\n        this.primitive = object.get('primitive');\n        this.before = object.get('before');\n        this.execute = object.get('execute');\n        this.init = object.get('init');\n\n        this.save = function () {\n            var deferred = $q.defer();\n\n            _this.object.set('name', _this.name);\n            _this.object.set('desc', _this.desc);\n            _this.object.set('primitive', _this.primitive);\n            _this.object.set('before', _this.before);\n            _this.object.set('execute', _this.execute);\n            _this.object.set('init', _this.init);\n\n            _this.object.save(null).then(function (success) {\n                return deferred.resolve(success);\n            }, function (error) {\n                return deferred.reject(error);\n            });\n\n            return deferred.promise;\n        };\n        this.delete = function () {\n            var deferred = $q.defer();\n\n            _this.object.destroy().then(function (success) {\n                return deferred.resolve(success);\n            }, function (error) {\n                return deferred.reject(error);\n            });\n\n            return deferred.promise;\n        };\n    };\n\n    return Added;\n}\nfunction AddedService($q, Added) {\n    var schema = Parse.Object.extend('Added');\n\n    this.prototype = function () {\n        return {\n            name: \"State_NameDefault\",\n            desc: \"\",\n            primitive: false,\n            before: \"\",\n            execute: \"\",\n            init: {\n                params: [],\n                during: \"\",\n                states: [],\n                transitions: []\n            }\n        };\n    };\n\n    this.createAdded = function (added) {\n        var deferred = $q.defer();\n        var object = new schema();\n\n        object.set('name', added.name);\n        object.set('desc', added.desc);\n        object.set('primitive', added.primitive);\n        object.set('before', added.before);\n        object.set('execute', added.execute);\n        object.set('init', added.init);\n\n        object.save(null).then(function (response) {\n            return deferred.resolve(new Added(response));\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.getAllAdded = function () {\n        var deferred = $q.defer();\n        var query = new Parse.Query(schema);\n\n        query.find().then(function (response) {\n            var results = [];\n            response.forEach(function (res) {\n                return results.push(new Added(res));\n            });\n            deferred.resolve(results);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n}","'use strict';\n\nangular.module('app').service('AuthService', AuthService);\n\nAuthService.$inject = ['$q'];\n\nfunction AuthService($q) {\n    var _this = this;\n\n    //this.isLoggedIn = false;\n    this.tempUser = false;\n\n    this.currentUser = Parse.User.current();\n\n    this.register = function (credentials) {\n        var deferred = $q.defer();\n\n        var user = new Parse.User();\n\n        user.set(\"username\", credentials.username);\n        user.set(\"password\", credentials.password);\n        user.set(\"email\", credentials.email);\n        user.set(\"firstName\", credentials.firstname);\n        //user.set(\"lastName\", credentials.lastname);\n        user.set(\"ethnicity\", credentials.ethnicity);\n        user.set(\"education\", credentials.education);\n        user.set(\"gender\", credentials.gender);\n        user.set(\"race\", credentials.race);\n        user.set(\"dateOfBirth\", credentials.dateOfBirth);\n        user.set(\"age\", credentials.age);\n        user.set(\"maritalStatus\", credentials.maritalstatus);\n        user.set(\"weight\", credentials.weight);\n        user.set(\"heightTotal\", credentials.height.total);\n        user.set(\"programRequired\", credentials.answers);\n        user.set(\"tempUser\", credentials.tempUser);\n\n        user.signUp(null).then(function (success) {\n            return deferred.resolve(success);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.then(function (success) {\n            return _this.currentUser = Parse.User.current();\n        }, function (error) {\n            return ErrorService.handleParseError(error);\n        });\n    };\n\n    this.logout = function () {\n        var deferred = $q.defer();\n        Parse.User.logOut().then(function (success) {\n            _this.isLoggedIn = false;\n            /*console.log(success);*/\n            $rootScope.currentUser = null;\n            $rootScope.$apply();\n        }, function (error) {\n            ErrorService.handleParseError(error);\n            $rootScope.$apply();\n        });\n    };\n\n    this.login = function (credentials) {\n        Parse.User.logIn(credentials.username, credentials.password).then(function (success) {\n            /*console.log(success);*/\n            _this.isLoggedIn = true;\n            $rootScope.currentUser = Parse.User.current();\n            $rootScope.$apply();\n        }, function (error) {\n            ErrorService.handleParseError(error);\n            $rootScope.$apply();\n        });\n    };\n\n    this.getTempUserStatus = function () {\n        return this.tempUser;\n    };\n}","'use strict';\n\nangular.module('app').factory('Element', Element);\nangular.module('app').service('ElementService', ElementService);\n\nElement.$inject = ['$q'];\nElementService.$inject = ['$q', 'Element'];\n\nfunction Element($q) {\n    Element = function Element(object) {\n        var _this = this;\n\n        this.object = object;\n\n        this.type = object.get('type'); //type of element\n        this.form = object.get('form'); //form the element belongs to\n        this.order = object.get('order'); //order the element is displayed in a form\n        this.phrase = object.get('phrase'); //determines what the counselor speaks either for Q/A, Feedback, or FeedbackList elements\n        this.content = object.get('content'); //displays available answer choices to the user\n        this.html = object.get('html'); //where the custom html content is stored\n        this.lang = object.get('lang'); //lang that the speech is encoded currently only english supported\n        this.deleted = object.get('deleted'); //indicates if the element was deleted from the form\n        this.isRecorded = object.get('isRecorded'); //indicates if the element was deleted from the form\n        this.displayBackBtn = object.get('displayBackBtn'); //indicates if the element was deleted from the form\n        this.displayProgress = object.get('displayProgress'); //indicates if the element was deleted from the form\n        /*this.tableStructure = object.get('tableStructure');//represents the table as a multidemensional array*/\n\n        this.save = function () {\n\n            var deferred = $q.defer();\n\n            _this.object.set('type', _this.type);\n            _this.object.set('form', _this.form);\n            _this.object.set('order', _this.order);\n            _this.object.set('phrase', _this.phrase);\n            _this.object.set('content', _this.content);\n            _this.object.set('html', _this.html);\n            _this.object.set('lang', _this.lang);\n            _this.object.set('deleted', _this.deleted);\n            _this.object.set('isRecorded', _this.isRecorded);\n            _this.object.set('displayBackBtn', _this.displayBackBtn);\n            _this.object.set('displayProgress', _this.displayProgress);\n            /*this.object.set('tableStructure', this.tableStructure);*/\n\n            _this.object.save(null).then(function (success) {\n                return deferred.resolve(success);\n            }, function (error) {\n                return deferred.reject(error);\n            });\n\n            return deferred.promise;\n        };\n    };\n\n    return Element;\n}\n\nfunction ElementService($q, Element) {\n    var _this2 = this;\n\n    var schema = Parse.Object.extend('Element');\n\n    this.prototype = function (element, form) {\n        if (!element.content) {\n            element.content = [\"\"];\n        }\n\n        return {\n            type: element.type,\n            form: form,\n            order: element.order,\n            phrase: [\"\"],\n            content: element.content,\n            html: \"\",\n            lang: \"en-US\",\n            deleted: false,\n            isRecorded: true,\n            displayBackBtn: true,\n            displayProgress: true /*,\r\n                                  tableStructure: element.tableStructure*/\n        };\n    };\n\n    this.getElementsByForm = function (form) {\n        var deferred = $q.defer();\n        var query = new Parse.Query(schema);\n\n        query.equalTo('form', form);\n        query.notEqualTo('deleted', true);\n        query.ascending('order');\n\n        query.find(function (response) {\n            var results = [];\n            response.forEach(function (res) {\n                return results.push(new Element(res));\n            });\n            deferred.resolve(results);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.createElement = function (element, form) {\n\n        var deferred = $q.defer();\n        var object = new schema();\n\n        var defaultElement = _this2.prototype(element, form);\n\n        object.set('type', defaultElement.type);\n        object.set('form', defaultElement.form);\n        object.set('order', defaultElement.order);\n        object.set('phrase', defaultElement.phrase);\n        object.set('content', defaultElement.content);\n        object.set('html', defaultElement.html);\n        object.set('lang', defaultElement.lang);\n        object.set('deleted', defaultElement.deleted);\n        object.set('isRecorded', defaultElement.isRecorded);\n        object.set('displayBackBtn', defaultElement.displayBackBtn);\n        object.set('displayProgress', defaultElement.displayProgress);\n        /*object.set('tableStructure', defaultElement.tableStructure);*/\n\n        object.save(null).then(function (response) {\n            return deferred.resolve(response);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.deleteElement = function (element, form) {\n        var deferred = $q.defer();\n        element.deleted = true;\n        element.save(null).then(function (response) {\n            deferred.resolve(response);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n        return deferred.promise;\n    };\n}","'use strict';\n\nangular.module('app').service('ErrorService', ErrorService);\n\nErrorService.$inject = [];\n\nfunction ErrorService() {\n    this.handleParseError = function (error) {\n        console.log(error);\n        switch (error.code) {\n            case Parse.Error.INVALID_SESSION_TOKEN:\n                //TODO: test if this has promise, if so, use defer pattern\n                Parse.User.logOut();\n                break;\n            default:\n                console.log('Unhandled error code detected');\n        }\n    };\n}","'use strict';\n\nangular.module('app').factory('Form', Form);\nangular.module('app').service('FormService', FormService);\n\nForm.$inject = ['$q'];\nFormService.$inject = ['$q', 'Form'];\n\nfunction Form($q) {\n    Form = function Form(object) {\n        var _this = this;\n\n        this.object = object;\n\n        this.name = object.get('name');\n\n        this.save = function () {\n            var deferred = $q.defer();\n\n            _this.object.set('name', _this.name);\n\n            _this.object.save(null).then(function (success) {\n                return deferred.resolve(success);\n            }, function (error) {\n                return deferred.reject(error);\n            });\n\n            return deferred.promise;\n        };\n    };\n\n    return Form;\n}\nfunction FormService($q, Form) {\n    var schema = Parse.Object.extend('Form');\n\n    this.getAllForms = function () {\n        var deferred = $q.defer();\n        var query = new Parse.Query(schema);\n\n        query.find().then(function (response) {\n            var results = [];\n            response.forEach(function (res) {\n                results.push(new Form(res));\n            });\n            deferred.resolve(results);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.getFormsByIntervention = function (intervention) {\n        var deferred = $q.defer();\n        var query = new Parse.Query(schema);\n\n        query.equalTo('intervention', intervention);\n\n        query.find(function (response) {\n            var results = [];\n            response.forEach(function (res) {\n                return results.push(new Form(res));\n            });\n            deferred.resolve(results);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.getFormsByName = function (formName) {\n        var deferred = $q.defer();\n        var query = new Parse.Query(schema);\n\n        query.equalTo('name', formName);\n\n        query.find(function (response) {\n            var results = [];\n            response.forEach(function (res) {\n                return results.push(new Form(res));\n            });\n            deferred.resolve(results);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.createForm = function (form, intervention) {\n        var deferred = $q.defer();\n        var object = new schema();\n\n        object.set('name', form.name);\n        object.set('intervention', intervention);\n\n        object.save(null).then(function (response) {\n            return deferred.resolve(response);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n}","'use strict';\n\nangular.module('app').factory('Intervention', Intervention);\nangular.module('app').service('InterventionService', InterventionService);\n\nIntervention.$inject = ['$q'];\nInterventionService.$inject = ['$q', 'Intervention'];\n\nfunction Intervention($q) {\n    Intervention = function Intervention(object) {\n        var _this = this;\n\n        this.object = object;\n\n        this.name = object.get('name');\n\n        this.save = function () {\n            var deferred = $q.defer();\n\n            _this.object.set('name', _this.name);\n\n            _this.object.save(null).then(function (success) {\n                return deferred.resolve(success);\n            }, function (error) {\n                return deferred.reject(error);\n            });\n\n            return deferred.promise;\n        };\n    };\n\n    return Intervention;\n}\nfunction InterventionService($q, Intervention) {\n    var schema = Parse.Object.extend('Intervention');\n\n    this.createIntervention = function (intervention) {\n        var deferred = $q.defer();\n        var object = new schema();\n\n        object.set('name', intervention.name);\n\n        object.save(null).then(function (response) {\n            return deferred.resolve(response);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.getAllInterventions = function () {\n        var deferred = $q.defer();\n        var query = new Parse.Query(schema);\n\n        query.find().then(function (response) {\n            var results = [];\n            response.forEach(function (res) {\n                results.push(new Intervention(res));\n            });\n            deferred.resolve(results);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n}","'use strict';\n\nangular.module('app').factory('Progress', Progress);\nangular.module('app').service('ProgressService', ProgressService);\n\nProgress.$inject = ['$q'];\nProgressService.$inject = ['$q', 'Progress'];\n\nfunction Progress($q) {\n    Progress = function Progress(object) {\n        var _this = this;\n\n        this.object = object;\n\n        this.user = object.get('user'); //ptr to the user that Progress belongs to\n        this.GTNSGT = object.get('GTNSGT'); //The good things and not so good things list,\n        this.audit = object.get('audit'); //the AUDIT\n        this.howMuchHowOften = object.get('howMuchHowOften'); //How Much and How Often Includes Family history, Drugs, and Your Drinking...\n        this.familyHistory = object.get('howMuchHowOften'); //How Much and How Often Includes Family history, Drugs, and Your Drinking...\n        this.myDrinking = object.get('howMuchHowOften'); //How Much and How Often Includes Family history, Drugs, and Your Drinking...\n        this.otherDrugs = object.get('howMuchHowOften'); //How Much and How Often Includes Family history, Drugs, and Your Drinking...\n        this.ARP = object.get('ARP'); //Alcohol related problems\n        this.depression = object.get('depression'); //depression survey\n        this.MAST = object.get('MAST'); //your chances of reducing alcohol-related problems with moderation or chances of success AKA MAST\n        this.dependence = object.get('dependence'); //your dependence of alcohol\n        //this.likeDontLike = object.get('likeDontLike');//your likeDontLike of alcohol\n\n        this.save = function () {\n            var deferred = $q.defer();\n\n            _this.object.set('user', _this.user);\n            _this.object.set('GTNSGT', _this.GTNSGT);\n            _this.object.set('audit', _this.audit);\n            _this.object.set('howMuchHowOften', _this.howMuchHowOften);\n            _this.object.set('familyHistory', _this.familyHistory);\n            _this.object.set('myDrinking', _this.myDrinking);\n            _this.object.set('otherDrugs', _this.otherDrugs);\n            _this.object.set('ARP', _this.ARP);\n            _this.object.set('depression', _this.depression);\n            _this.object.set('MAST', _this.MAST);\n            _this.object.set('dependence', _this.dependence);\n            //this.object.set('likeDontLike', this.likeDontLike);\n\n            _this.object.save(null).then(function (success) {\n                return deferred.resolve(success);\n            }, function (error) {\n                return deferred.reject(error);\n            });\n\n            return deferred.promise;\n        };\n    };\n\n    return Progress;\n}\nfunction ProgressService($q, Progress) {\n    var _this2 = this;\n\n    var schema = Parse.Object.extend('Progress');\n\n    this.prototype = function (userObj, progressObj) {\n        if (!progressObj.GTNSGT) {\n            progressObj.GTNSGT = [{\n                \"timestamp\": \"\",\n                \"responsesPtr\": [],\n                \"percentageComplete\": \"0\",\n                \"currentElement\": \"\"\n            }];\n        }\n        if (!progressObj.audit) {\n            progressObj.audit = [{\n                \"timestamp\": \"\",\n                \"responsesPtr\": [],\n                \"percentageComplete\": \"0\",\n                \"currentElement\": \"\"\n            }];\n        }\n        if (!progressObj.howMuchHowOften) {\n            progressObj.howMuchHowOften = [{\n                \"timestamp\": \"\",\n                \"responsesPtr\": [],\n                \"percentageComplete\": \"0\",\n                \"currentElement\": \"\"\n            }];\n        }\n        if (!progressObj.familyHistory) {\n            progressObj.familyHistory = [{\n                \"timestamp\": \"\",\n                \"responsesPtr\": [],\n                \"percentageComplete\": \"0\",\n                \"currentElement\": \"\"\n            }];\n        }\n        if (!progressObj.myDrinking) {\n            progressObj.myDrinking = [{\n                \"timestamp\": \"\",\n                \"responsesPtr\": [],\n                \"percentageComplete\": \"0\",\n                \"currentElement\": \"\"\n            }];\n        }\n        if (!progressObj.otherDrugs) {\n            progressObj.otherDrugs = [{\n                \"timestamp\": \"\",\n                \"responsesPtr\": [],\n                \"percentageComplete\": \"0\",\n                \"currentElement\": \"\"\n            }];\n        }\n        if (!progressObj.ARP) {\n            progressObj.ARP = [{\n                \"timestamp\": \"\",\n                \"responsesPtr\": [],\n                \"percentageComplete\": \"0\",\n                \"currentElement\": \"\"\n            }];\n        }\n        if (!progressObj.depression) {\n            progressObj.depression = [{\n                \"timestamp\": \"\",\n                \"responsesPtr\": [],\n                \"percentageComplete\": \"0\",\n                \"currentElement\": \"\"\n            }];\n        }\n        if (!progressObj.MAST) {\n            progressObj.MAST = [{\n                \"timestamp\": \"\",\n                \"responsesPtr\": [],\n                \"percentageComplete\": \"0\",\n                \"currentElement\": \"\"\n            }];\n        }\n        if (!progressObj.dependence) {\n            progressObj.dependence = [{\n                \"timestamp\": \"\",\n                \"responsesPtr\": [],\n                \"percentageComplete\": \"0\",\n                \"currentElement\": \"\"\n            }];\n        }\n        /*if(!progressObj.likeDontLike){\r\n            progressObj.likeDontLike = [{\r\n                \"timestamp\": \"\",\r\n                \"responsesPtr\": [],\r\n                \"percentageComplete\": \"0\",\r\n                \"currentElement\": \"\"\r\n            }];\r\n        }*/\n\n        return {\n            user: userObj,\n            GTNSGT: progressObj.GTNSGT,\n            audit: progressObj.audit,\n            howMuchHowOften: progressObj.howMuchHowOften,\n            familyHistory: progressObj.familyHistory,\n            myDrinking: progressObj.myDrinking,\n            otherDrugs: progressObj.otherDrugs,\n            ARP: progressObj.ARP,\n            depression: progressObj.depression,\n            MAST: progressObj.MAST,\n            dependence: progressObj.dependence\n            //likeDontLike: progressObj.likeDontLike\n        };\n    };\n\n    this.createProgress = function (userObj, progressObj) {\n        var deferred = $q.defer();\n        var object = new schema();\n\n        var defaultProgress = _this2.prototype(userObj, progressObj);\n\n        object.set('user', defaultProgress.user);\n        object.set('GTNSGT', defaultProgress.GTNSGT);\n        object.set('audit', defaultProgress.audit);\n        object.set('howMuchHowOften', defaultProgress.howMuchHowOften);\n        object.set('familyHistory', defaultProgress.familyHistory);\n        object.set('myDrinking', defaultProgress.myDrinking);\n        object.set('otherDrugs', defaultProgress.otherDrugs);\n        object.set('ARP', defaultProgress.ARP);\n        object.set('depression', defaultProgress.depression);\n        object.set('MAST', defaultProgress.MAST);\n        object.set('dependence', defaultProgress.dependence);\n        //object.set('likeDontLike', defaultProgress.likeDontLike);\n\n        object.save(null).then(function (progress) {\n            return deferred.resolve(progress);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.getUserProgress = function (userObj) {\n        var deferred = $q.defer();\n        var query = new Parse.Query(schema);\n\n        query.equalTo('user', userObj);\n\n        query.first(function (progress) {\n\n            deferred.resolve(progress);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.updateUserProgress = function (progress) {\n        var deferred = $q.defer();\n        var object = new schema();\n\n        object.set('user', progress.user);\n        object.set('GTNSGT', progress.GTNSGT);\n        object.set('audit', progress.audit);\n        object.set('howMuchHowOften', progress.howMuchHowOften);\n        object.set('familyHistory', progress.familyHistory);\n        object.set('myDrinking', progress.myDrinking);\n        object.set('otherDrugs', progress.otherDrugs);\n        object.set('ARP', progress.ARP);\n        object.set('depression', progress.depression);\n        object.set('MAST', progress.MAST);\n        object.set('dependence', progress.dependence);\n        //object.set('likeDontLike', progress.likeDontLike);\n\n        object.save(null).then(function (response) {\n            return deferred.resolve(response);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n}","'use strict';\n\nangular.module('app').factory('Response', Response);\nangular.module('app').service('ResponseService', ResponseService);\n\nResponse.$inject = ['$q'];\nResponseService.$inject = ['$q', 'Response'];\n\nfunction Response($q) {\n    Response = function Response(object) {\n        var _this = this;\n\n        this.object = object;\n\n        this.user = object.get('user'); //ptr to the user that response belongs to\n        this.element = object.get('element'); //the element that the response belongs to\n        this.answer = object.get('answer'); //the answer that the user has selected as their response\n\n        this.save = function () {\n\n            var deferred = $q.defer();\n\n            _this.object.set('user', _this.user);\n            _this.object.set('element', _this.element);\n            _this.object.set('answer', _this.answer);\n\n            _this.object.save(null).then(function (success) {\n                return deferred.resolve(success);\n            }, function (error) {\n                return deferred.reject(error);\n            });\n\n            return deferred.promise;\n        };\n    };\n\n    return Response;\n}\n\nfunction ResponseService($q, Response) {\n    var _this2 = this;\n\n    var schema = Parse.Object.extend('Response');\n\n    this.prototype = function (response, form) {\n        return {\n            user: response.user,\n            element: element,\n            answer: response.answer\n        };\n    };\n\n    this.getResponsesByUser = function (user) {\n        var deferred = $q.defer();\n        var query = new Parse.Query(schema);\n\n        query.equalTo('user', user);\n\n        query.find(function (response) {\n            var results = [];\n            response.forEach(function (res) {\n                return results.push(new Response(res));\n            });\n            deferred.resolve(results);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.saveResponse = function (response, form) {\n\n        var deferred = $q.defer();\n        var object = new schema();\n\n        var defaultResponse = _this2.prototype(response, form);\n\n        object.set('user', defaultResponse.user);\n        object.set('element', defaultResponse.element);\n        object.set('answer', defaultResponse.answer);\n\n        object.save(null).then(function (response) {\n            return deferred.resolve(response);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n}","'use strict';\n\nangular.module('app').factory('User', User);\nangular.module('app').service('UserService', UserService);\nangular.module('app').service('AuthService', AuthService);\nangular.module('app').service('AdminService', AdminService);\n\nUser.$inject = ['$q'];\nUserService.$inject = ['$q', 'User'];\nAuthService.$inject = ['$q', 'User'];\nAdminService.$inject = ['$q', 'User'];\n\nfunction User($q) {\n    User = function User(object) {\n        var _this = this;\n\n        this.object = object;\n        this.responses = object.get('responses');\n\n        this.save = function () {\n            var deferred = $q.defer();\n\n            object.set('responses', _this.responses);\n\n            _this.object.save(null).then(function (success) {\n                return deferred.resolve(success);\n            }, function (error) {\n                return deferred.reject(error);\n            });\n\n            return deferred.promise;\n        };\n    };\n\n    return User;\n}\nfunction UserService($q, User) {\n    //Todo: need to see if the current user is admin first\n\n    //query database for all active users\n    this.getActiveUsers = function () {\n        var deferred = $q.defer();\n        var ActiveUser = Parse.Object.extend(\"User\");\n        var queryActiveUsrs = new Parse.Query(ActiveUser);\n\n        //find active users and only return user name\n        queryActiveUsrs.find(function (response) {\n            var allUsers = [];\n            response.forEach(function (res) {\n                return allUsers.push(res.get('username'));\n            });\n            deferred.resolve(allUsers);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.validateUserbyEmail = function (usrEmail) {\n        var deferred = $q.defer();\n        var FindUser = Parse.Object.extend(\"User\");\n        var queryUsr = new Parse.Query(FindUser);\n        var userIsValid = false;\n\n        queryUsr.equalTo('email', usrEmail);\n        queryUsr.equalTo('emailVerified', true);\n\n        queryUsr.first(function (response) {\n            userIsValid = true;\n            deferred.resolve(userIsValid);\n        }, function (error) {\n            userIsValid = false;\n            deferred.resolve(userIsValid);\n        });\n\n        return deferred.promise;\n    };\n\n    //query database and get user with usrname matching usrID\n    this.getUsrByUsrName = function (usrID) {\n        var deferred = $q.defer();\n        var FindUser = Parse.Object.extend(\"User\");\n        var queryUsrs = new Parse.Query(FindUser);\n\n        //find active users and only return user name\n        queryUsrs.equalTo(\"username\", usrID);\n        queryUsrs.find(function (usr) {\n            var newAdmin = usr[0];\n            deferred.resolve(newAdmin);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.updatePW = function (enteredEmail, enteredDOB) {\n        var deferred = $q.defer();\n        var ActiveUser = Parse.Object.extend(\"User\");\n        var queryActiveUsrs = new Parse.Query(ActiveUser);\n\n        /*console.log(enteredEmail);\r\n        console.log(enteredDOB);*/\n        queryActiveUsrs.equalTo('email', enteredEmail);\n        queryActiveUsrs.equalTo('dateOfBirth', enteredDOB);\n\n        queryActiveUsrs.first(function (res) {\n            console.log(\"found user in userSrvc.updatePw\");\n            var fpUser = res;\n            deferred.resolve(fpUser);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n        return deferred.promise;\n    };\n\n    this.changePW = function (npw, usr) {\n        var deferred = $q.defer();\n        /*let ActiveUser = Parse.Object.extend(\"User\");\r\n        let queryActiveUsrs = new Parse.Query(ActiveUser);*/\n\n        // console.log(\"start changePW\");\n        // console.log(usr.id);\n\n        //queryActiveUsrs.equalTo('objectId', usr.id);\n\n        /*queryActiveUsrs.first(\r\n            res => {\r\n                console.log(\"in User Service.............\");\r\n                console.log(res);\r\n               res.set(\"password\", newPW);\r\n               res.save(null, {useMasterKey: true}).then(\r\n                   success => {console.log(\"user credentials updated in DB\")},\r\n                   error => {\r\n                       console.log(error);\r\n                   }\r\n               );\r\n            },\r\n            error => deferred.reject(error)\r\n        );*/\n        //Parse.Cloud.run('addResponse', { elemID: elemID, answer: [answer] });\n        Parse.Cloud.run('updatePW', { updateUsr: usr.id, newPW: npw });\n\n        return deferred.promise;\n    };\n}\nfunction AuthService($q) {\n    this.register = function (credentials) {\n        var deferred = $q.defer();\n\n        var user = new Parse.User();\n\n        user.set(\"username\", credentials.username);\n        user.set(\"password\", credentials.password);\n        user.set(\"email\", credentials.email);\n        user.set(\"firstName\", credentials.firstname);\n        //user.set(\"lastName\", credentials.lastname);\n        user.set(\"ethnicity\", credentials.ethnicity);\n        user.set(\"education\", credentials.education);\n        user.set(\"gender\", credentials.gender);\n        user.set(\"race\", credentials.race);\n        user.set(\"dateOfBirth\", credentials.dateOfBirth);\n        user.set(\"age\", credentials.age);\n        user.set(\"maritalStatus\", credentials.maritalstatus);\n        user.set(\"weight\", credentials.weight);\n        user.set(\"heightTotal\", credentials.height.total);\n        user.set(\"programRequired\", credentials.answers);\n        user.set(\"tempUser\", credentials.tempUser);\n\n        user.set(\"responses\", credentials.responses || []);\n\n        user.signUp(null).then(function (success) {\n            return deferred.resolve(success);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.logout = function () {\n        var deferred = $q.defer();\n\n        Parse.User.logOut().then(function (success) {\n            return deferred.resolve(success);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.login = function (credentials) {\n        var deferred = $q.defer();\n\n        Parse.User.logIn(credentials.username, credentials.password).then(function (success) {\n            return deferred.resolve(success);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n\n        return deferred.promise;\n    };\n\n    this.currentUser = function () {\n        return Parse.User.current() ? new User(Parse.User.current()) : null;\n    };\n}\n\nfunction AdminService($q, User) {\n\n    this.setUpRole = function () {\n        var roleACL = new Parse.ACL();\n        var role = new Parse.Role(\"Administrator\", roleACL);\n        roleACL.setPublicReadAccess(true);\n        role.save();\n    };\n\n    this.addUserToAdminGroup = function (usr) {\n        var deferred = $q.defer();\n\n        Parse.Cloud.run('addToAdminGroup', { userToAdmin: usr }).then(function (success) {\n            return deferred.resolve(success);\n        }, function (error) {\n            return deferred.reject(error);\n        });\n        return deferred.promise;\n    };\n}"]}