{"version":3,"sources":["../src/MailgunAdapter.js"],"names":["mailgun","require","mailcomposer","Mustache","co","fs","MailAdapter","ERRORS","missing_configuration","missing_mailgun_settings","bad_template_config","invalid_callback","invalid_template_name","MailgunAdapter","constructor","options","Error","apiKey","domain","fromAddress","host","templates","Object","keys","length","name","subject","pathPlainText","callback","cache","_sendMail","templateVars","message","selectedTemplate","templateName","template","config","user","direct","recipient","variables","extra","assign","from","to","link","appName","username","get","email","args","_mailGenerator","bind","catch","e","console","error","userVars","Promise","resolve","_validateUserVars","pathHtml","cachedTemplate","plainTextEmail","_loadEmailTemplate","toString","text","render","htmlEmail","html","composer","mimeString","reject","build","payload","messages","sendMime","body","sendPasswordResetEmail","sendVerificationEmail","send","path","readFile","err","data","validUserVars","module","exports"],"mappings":";;AAAA,MAAMA,UAAUC,QAAQ,YAAR,CAAhB;AACA,MAAMC,eAAeD,QAAQ,cAAR,CAArB;AACA,MAAME,WAAWF,QAAQ,UAAR,CAAjB;AACA,MAAMG,KAAKH,QAAQ,IAAR,CAAX;AACA,MAAMI,KAAKJ,QAAQ,IAAR,CAAX;AACA,MAAMK,cAAcL,QAAQ,eAAR,CAApB;;AAEA,MAAMM,SAAS;AACbC,yBAAuB,wCADV;AAEbC,4BACE,gEAHW;AAIbC,uBAAqB,uDAJR;AAKbC,oBAAkB,qDALL;AAMbC,yBAAuB;AANV,CAAf;;AASA;;;;;AAKA,MAAMC,cAAN,SAA6BP,WAA7B,CAAyC;AACvCQ,cAAYC,OAAZ,EAAqB;AACnB,QAAI,CAACA,OAAL,EAAc;AACZ,YAAM,IAAIC,KAAJ,CAAUT,OAAOC,qBAAjB,CAAN;AACD;;AAED,UAAMO,OAAN;;AAEA,UAAM,EAAEE,MAAF,EAAUC,MAAV,EAAkBC,WAAlB,EAA+BC,IAA/B,KAAwCL,OAA9C;AACA,QAAI,CAACE,MAAD,IAAW,CAACC,MAAZ,IAAsB,CAACC,WAA3B,EAAwC;AACtC,YAAM,IAAIH,KAAJ,CAAUT,OAAOE,wBAAjB,CAAN;AACD;;AAED,UAAM,EAAEY,SAAF,KAAgBN,OAAtB;AACA,QAAI,CAACM,SAAD,IAAcC,OAAOC,IAAP,CAAYF,SAAZ,EAAuBG,MAAvB,KAAkC,CAApD,EAAuD;AACrD,YAAM,IAAIR,KAAJ,CAAUT,OAAOG,mBAAjB,CAAN;AACD;;AAED,SAAK,IAAIe,IAAT,IAAiBJ,SAAjB,EAA4B;AAC1B,YAAM,EAAEK,OAAF,EAAWC,aAAX,EAA0BC,QAA1B,KAAuCP,UAAUI,IAAV,CAA7C;;AAEA,UAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,aAAP,KAAyB,QAA5D,EAAsE;AACpE,cAAM,IAAIX,KAAJ,CAAUT,OAAOG,mBAAjB,CAAN;AACD;;AAED,UAAIkB,YAAY,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9C,cAAM,IAAIZ,KAAJ,CAAUT,OAAOI,gBAAjB,CAAN;AACD;AACF;;AAED,SAAKT,YAAL,GAAoBA,YAApB;AACA,SAAKF,OAAL,GAAeA,QAAQ,EAAEiB,MAAF,EAAUC,MAAV,EAAkBE,IAAlB,EAAR,CAAf;AACA,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKE,SAAL,GAAiBA,SAAjB;AACA,SAAKQ,KAAL,GAAa,EAAb;AACD;;AAED;;;;;AAKAC,YAAUf,OAAV,EAAmB;AACjB,QAAIgB,YAAJ;AAAA,QACEC,OADF;AAAA,QAEEC,mBAAmB,EAFrB;;AAIA,QAAIC,eAAgBD,iBAAiBR,IAAjB,GAAwBV,QAAQmB,YAApD;AACA,QAAI,CAACA,YAAL,EAAmB;AACjB,YAAM,IAAIlB,KAAJ,CAAUT,OAAOK,qBAAjB,CAAN;AACD;;AAED,QAAIuB,WAAYF,iBAAiBG,MAAjB,GAA0B,KAAKf,SAAL,CAAea,YAAf,CAA1C;AACA,QAAI,CAACC,QAAL,EAAe;AACb,YAAM,IAAInB,KAAJ,CAAW,qCAAoCkB,YAAa,EAA5D,CAAN;AACD;;AAED,QAAIG,IAAJ;AACA;AACA,QAAItB,QAAQuB,MAAZ,EAAoB;AAClB,YAAM,EAAEZ,OAAF,EAAWP,WAAX,EAAwBoB,SAAxB,EAAmCC,SAAnC,EAA8CC,KAA9C,KAAwD1B,OAA9D;AACA,UAAI,CAACwB,SAAL,EAAgB;AACd,cAAM,IAAIvB,KAAJ,CAAW,mCAAkCkB,YAAa,sBAA1D,CAAN;AACD;;AAEDH,qBAAeS,aAAa,EAA5B;AACAR,gBAAUV,OAAOoB,MAAP,CACR;AACEC,cAAMxB,eAAe,KAAKA,WAD5B;AAEEyB,YAAIL,SAFN;AAGEb,iBAASA,WAAWS,SAAST;AAH/B,OADQ,EAMRe,SAAS,EAND,CAAV;AAQD,KAfD,MAeO;AACL,YAAM,EAAEI,IAAF,EAAQC,OAAR,KAAoB/B,OAA1B;AACAsB,aAAOtB,QAAQsB,IAAf;;AAEAN,qBAAeT,OAAOoB,MAAP,CAAc;AAC3BG,YAD2B;AAE3BC,eAF2B;AAG3BC,kBAAUV,KAAKW,GAAL,CAAS,UAAT,CAHiB;AAI3BC,eAAOZ,KAAKW,GAAL,CAAS,OAAT;AAJoB,OAAd,CAAf;;AAOAhB,gBAAU;AACRW,cAAM,KAAKxB,WADH;AAERyB,YAAIP,KAAKW,GAAL,CAAS,OAAT,CAFI;AAGRtB,iBAASS,SAAST;AAHV,OAAV;AAKD;;AAED,UAAMwB,OAAO,EAAEnB,YAAF,EAAgBC,OAAhB,EAAyBC,gBAAzB,EAA2CI,IAA3C,EAAb;AACA,WAAOjC,GAAG,KAAK+C,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,EAA+BF,IAA/B,CAAH,EAAyCG,KAAzC,CAA+CC,KAAKC,QAAQC,KAAR,CAAcF,CAAd,CAApD,CAAP;AACD;;AAED;;;;AAIA,GAACH,cAAD,CAAgBD,IAAhB,EAAsB;AACpB,QAAI,EAAEd,QAAQD,QAAV,EAAoBV,MAAMS,YAA1B,KAA2CgB,KAAKjB,gBAApD;AACA,QAAI,EAAED,OAAF,EAAWD,YAAX,KAA4BmB,IAAhC;AACA,UAAM,EAAEtB,QAAF,KAAeO,QAArB;;AAEA,QAAIP,YAAY,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9C,UAAI6B,WAAW,MAAMC,QAAQC,OAAR,CAAgB/B,SAASsB,KAAKb,IAAd,CAAhB,CAArB;AACAoB,iBAAW,KAAKG,iBAAL,CAAuBH,QAAvB,CAAX;AACA1B,qBAAeT,OAAOoB,MAAP,CAAcX,YAAd,EAA4B0B,QAA5B,CAAf;AACD;;AAED,QAAI9B,gBAAgBQ,SAASR,aAA7B;AACA,QAAIkC,WAAW1B,SAAS0B,QAAxB;AACA,QAAIpB,QAAQN,SAASM,KAAT,IAAkB,EAA9B;AACA,QAAIqB,iBAAkB,KAAKjC,KAAL,CAAWK,YAAX,IACpB,KAAKL,KAAL,CAAWK,YAAX,KAA4B,EAD9B;;AAGA;AACA,QAAI,CAAC4B,eAAe,MAAf,CAAL,EAA6B;AAC3B,UAAIC,iBAAiB,MAAM,KAAKC,kBAAL,CAAwBrC,aAAxB,CAA3B;AACAoC,uBAAiBA,eAAeE,QAAf,CAAwB,MAAxB,CAAjB;AACAH,qBAAe,MAAf,IAAyBC,cAAzB;AACD;;AAED;AACA/B,YAAQkC,IAAR,GAAe/D,SAASgE,MAAT,CAAgBL,eAAe,MAAf,CAAhB,EAAwC/B,YAAxC,CAAf;;AAEA;AACA,QAAI8B,QAAJ,EAAc;AACZ,UAAI,CAACC,eAAe,MAAf,CAAL,EAA6B;AAC3B,YAAIM,YAAY,MAAM,KAAKJ,kBAAL,CAAwBH,QAAxB,CAAtB;AACAC,uBAAe,MAAf,IAAyBM,UAAUH,QAAV,CAAmB,MAAnB,CAAzB;AACD;AACD;AACAjC,cAAQqC,IAAR,GAAelE,SAASgE,MAAT,CAAgBL,eAAe,MAAf,CAAhB,EAAwC/B,YAAxC,CAAf;AACD;;AAED;AACAC,cAAUV,OAAOoB,MAAP,CAAcV,OAAd,EAAuBS,SAAS,EAAhC,CAAV;;AAEA;AACA,UAAM6B,WAAW,KAAKpE,YAAL,CAAkB8B,OAAlB,CAAjB;;AAEA;AACA,UAAMuC,aAAa,MAAM,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUa,MAAV,KAAqB;AACxDF,eAASG,KAAT,CAAe,CAACjB,KAAD,EAAQxB,OAAR,KAAoB;AACjC,YAAIwB,KAAJ,EAAWgB,OAAOhB,KAAP;AACXG,gBAAQ3B,OAAR;AACD,OAHD;AAID,KALwB,CAAzB;;AAOA;AACA,UAAM0C,UAAU;AACd9B,UAAIZ,QAAQY,EADE;AAEdZ,eAASuC,WAAWN,QAAX,CAAoB,MAApB;AAFK,KAAhB;;AAKA,WAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAUa,MAAV,KAAqB;AACtC,WAAKxE,OAAL,CAAa2E,QAAb,GAAwBC,QAAxB,CAAiCF,OAAjC,EAA0C,CAAClB,KAAD,EAAQqB,IAAR,KAAiB;AACzD,YAAIrB,KAAJ,EAAWgB,OAAOhB,KAAP;AACXG,gBAAQkB,IAAR;AACD,OAHD;AAID,KALM,CAAP;AAMD;;AAED;;;;;;AAMAC,yBAAuB,EAAEjC,IAAF,EAAQC,OAAR,EAAiBT,IAAjB,EAAvB,EAAgD;AAC9C,WAAO,KAAKP,SAAL,CAAe;AACpBI,oBAAc,oBADM;AAEpBW,UAFoB;AAGpBC,aAHoB;AAIpBT;AAJoB,KAAf,CAAP;AAMD;;AAED;;;;;;AAMA0C,wBAAsB,EAAElC,IAAF,EAAQC,OAAR,EAAiBT,IAAjB,EAAtB,EAA+C;AAC7C,WAAO,KAAKP,SAAL,CAAe;AACpBI,oBAAc,mBADM;AAEpBW,UAFoB;AAGpBC,aAHoB;AAIpBT;AAJoB,KAAf,CAAP;AAMD;;AAED;;;;;;;;;;;;AAYA2C,OAAK,EAAE9C,YAAF,EAAgBR,OAAhB,EAAyBP,WAAzB,EAAsCoB,SAAtC,EAAiDC,SAAjD,EAA4DC,KAA5D,EAAL,EAA0E;AACxE,WAAO,KAAKX,SAAL,CAAe;AACpBI,kBADoB;AAEpBR,aAFoB;AAGpBP,iBAHoB;AAIpBoB,eAJoB;AAKpBC,eALoB;AAMpBC,WANoB;AAOpBH,cAAQ;AAPY,KAAf,CAAP;AASD;;AAED;;;;;AAKA0B,qBAAmBiB,IAAnB,EAAyB;AACvB,WAAO,IAAIvB,OAAJ,CAAY,CAACC,OAAD,EAAUa,MAAV,KAAqB;AACtCnE,SAAG6E,QAAH,CAAYD,IAAZ,EAAkB,CAACE,GAAD,EAAMC,IAAN,KAAe;AAC/B,YAAID,GAAJ,EAASX,OAAOW,GAAP;AACTxB,gBAAQyB,IAAR;AACD,OAHD;AAID,KALM,CAAP;AAMD;;AAED;;;;;AAKAxB,oBAAkBH,QAAlB,EAA4B;AAC1B,UAAM4B,gBAAgB5B,YAAYA,SAAS3C,WAAT,KAAyBQ,MAA3D;AACA;AACA,WAAO+D,gBAAgB5B,QAAhB,GAA2B,EAAlC;AACD;AAlPsC;;AAqPzC6B,OAAOC,OAAP,GAAiB1E,cAAjB","file":"MailgunAdapter.js","sourcesContent":["const mailgun = require('mailgun-js');\nconst mailcomposer = require('mailcomposer');\nconst Mustache = require('mustache');\nconst co = require('co');\nconst fs = require('fs');\nconst MailAdapter = require('./MailAdapter');\n\nconst ERRORS = {\n  missing_configuration: 'MailgunAdapter requires configuration.',\n  missing_mailgun_settings:\n    'MailgunAdapter requires valid API Key, domain and fromAddress.',\n  bad_template_config: 'MailgunAdapter templates are not properly configured.',\n  invalid_callback: 'MailgunAdapter template callback is not a function.',\n  invalid_template_name: 'Invalid options object: missing templateName'\n};\n\n/**\n * MailAdapter implementation used by the Parse Server to send\n * password reset and email verification emails though Mailgun\n * @classnpm install --save-dev babel-preset-es2015-node\n */\nclass MailgunAdapter extends MailAdapter {\n  constructor(options) {\n    if (!options) {\n      throw new Error(ERRORS.missing_configuration);\n    }\n\n    super(options);\n\n    const { apiKey, domain, fromAddress, host } = options;\n    if (!apiKey || !domain || !fromAddress) {\n      throw new Error(ERRORS.missing_mailgun_settings);\n    }\n\n    const { templates } = options;\n    if (!templates || Object.keys(templates).length === 0) {\n      throw new Error(ERRORS.bad_template_config);\n    }\n\n    for (let name in templates) {\n      const { subject, pathPlainText, callback } = templates[name];\n\n      if (typeof subject !== 'string' || typeof pathPlainText !== 'string') {\n        throw new Error(ERRORS.bad_template_config);\n      }\n\n      if (callback && typeof callback !== 'function') {\n        throw new Error(ERRORS.invalid_callback);\n      }\n    }\n\n    this.mailcomposer = mailcomposer;\n    this.mailgun = mailgun({ apiKey, domain, host });\n    this.fromAddress = fromAddress;\n    this.templates = templates;\n    this.cache = {};\n  }\n\n  /**\n   * Method to send MIME emails via Mailgun\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  _sendMail(options) {\n    let templateVars,\n      message,\n      selectedTemplate = {};\n\n    let templateName = (selectedTemplate.name = options.templateName);\n    if (!templateName) {\n      throw new Error(ERRORS.invalid_template_name);\n    }\n\n    let template = (selectedTemplate.config = this.templates[templateName]);\n    if (!template) {\n      throw new Error(`Could not find template with name ${templateName}`);\n    }\n\n    let user;\n    // The adapter is used directly by the user's code instead via Parse Server\n    if (options.direct) {\n      const { subject, fromAddress, recipient, variables, extra } = options;\n      if (!recipient) {\n        throw new Error(`Cannot send email with template ${templateName} without a recipient`);\n      }\n\n      templateVars = variables || {};\n      message = Object.assign(\n        {\n          from: fromAddress || this.fromAddress,\n          to: recipient,\n          subject: subject || template.subject\n        },\n        extra || {}\n      );\n    } else {\n      const { link, appName } = options;\n      user = options.user;\n\n      templateVars = Object.assign({\n        link,\n        appName,\n        username: user.get('username'),\n        email: user.get('email')\n      });\n\n      message = {\n        from: this.fromAddress,\n        to: user.get('email'),\n        subject: template.subject\n      };\n    }\n\n    const args = { templateVars, message, selectedTemplate, user };\n    return co(this._mailGenerator.bind(this, args)).catch(e => console.error(e));\n  }\n\n  /**\n   * Generator function that handles that handles all the async operations:\n   * template loading, MIME string building and email sending.\n   */\n  *_mailGenerator(args) {\n    let { config: template, name: templateName } = args.selectedTemplate;\n    let { message, templateVars } = args;\n    const { callback } = template;\n\n    if (callback && typeof callback === 'function') {\n      let userVars = yield Promise.resolve(callback(args.user));\n      userVars = this._validateUserVars(userVars);\n      templateVars = Object.assign(templateVars, userVars);\n    }\n\n    let pathPlainText = template.pathPlainText;\n    let pathHtml = template.pathHtml;\n    let extra = template.extra || {};\n    let cachedTemplate = (this.cache[templateName] =\n      this.cache[templateName] || {});\n\n    // Load plain-text version\n    if (!cachedTemplate['text']) {\n      let plainTextEmail = yield this._loadEmailTemplate(pathPlainText);\n      plainTextEmail = plainTextEmail.toString('utf8');\n      cachedTemplate['text'] = plainTextEmail;\n    }\n\n    // Compile plain-text template\n    message.text = Mustache.render(cachedTemplate['text'], templateVars);\n\n    // Load html version if available\n    if (pathHtml) {\n      if (!cachedTemplate['html']) {\n        let htmlEmail = yield this._loadEmailTemplate(pathHtml);\n        cachedTemplate['html'] = htmlEmail.toString('utf8');\n      }\n      // Add processed HTML to the message object\n      message.html = Mustache.render(cachedTemplate['html'], templateVars);\n    }\n\n    // Append any `extra` properties from config\n    message = Object.assign(message, extra || {});\n\n    // Initialize mailcomposer with message\n    const composer = this.mailcomposer(message);\n\n    // Create MIME string\n    const mimeString = yield new Promise((resolve, reject) => {\n      composer.build((error, message) => {\n        if (error) reject(error);\n        resolve(message);\n      });\n    });\n\n    // Assemble payload object for Mailgun\n    const payload = {\n      to: message.to,\n      message: mimeString.toString('utf8')\n    };\n\n    return new Promise((resolve, reject) => {\n      this.mailgun.messages().sendMime(payload, (error, body) => {\n        if (error) reject(error);\n        resolve(body);\n      });\n    });\n  }\n\n  /**\n   * sendMail wrapper to send an email with password reset link\n   * The options object would have the parameters link, appName, user\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  sendPasswordResetEmail({ link, appName, user }) {\n    return this._sendMail({\n      templateName: 'passwordResetEmail',\n      link,\n      appName,\n      user\n    });\n  }\n\n  /**\n   * sendMail wrapper to send an email with an account verification link\n   * The options object would have the parameters link, appName, user\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  sendVerificationEmail({ link, appName, user }) {\n    return this._sendMail({\n      templateName: 'verificationEmail',\n      link,\n      appName,\n      user\n    });\n  }\n\n  /**\n   * sendMail wrapper to send general purpose emails\n   * The options object would have the parameters:\n   * - templateName: name of template to be used\n   * - subject: overrides the default value\n   * - fromAddress: overrides the default from address\n   * - recipient: email's recipient\n   * - variables: An object whose property names represent template variables,\n   *              and whose values will replace the template variable placeholders\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  send({ templateName, subject, fromAddress, recipient, variables, extra }) {\n    return this._sendMail({\n      templateName,\n      subject,\n      fromAddress,\n      recipient,\n      variables,\n      extra,\n      direct: true\n    });\n  }\n\n  /**\n   * Simple Promise wrapper to asynchronously fetch the contents of a template.\n   * @param {String} path\n   * @returns {Promise}\n   */\n  _loadEmailTemplate(path) {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, data) => {\n        if (err) reject(err);\n        resolve(data);\n      });\n    });\n  }\n\n  /**\n   * Validator for user provided template variables\n   * @param {Object} userVars\n   * @returns {Object}\n   */\n  _validateUserVars(userVars) {\n    const validUserVars = userVars && userVars.constructor === Object;\n    // Fall back to an empty object if the callback did not return an Object instance\n    return validUserVars ? userVars : {};\n  }\n}\n\nmodule.exports = MailgunAdapter;\n"]}